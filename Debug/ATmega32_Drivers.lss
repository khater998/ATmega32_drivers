
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000037ea  0000387e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000a6  008000a6  000038c4  2**0
                  ALLOC
  3 .stab         00004068  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000264e  00000000  00000000  0000792c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a0da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a269  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e776  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 18 	call	0x3176	; 0x3176 <main>
      8a:	0c 94 f3 1b 	jmp	0x37e6	; 0x37e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 19 	jmp	0x326e	; 0x326e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 19 	jmp	0x324e	; 0x324e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 19 	jmp	0x324e	; 0x324e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 19 	jmp	0x326e	; 0x326e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 19 	jmp	0x324e	; 0x324e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 19 	jmp	0x324e	; 0x324e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 19 	jmp	0x324e	; 0x324e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 19 	jmp	0x328e	; 0x328e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <INTERRUPT_EXTI0_setTrigger>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType INTERRUPT_EXTI0_setTrigger(const interrupt_trigger_t trigger)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <INTERRUPT_EXTI0_setTrigger+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <INTERRUPT_EXTI0_setTrigger+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	89 83       	std	Y+1, r24	; 0x01

	/* check required trigger */
	switch(trigger)
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3c 83       	std	Y+4, r19	; 0x04
     cb8:	2b 83       	std	Y+3, r18	; 0x03
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	e9 f0       	breq	.+58     	; 0xcfe <INTERRUPT_EXTI0_setTrigger+0x60>
     cc4:	2b 81       	ldd	r18, Y+3	; 0x03
     cc6:	3c 81       	ldd	r19, Y+4	; 0x04
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <INTERRUPT_EXTI0_setTrigger+0x3a>
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	61 f0       	breq	.+24     	; 0xcee <INTERRUPT_EXTI0_setTrigger+0x50>
     cd6:	2d c0       	rjmp	.+90     	; 0xd32 <INTERRUPT_EXTI0_setTrigger+0x94>
     cd8:	2b 81       	ldd	r18, Y+3	; 0x03
     cda:	3c 81       	ldd	r19, Y+4	; 0x04
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	b9 f0       	breq	.+46     	; 0xd10 <INTERRUPT_EXTI0_setTrigger+0x72>
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	d9 f0       	breq	.+54     	; 0xd22 <INTERRUPT_EXTI0_setTrigger+0x84>
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <INTERRUPT_EXTI0_setTrigger+0x94>
	{
	case LOW_LEVEL:
		MCUCR = (MCUCR & 0xFC) | (0x00); 					/* modify ISC01 && ISC00 only to 0,0 */
     cee:	a5 e5       	ldi	r26, 0x55	; 85
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e5 e5       	ldi	r30, 0x55	; 85
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8c 7f       	andi	r24, 0xFC	; 252
     cfa:	8c 93       	st	X, r24
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case ANY_LOGICAL_CHANGE:
		MCUCR = (MCUCR & 0xFC) | (0x01); 					/* modify ISC01 && ISC00 only to 0,1 */
     cfe:	a5 e5       	ldi	r26, 0x55	; 85
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e5       	ldi	r30, 0x55	; 85
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8c 7f       	andi	r24, 0xFC	; 252
     d0a:	81 60       	ori	r24, 0x01	; 1
     d0c:	8c 93       	st	X, r24
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case FALLING_EDGE:
		MCUCR = (MCUCR & 0xFC) | (0x02); 					/* modify ISC01 && ISC00 only to 1,0 */
     d10:	a5 e5       	ldi	r26, 0x55	; 85
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e5       	ldi	r30, 0x55	; 85
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8c 7f       	andi	r24, 0xFC	; 252
     d1c:	82 60       	ori	r24, 0x02	; 2
     d1e:	8c 93       	st	X, r24
     d20:	09 c0       	rjmp	.+18     	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case RISING_EGDE:
		MCUCR = (MCUCR & 0xFC) | (0x03); 					/* modify ISC01 && ISC00 only to 1,1 */
     d22:	a5 e5       	ldi	r26, 0x55	; 85
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e5 e5       	ldi	r30, 0x55	; 85
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	83 60       	ori	r24, 0x03	; 3
     d2e:	8c 93       	st	X, r24
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	default:
		error_status = E_NOT_OK;
     d32:	19 82       	std	Y+1, r1	; 0x01
	}

	return error_status;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <INTERRUPT_EXTI1_setTrigger>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType INTERRUPT_EXTI1_setTrigger(const interrupt_trigger_t trigger)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <INTERRUPT_EXTI1_setTrigger+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <INTERRUPT_EXTI1_setTrigger+0x8>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01

		/* check required trigger */
		switch(trigger)
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3c 83       	std	Y+4, r19	; 0x04
     d5e:	2b 83       	std	Y+3, r18	; 0x03
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	91 05       	cpc	r25, r1
     d68:	e9 f0       	breq	.+58     	; 0xda4 <INTERRUPT_EXTI1_setTrigger+0x60>
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	3c 81       	ldd	r19, Y+4	; 0x04
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	2c f4       	brge	.+10     	; 0xd7e <INTERRUPT_EXTI1_setTrigger+0x3a>
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	61 f0       	breq	.+24     	; 0xd94 <INTERRUPT_EXTI1_setTrigger+0x50>
     d7c:	2d c0       	rjmp	.+90     	; 0xdd8 <INTERRUPT_EXTI1_setTrigger+0x94>
     d7e:	2b 81       	ldd	r18, Y+3	; 0x03
     d80:	3c 81       	ldd	r19, Y+4	; 0x04
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	b9 f0       	breq	.+46     	; 0xdb6 <INTERRUPT_EXTI1_setTrigger+0x72>
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	d9 f0       	breq	.+54     	; 0xdc8 <INTERRUPT_EXTI1_setTrigger+0x84>
     d92:	22 c0       	rjmp	.+68     	; 0xdd8 <INTERRUPT_EXTI1_setTrigger+0x94>
		{
		case LOW_LEVEL:
			MCUCR = (MCUCR & 0xF3) | (0x00); 					/* modify ISC11 && ISC10 only to 0,0 */
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	83 7f       	andi	r24, 0xF3	; 243
     da0:	8c 93       	st	X, r24
     da2:	1b c0       	rjmp	.+54     	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		case ANY_LOGICAL_CHANGE:
			MCUCR = (MCUCR & 0xF3) | (0x04); 					/* modify ISC11 && ISC10 only to 0,1 */
     da4:	a5 e5       	ldi	r26, 0x55	; 85
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e5 e5       	ldi	r30, 0x55	; 85
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	83 7f       	andi	r24, 0xF3	; 243
     db0:	84 60       	ori	r24, 0x04	; 4
     db2:	8c 93       	st	X, r24
     db4:	12 c0       	rjmp	.+36     	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		case FALLING_EDGE:
			MCUCR = (MCUCR & 0xF3) | (0x08); 					/* modify ISC11 && ISC10 only to 1,0 */
     db6:	a5 e5       	ldi	r26, 0x55	; 85
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e5 e5       	ldi	r30, 0x55	; 85
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	83 7f       	andi	r24, 0xF3	; 243
     dc2:	88 60       	ori	r24, 0x08	; 8
     dc4:	8c 93       	st	X, r24
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		case RISING_EGDE:
			MCUCR = (MCUCR & 0xF3) | (0x0C); 					/* modify ISC11 && ISC10 only to 1,1 */
     dc8:	a5 e5       	ldi	r26, 0x55	; 85
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e5       	ldi	r30, 0x55	; 85
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8c 60       	ori	r24, 0x0C	; 12
     dd4:	8c 93       	st	X, r24
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		default:
			error_status = E_NOT_OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
		}

		return error_status;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <INTERRUPT_EXTI2_setTrigger>:
 *
 */


STD_ReturnType INTERRUPT_EXTI2_setTrigger(const interrupt_trigger_t trigger)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <INTERRUPT_EXTI2_setTrigger+0x6>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <INTERRUPT_EXTI2_setTrigger+0x8>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01

		/* check required trigger */
		switch(trigger)
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3c 83       	std	Y+4, r19	; 0x04
     e04:	2b 83       	std	Y+3, r18	; 0x03
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	91 05       	cpc	r25, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <INTERRUPT_EXTI2_setTrigger+0x32>
     e10:	2b 81       	ldd	r18, Y+3	; 0x03
     e12:	3c 81       	ldd	r19, Y+4	; 0x04
     e14:	23 30       	cpi	r18, 0x03	; 3
     e16:	31 05       	cpc	r19, r1
     e18:	49 f0       	breq	.+18     	; 0xe2c <INTERRUPT_EXTI2_setTrigger+0x42>
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <INTERRUPT_EXTI2_setTrigger+0x52>
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR, ISC2);
     e1c:	a4 e5       	ldi	r26, 0x54	; 84
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e4 e5       	ldi	r30, 0x54	; 84
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 7b       	andi	r24, 0xBF	; 191
     e28:	8c 93       	st	X, r24
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <INTERRUPT_EXTI2_setTrigger+0x54>
			break;

		case RISING_EGDE:
			SET_BIT(MCUCSR, ISC2);
     e2c:	a4 e5       	ldi	r26, 0x54	; 84
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e5       	ldi	r30, 0x54	; 84
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	80 64       	ori	r24, 0x40	; 64
     e38:	8c 93       	st	X, r24
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <INTERRUPT_EXTI2_setTrigger+0x54>
			break;

		default:
			error_status = E_NOT_OK;
     e3c:	19 82       	std	Y+1, r1	; 0x01
		}

		return error_status;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <INTERRUPT_EXTI0_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT0_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI0_setCallback(void (* pf_ISR) (void)){
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <INTERRUPT_EXTI0_setCallback+0x6>
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	9b 83       	std	Y+3, r25	; 0x03
     e5c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	11 f4       	brne	.+4      	; 0xe6e <INTERRUPT_EXTI0_setCallback+0x20>
	{
		error_status = E_NOT_OK;
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <INTERRUPT_EXTI0_setCallback+0x2c>
	}
	else
	{
		pf_EXTI0_callBack = pf_ISR;
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	90 93 a7 00 	sts	0x00A7, r25
     e76:	80 93 a6 00 	sts	0x00A6, r24
	}
	return error_status;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <INTERRUPT_EXTI1_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT1_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI1_setCallback(void (* pf_ISR) (void)){
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <INTERRUPT_EXTI1_setCallback+0x6>
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	9b 83       	std	Y+3, r25	; 0x03
     e96:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	11 f4       	brne	.+4      	; 0xea8 <INTERRUPT_EXTI1_setCallback+0x20>
	{
		error_status = E_NOT_OK;
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <INTERRUPT_EXTI1_setCallback+0x2c>
	}
	else
	{
		pf_EXTI1_callBack = pf_ISR;
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	9b 81       	ldd	r25, Y+3	; 0x03
     eac:	90 93 a9 00 	sts	0x00A9, r25
     eb0:	80 93 a8 00 	sts	0x00A8, r24
	}
	return error_status;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <INTERRUPT_EXTI2_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT2_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI2_setCallback(void (* pf_ISR) (void)){
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <INTERRUPT_EXTI2_setCallback+0x6>
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9b 83       	std	Y+3, r25	; 0x03
     ed0:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	11 f4       	brne	.+4      	; 0xee2 <INTERRUPT_EXTI2_setCallback+0x20>
	{
		error_status = E_NOT_OK;
     ede:	19 82       	std	Y+1, r1	; 0x01
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <INTERRUPT_EXTI2_setCallback+0x2c>
	}
	else
	{
		pf_EXTI2_callBack = pf_ISR;
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	90 93 ab 00 	sts	0x00AB, r25
     eea:	80 93 aa 00 	sts	0x00AA, r24
	}
	return error_status;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <GPIO_pinInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinInit(const pin_obj_t * pin_obj)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	27 97       	sbiw	r28, 0x07	; 7
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	9b 83       	std	Y+3, r25	; 0x03
     f12:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	9b 81       	ldd	r25, Y+3	; 0x03
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	11 f4       	brne	.+4      	; 0xf24 <GPIO_pinInit+0x28>
	{
		error_status = E_NOT_OK;
     f20:	19 82       	std	Y+1, r1	; 0x01
     f22:	ea c0       	rjmp	.+468    	; 0x10f8 <GPIO_pinInit+0x1fc>
	}
	else
	{
		/* check the required pin direction */
		switch (pin_obj->direction)
     f24:	ea 81       	ldd	r30, Y+2	; 0x02
     f26:	fb 81       	ldd	r31, Y+3	; 0x03
     f28:	80 81       	ld	r24, Z
     f2a:	82 95       	swap	r24
     f2c:	86 95       	lsr	r24
     f2e:	87 70       	andi	r24, 0x07	; 7
     f30:	81 70       	andi	r24, 0x01	; 1
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3f 83       	std	Y+7, r19	; 0x07
     f38:	2e 83       	std	Y+6, r18	; 0x06
     f3a:	8e 81       	ldd	r24, Y+6	; 0x06
     f3c:	9f 81       	ldd	r25, Y+7	; 0x07
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	31 f0       	breq	.+12     	; 0xf4e <GPIO_pinInit+0x52>
     f42:	2e 81       	ldd	r18, Y+6	; 0x06
     f44:	3f 81       	ldd	r19, Y+7	; 0x07
     f46:	21 30       	cpi	r18, 0x01	; 1
     f48:	31 05       	cpc	r19, r1
     f4a:	91 f1       	breq	.+100    	; 0xfb0 <GPIO_pinInit+0xb4>
     f4c:	5f c0       	rjmp	.+190    	; 0x100c <GPIO_pinInit+0x110>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     f4e:	ea 81       	ldd	r30, Y+2	; 0x02
     f50:	fb 81       	ldd	r31, Y+3	; 0x03
     f52:	80 81       	ld	r24, Z
     f54:	83 70       	andi	r24, 0x03	; 3
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	fc 01       	movw	r30, r24
     f60:	e2 59       	subi	r30, 0x92	; 146
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	a0 81       	ld	r26, Z
     f66:	b1 81       	ldd	r27, Z+1	; 0x01
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	80 81       	ld	r24, Z
     f6e:	83 70       	andi	r24, 0x03	; 3
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	fc 01       	movw	r30, r24
     f7a:	e2 59       	subi	r30, 0x92	; 146
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	01 90       	ld	r0, Z+
     f80:	f0 81       	ld	r31, Z
     f82:	e0 2d       	mov	r30, r0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	ea 81       	ldd	r30, Y+2	; 0x02
     f8a:	fb 81       	ldd	r31, Y+3	; 0x03
     f8c:	80 81       	ld	r24, Z
     f8e:	86 95       	lsr	r24
     f90:	86 95       	lsr	r24
     f92:	87 70       	andi	r24, 0x07	; 7
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <GPIO_pinInit+0xa8>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <GPIO_pinInit+0xa4>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	2e c0       	rjmp	.+92     	; 0x100c <GPIO_pinInit+0x110>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     fb0:	ea 81       	ldd	r30, Y+2	; 0x02
     fb2:	fb 81       	ldd	r31, Y+3	; 0x03
     fb4:	80 81       	ld	r24, Z
     fb6:	83 70       	andi	r24, 0x03	; 3
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	fc 01       	movw	r30, r24
     fc2:	e2 59       	subi	r30, 0x92	; 146
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	a0 81       	ld	r26, Z
     fc8:	b1 81       	ldd	r27, Z+1	; 0x01
     fca:	ea 81       	ldd	r30, Y+2	; 0x02
     fcc:	fb 81       	ldd	r31, Y+3	; 0x03
     fce:	80 81       	ld	r24, Z
     fd0:	83 70       	andi	r24, 0x03	; 3
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 59       	subi	r30, 0x92	; 146
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	01 90       	ld	r0, Z+
     fe2:	f0 81       	ld	r31, Z
     fe4:	e0 2d       	mov	r30, r0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	ea 81       	ldd	r30, Y+2	; 0x02
     fec:	fb 81       	ldd	r31, Y+3	; 0x03
     fee:	80 81       	ld	r24, Z
     ff0:	86 95       	lsr	r24
     ff2:	86 95       	lsr	r24
     ff4:	87 70       	andi	r24, 0x07	; 7
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_pinInit+0x108>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	2a 95       	dec	r18
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_pinInit+0x104>
    1008:	84 2b       	or	r24, r20
    100a:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}

		/* check the required pin logic */
		switch(pin_obj->logic)
    100c:	ea 81       	ldd	r30, Y+2	; 0x02
    100e:	fb 81       	ldd	r31, Y+3	; 0x03
    1010:	80 81       	ld	r24, Z
    1012:	82 95       	swap	r24
    1014:	86 95       	lsr	r24
    1016:	86 95       	lsr	r24
    1018:	83 70       	andi	r24, 0x03	; 3
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3d 83       	std	Y+5, r19	; 0x05
    1022:	2c 83       	std	Y+4, r18	; 0x04
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	31 f0       	breq	.+12     	; 0x1038 <GPIO_pinInit+0x13c>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	21 30       	cpi	r18, 0x01	; 1
    1032:	31 05       	cpc	r19, r1
    1034:	91 f1       	breq	.+100    	; 0x109a <GPIO_pinInit+0x19e>
    1036:	60 c0       	rjmp	.+192    	; 0x10f8 <GPIO_pinInit+0x1fc>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1038:	ea 81       	ldd	r30, Y+2	; 0x02
    103a:	fb 81       	ldd	r31, Y+3	; 0x03
    103c:	80 81       	ld	r24, Z
    103e:	83 70       	andi	r24, 0x03	; 3
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	ea 58       	subi	r30, 0x8A	; 138
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	a0 81       	ld	r26, Z
    1050:	b1 81       	ldd	r27, Z+1	; 0x01
    1052:	ea 81       	ldd	r30, Y+2	; 0x02
    1054:	fb 81       	ldd	r31, Y+3	; 0x03
    1056:	80 81       	ld	r24, Z
    1058:	83 70       	andi	r24, 0x03	; 3
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	fc 01       	movw	r30, r24
    1064:	ea 58       	subi	r30, 0x8A	; 138
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	01 90       	ld	r0, Z+
    106a:	f0 81       	ld	r31, Z
    106c:	e0 2d       	mov	r30, r0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	80 81       	ld	r24, Z
    1078:	86 95       	lsr	r24
    107a:	86 95       	lsr	r24
    107c:	87 70       	andi	r24, 0x07	; 7
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_pinInit+0x192>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_pinInit+0x18e>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	2f c0       	rjmp	.+94     	; 0x10f8 <GPIO_pinInit+0x1fc>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    109a:	ea 81       	ldd	r30, Y+2	; 0x02
    109c:	fb 81       	ldd	r31, Y+3	; 0x03
    109e:	80 81       	ld	r24, Z
    10a0:	83 70       	andi	r24, 0x03	; 3
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	fc 01       	movw	r30, r24
    10ac:	ea 58       	subi	r30, 0x8A	; 138
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	a0 81       	ld	r26, Z
    10b2:	b1 81       	ldd	r27, Z+1	; 0x01
    10b4:	ea 81       	ldd	r30, Y+2	; 0x02
    10b6:	fb 81       	ldd	r31, Y+3	; 0x03
    10b8:	80 81       	ld	r24, Z
    10ba:	83 70       	andi	r24, 0x03	; 3
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	fc 01       	movw	r30, r24
    10c6:	ea 58       	subi	r30, 0x8A	; 138
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	01 90       	ld	r0, Z+
    10cc:	f0 81       	ld	r31, Z
    10ce:	e0 2d       	mov	r30, r0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	ea 81       	ldd	r30, Y+2	; 0x02
    10d6:	fb 81       	ldd	r31, Y+3	; 0x03
    10d8:	80 81       	ld	r24, Z
    10da:	86 95       	lsr	r24
    10dc:	86 95       	lsr	r24
    10de:	87 70       	andi	r24, 0x07	; 7
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_pinInit+0x1f4>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_pinInit+0x1f0>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
			/* default:
					error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01

}
    10fa:	27 96       	adiw	r28, 0x07	; 7
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <GPIO_pinDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinDirectionInit(const pin_obj_t * pin_obj, GPIO_direction_t direction)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <GPIO_pinDirectionInit+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <GPIO_pinDirectionInit+0x8>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <GPIO_pinDirectionInit+0xa>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9b 83       	std	Y+3, r25	; 0x03
    111c:	8a 83       	std	Y+2, r24	; 0x02
    111e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	11 f4       	brne	.+4      	; 0x1130 <GPIO_pinDirectionInit+0x24>
	{
		error_status = E_NOT_OK;
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	6f c0       	rjmp	.+222    	; 0x120e <GPIO_pinDirectionInit+0x102>
	}
	else
	{
		/* check the required pin direction */
		switch (direction)
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3e 83       	std	Y+6, r19	; 0x06
    1138:	2d 83       	std	Y+5, r18	; 0x05
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	31 f0       	breq	.+12     	; 0x114e <GPIO_pinDirectionInit+0x42>
    1142:	2d 81       	ldd	r18, Y+5	; 0x05
    1144:	3e 81       	ldd	r19, Y+6	; 0x06
    1146:	21 30       	cpi	r18, 0x01	; 1
    1148:	31 05       	cpc	r19, r1
    114a:	91 f1       	breq	.+100    	; 0x11b0 <GPIO_pinDirectionInit+0xa4>
    114c:	60 c0       	rjmp	.+192    	; 0x120e <GPIO_pinDirectionInit+0x102>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    114e:	ea 81       	ldd	r30, Y+2	; 0x02
    1150:	fb 81       	ldd	r31, Y+3	; 0x03
    1152:	80 81       	ld	r24, Z
    1154:	83 70       	andi	r24, 0x03	; 3
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	fc 01       	movw	r30, r24
    1160:	e2 59       	subi	r30, 0x92	; 146
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	a0 81       	ld	r26, Z
    1166:	b1 81       	ldd	r27, Z+1	; 0x01
    1168:	ea 81       	ldd	r30, Y+2	; 0x02
    116a:	fb 81       	ldd	r31, Y+3	; 0x03
    116c:	80 81       	ld	r24, Z
    116e:	83 70       	andi	r24, 0x03	; 3
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	fc 01       	movw	r30, r24
    117a:	e2 59       	subi	r30, 0x92	; 146
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	01 90       	ld	r0, Z+
    1180:	f0 81       	ld	r31, Z
    1182:	e0 2d       	mov	r30, r0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	ea 81       	ldd	r30, Y+2	; 0x02
    118a:	fb 81       	ldd	r31, Y+3	; 0x03
    118c:	80 81       	ld	r24, Z
    118e:	86 95       	lsr	r24
    1190:	86 95       	lsr	r24
    1192:	87 70       	andi	r24, 0x07	; 7
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_pinDirectionInit+0x98>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_pinDirectionInit+0x94>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	2f c0       	rjmp	.+94     	; 0x120e <GPIO_pinDirectionInit+0x102>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    11b0:	ea 81       	ldd	r30, Y+2	; 0x02
    11b2:	fb 81       	ldd	r31, Y+3	; 0x03
    11b4:	80 81       	ld	r24, Z
    11b6:	83 70       	andi	r24, 0x03	; 3
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	fc 01       	movw	r30, r24
    11c2:	e2 59       	subi	r30, 0x92	; 146
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	a0 81       	ld	r26, Z
    11c8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ca:	ea 81       	ldd	r30, Y+2	; 0x02
    11cc:	fb 81       	ldd	r31, Y+3	; 0x03
    11ce:	80 81       	ld	r24, Z
    11d0:	83 70       	andi	r24, 0x03	; 3
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	fc 01       	movw	r30, r24
    11dc:	e2 59       	subi	r30, 0x92	; 146
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	01 90       	ld	r0, Z+
    11e2:	f0 81       	ld	r31, Z
    11e4:	e0 2d       	mov	r30, r0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	ea 81       	ldd	r30, Y+2	; 0x02
    11ec:	fb 81       	ldd	r31, Y+3	; 0x03
    11ee:	80 81       	ld	r24, Z
    11f0:	86 95       	lsr	r24
    11f2:	86 95       	lsr	r24
    11f4:	87 70       	andi	r24, 0x07	; 7
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_pinDirectionInit+0xfa>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_pinDirectionInit+0xf6>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
			 * so, there is no need for default case in here */
			/* default:
					error_status = E_NOT_OK;*/
		}
	}
	return error_status;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	26 96       	adiw	r28, 0x06	; 6
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <GPIO_pinGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinGetDirection(const pin_obj_t * pin_obj, GPIO_direction_t * direction)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <GPIO_pinGetDirection+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <GPIO_pinGetDirection+0x8>
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	9b 83       	std	Y+3, r25	; 0x03
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	7d 83       	std	Y+5, r23	; 0x05
    1236:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	11 f4       	brne	.+4      	; 0x1248 <GPIO_pinGetDirection+0x26>
	{
		error_status = E_NOT_OK;
    1244:	19 82       	std	Y+1, r1	; 0x01
    1246:	24 c0       	rjmp	.+72     	; 0x1290 <GPIO_pinGetDirection+0x6e>
	}
	else
	{
		/* update the passed argument with the current pin state */
		*direction = READ_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    1248:	ea 81       	ldd	r30, Y+2	; 0x02
    124a:	fb 81       	ldd	r31, Y+3	; 0x03
    124c:	80 81       	ld	r24, Z
    124e:	83 70       	andi	r24, 0x03	; 3
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	fc 01       	movw	r30, r24
    125a:	e2 59       	subi	r30, 0x92	; 146
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	01 90       	ld	r0, Z+
    1260:	f0 81       	ld	r31, Z
    1262:	e0 2d       	mov	r30, r0
    1264:	80 81       	ld	r24, Z
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	ea 81       	ldd	r30, Y+2	; 0x02
    126c:	fb 81       	ldd	r31, Y+3	; 0x03
    126e:	80 81       	ld	r24, Z
    1270:	86 95       	lsr	r24
    1272:	86 95       	lsr	r24
    1274:	87 70       	andi	r24, 0x07	; 7
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <GPIO_pinGetDirection+0x60>
    127e:	55 95       	asr	r21
    1280:	47 95       	ror	r20
    1282:	8a 95       	dec	r24
    1284:	e2 f7       	brpl	.-8      	; 0x127e <GPIO_pinGetDirection+0x5c>
    1286:	ca 01       	movw	r24, r20
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	ec 81       	ldd	r30, Y+4	; 0x04
    128c:	fd 81       	ldd	r31, Y+5	; 0x05
    128e:	80 83       	st	Z, r24
	}

	return error_status;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <GPIO_pinWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinWrite(const pin_obj_t * pin_obj, GPIO_logic_t logic)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <GPIO_pinWrite+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <GPIO_pinWrite+0x8>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <GPIO_pinWrite+0xa>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9b 83       	std	Y+3, r25	; 0x03
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <GPIO_pinWrite+0x24>
	{
		error_status = E_NOT_OK;
    12c2:	19 82       	std	Y+1, r1	; 0x01
    12c4:	6f c0       	rjmp	.+222    	; 0x13a4 <GPIO_pinWrite+0x102>
	}
	else
	{
		/* check the required pin logic */
		switch(logic)
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3e 83       	std	Y+6, r19	; 0x06
    12ce:	2d 83       	std	Y+5, r18	; 0x05
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <GPIO_pinWrite+0x42>
    12d8:	2d 81       	ldd	r18, Y+5	; 0x05
    12da:	3e 81       	ldd	r19, Y+6	; 0x06
    12dc:	21 30       	cpi	r18, 0x01	; 1
    12de:	31 05       	cpc	r19, r1
    12e0:	91 f1       	breq	.+100    	; 0x1346 <GPIO_pinWrite+0xa4>
    12e2:	60 c0       	rjmp	.+192    	; 0x13a4 <GPIO_pinWrite+0x102>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    12e4:	ea 81       	ldd	r30, Y+2	; 0x02
    12e6:	fb 81       	ldd	r31, Y+3	; 0x03
    12e8:	80 81       	ld	r24, Z
    12ea:	83 70       	andi	r24, 0x03	; 3
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	fc 01       	movw	r30, r24
    12f6:	ea 58       	subi	r30, 0x8A	; 138
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	a0 81       	ld	r26, Z
    12fc:	b1 81       	ldd	r27, Z+1	; 0x01
    12fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1300:	fb 81       	ldd	r31, Y+3	; 0x03
    1302:	80 81       	ld	r24, Z
    1304:	83 70       	andi	r24, 0x03	; 3
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	fc 01       	movw	r30, r24
    1310:	ea 58       	subi	r30, 0x8A	; 138
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	01 90       	ld	r0, Z+
    1316:	f0 81       	ld	r31, Z
    1318:	e0 2d       	mov	r30, r0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	80 81       	ld	r24, Z
    1324:	86 95       	lsr	r24
    1326:	86 95       	lsr	r24
    1328:	87 70       	andi	r24, 0x07	; 7
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_pinWrite+0x98>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_pinWrite+0x94>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	2f c0       	rjmp	.+94     	; 0x13a4 <GPIO_pinWrite+0x102>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1346:	ea 81       	ldd	r30, Y+2	; 0x02
    1348:	fb 81       	ldd	r31, Y+3	; 0x03
    134a:	80 81       	ld	r24, Z
    134c:	83 70       	andi	r24, 0x03	; 3
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	fc 01       	movw	r30, r24
    1358:	ea 58       	subi	r30, 0x8A	; 138
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	a0 81       	ld	r26, Z
    135e:	b1 81       	ldd	r27, Z+1	; 0x01
    1360:	ea 81       	ldd	r30, Y+2	; 0x02
    1362:	fb 81       	ldd	r31, Y+3	; 0x03
    1364:	80 81       	ld	r24, Z
    1366:	83 70       	andi	r24, 0x03	; 3
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	fc 01       	movw	r30, r24
    1372:	ea 58       	subi	r30, 0x8A	; 138
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	01 90       	ld	r0, Z+
    1378:	f0 81       	ld	r31, Z
    137a:	e0 2d       	mov	r30, r0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	ea 81       	ldd	r30, Y+2	; 0x02
    1382:	fb 81       	ldd	r31, Y+3	; 0x03
    1384:	80 81       	ld	r24, Z
    1386:	86 95       	lsr	r24
    1388:	86 95       	lsr	r24
    138a:	87 70       	andi	r24, 0x07	; 7
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <GPIO_pinWrite+0xfa>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <GPIO_pinWrite+0xf6>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a6:	26 96       	adiw	r28, 0x06	; 6
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <GPIO_pinRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinRead(const pin_obj_t * pin_obj, GPIO_logic_t * logic)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <GPIO_pinRead+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <GPIO_pinRead+0x8>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	9b 83       	std	Y+3, r25	; 0x03
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	7d 83       	std	Y+5, r23	; 0x05
    13cc:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	11 f4       	brne	.+4      	; 0x13de <GPIO_pinRead+0x26>
	{
		error_status = E_NOT_OK;
    13da:	19 82       	std	Y+1, r1	; 0x01
    13dc:	24 c0       	rjmp	.+72     	; 0x1426 <GPIO_pinRead+0x6e>
	}
	else
	{
		*logic = READ_BIT(*(PIN_registers[pin_obj->port_id]), pin_obj->pin_id);
    13de:	ea 81       	ldd	r30, Y+2	; 0x02
    13e0:	fb 81       	ldd	r31, Y+3	; 0x03
    13e2:	80 81       	ld	r24, Z
    13e4:	83 70       	andi	r24, 0x03	; 3
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	fc 01       	movw	r30, r24
    13f0:	e2 58       	subi	r30, 0x82	; 130
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	01 90       	ld	r0, Z+
    13f6:	f0 81       	ld	r31, Z
    13f8:	e0 2d       	mov	r30, r0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	ea 81       	ldd	r30, Y+2	; 0x02
    1402:	fb 81       	ldd	r31, Y+3	; 0x03
    1404:	80 81       	ld	r24, Z
    1406:	86 95       	lsr	r24
    1408:	86 95       	lsr	r24
    140a:	87 70       	andi	r24, 0x07	; 7
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_pinRead+0x60>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_pinRead+0x5c>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	ec 81       	ldd	r30, Y+4	; 0x04
    1422:	fd 81       	ldd	r31, Y+5	; 0x05
    1424:	80 83       	st	Z, r24
	}

	return error_status;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <GPIO_pinToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinToggle(const pin_obj_t * pin_obj)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <GPIO_pinToggle+0x6>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9b 83       	std	Y+3, r25	; 0x03
    1446:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	11 f4       	brne	.+4      	; 0x1458 <GPIO_pinToggle+0x20>
	{
		error_status = E_NOT_OK;
    1454:	19 82       	std	Y+1, r1	; 0x01
    1456:	2f c0       	rjmp	.+94     	; 0x14b6 <GPIO_pinToggle+0x7e>
	}
	else
	{
		TOGGLE_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1458:	ea 81       	ldd	r30, Y+2	; 0x02
    145a:	fb 81       	ldd	r31, Y+3	; 0x03
    145c:	80 81       	ld	r24, Z
    145e:	83 70       	andi	r24, 0x03	; 3
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	fc 01       	movw	r30, r24
    146a:	ea 58       	subi	r30, 0x8A	; 138
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	a0 81       	ld	r26, Z
    1470:	b1 81       	ldd	r27, Z+1	; 0x01
    1472:	ea 81       	ldd	r30, Y+2	; 0x02
    1474:	fb 81       	ldd	r31, Y+3	; 0x03
    1476:	80 81       	ld	r24, Z
    1478:	83 70       	andi	r24, 0x03	; 3
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	fc 01       	movw	r30, r24
    1484:	ea 58       	subi	r30, 0x8A	; 138
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	01 90       	ld	r0, Z+
    148a:	f0 81       	ld	r31, Z
    148c:	e0 2d       	mov	r30, r0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	ea 81       	ldd	r30, Y+2	; 0x02
    1494:	fb 81       	ldd	r31, Y+3	; 0x03
    1496:	80 81       	ld	r24, Z
    1498:	86 95       	lsr	r24
    149a:	86 95       	lsr	r24
    149c:	87 70       	andi	r24, 0x07	; 7
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_pinToggle+0x76>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_pinToggle+0x72>
    14b2:	84 27       	eor	r24, r20
    14b4:	8c 93       	st	X, r24
	}

	return error_status;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <GPIO_portDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portDirectionInit(const port_id_t port, uint8 direction)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <GPIO_portDirectionInit+0x6>
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	10 f0       	brcs	.+4      	; 0x14e2 <GPIO_portDirectionInit+0x1e>
	{
		error_status = E_NOT_OK;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	0d c0       	rjmp	.+26     	; 0x14fc <GPIO_portDirectionInit+0x38>
	}
	else
	{
		*(DDR_registers[port]) = direction;
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	fc 01       	movw	r30, r24
    14ee:	e2 59       	subi	r30, 0x92	; 146
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	01 90       	ld	r0, Z+
    14f4:	f0 81       	ld	r31, Z
    14f6:	e0 2d       	mov	r30, r0
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	80 83       	st	Z, r24
	}
	return error_status;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <GPIO_portGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portGetDirection(const port_id_t port, uint8 * direction)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_portGetDirection+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <GPIO_portGetDirection+0x8>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	8a 83       	std	Y+2, r24	; 0x02
    1518:	7c 83       	std	Y+4, r23	; 0x04
    151a:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	10 f0       	brcs	.+4      	; 0x152a <GPIO_portGetDirection+0x20>
	{
		error_status = E_NOT_OK;
    1526:	19 82       	std	Y+1, r1	; 0x01
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <GPIO_portGetDirection+0x3e>
	}
	else
	{
		*direction = *(DDR_registers[port]);
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	fc 01       	movw	r30, r24
    1536:	e2 59       	subi	r30, 0x92	; 146
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	01 90       	ld	r0, Z+
    153c:	f0 81       	ld	r31, Z
    153e:	e0 2d       	mov	r30, r0
    1540:	80 81       	ld	r24, Z
    1542:	eb 81       	ldd	r30, Y+3	; 0x03
    1544:	fc 81       	ldd	r31, Y+4	; 0x04
    1546:	80 83       	st	Z, r24
	}
	return error_status;
    1548:	89 81       	ldd	r24, Y+1	; 0x01

}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <GPIO_portWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portWrite(const port_id_t port, uint8 logic)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <GPIO_portWrite+0x6>
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
	/* check if port id is valid */

	if (port > PORT_MAX_NUMBER-1)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	10 f0       	brcs	.+4      	; 0x1576 <GPIO_portWrite+0x1e>
	{
		error_status = E_NOT_OK;
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	0d c0       	rjmp	.+26     	; 0x1590 <GPIO_portWrite+0x38>
	}
	else
	{
		*(PORT_registers[port]) = logic;
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	fc 01       	movw	r30, r24
    1582:	ea 58       	subi	r30, 0x8A	; 138
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	01 90       	ld	r0, Z+
    1588:	f0 81       	ld	r31, Z
    158a:	e0 2d       	mov	r30, r0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	80 83       	st	Z, r24
	}
	return error_status;
    1590:	89 81       	ldd	r24, Y+1	; 0x01

}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <GPIO_portRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portRead(const port_id_t port, uint8 * logic)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <GPIO_portRead+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <GPIO_portRead+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8a 83       	std	Y+2, r24	; 0x02
    15ac:	7c 83       	std	Y+4, r23	; 0x04
    15ae:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	84 30       	cpi	r24, 0x04	; 4
    15b8:	10 f0       	brcs	.+4      	; 0x15be <GPIO_portRead+0x20>
	{
		error_status = E_NOT_OK;
    15ba:	19 82       	std	Y+1, r1	; 0x01
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <GPIO_portRead+0x3e>
	}
	else
	{
		*logic = *(PORT_registers[port]);
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	fc 01       	movw	r30, r24
    15ca:	ea 58       	subi	r30, 0x8A	; 138
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	01 90       	ld	r0, Z+
    15d0:	f0 81       	ld	r31, Z
    15d2:	e0 2d       	mov	r30, r0
    15d4:	80 81       	ld	r24, Z
    15d6:	eb 81       	ldd	r30, Y+3	; 0x03
    15d8:	fc 81       	ldd	r31, Y+4	; 0x04
    15da:	80 83       	st	Z, r24
	}
	return error_status;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <GPIO_portToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portToggle(const port_id_t port)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <GPIO_portToggle+0x6>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	10 f0       	brcs	.+4      	; 0x1606 <GPIO_portToggle+0x1a>
	{
		error_status = E_NOT_OK;
    1602:	19 82       	std	Y+1, r1	; 0x01
    1604:	18 c0       	rjmp	.+48     	; 0x1636 <GPIO_portToggle+0x4a>
	}

	else
	{
		/*toggle all port pins*/
		*(PORT_registers[port]) ^= 0xFF;
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	fc 01       	movw	r30, r24
    1612:	ea 58       	subi	r30, 0x8A	; 138
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	a0 81       	ld	r26, Z
    1618:	b1 81       	ldd	r27, Z+1	; 0x01
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	fc 01       	movw	r30, r24
    1626:	ea 58       	subi	r30, 0x8A	; 138
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	01 90       	ld	r0, Z+
    162c:	f0 81       	ld	r31, Z
    162e:	e0 2d       	mov	r30, r0
    1630:	80 81       	ld	r24, Z
    1632:	80 95       	com	r24
    1634:	8c 93       	st	X, r24
	}
	return error_status;
    1636:	89 81       	ldd	r24, Y+1	; 0x01

}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <EEPROM_read>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType EEPROM_read(const uint16 address, uint8* data){
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <EEPROM_read+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <EEPROM_read+0x8>
    164a:	0f 92       	push	r0
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	9b 83       	std	Y+3, r25	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	7d 83       	std	Y+5, r23	; 0x05
    1656:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == data)
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	11 f4       	brne	.+4      	; 0x1668 <EEPROM_read+0x26>
	{
		error_status = E_NOT_OK;
    1664:	19 82       	std	Y+1, r1	; 0x01
    1666:	23 c0       	rjmp	.+70     	; 0x16ae <EEPROM_read+0x6c>
	}
	else
	{
		/* Wait for completion of previous write */
		while(READ_BIT(EECR, EEWE));
    1668:	ec e3       	ldi	r30, 0x3C	; 60
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	86 95       	lsr	r24
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	90 70       	andi	r25, 0x00	; 0
    1678:	88 23       	and	r24, r24
    167a:	b1 f7       	brne	.-20     	; 0x1668 <EEPROM_read+0x26>

		/* 1. update address registers */
		EEARH = (uint8) (address >> 8) & 0x03;
    167c:	ef e3       	ldi	r30, 0x3F	; 63
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	89 2f       	mov	r24, r25
    1686:	99 27       	eor	r25, r25
    1688:	83 70       	andi	r24, 0x03	; 3
    168a:	80 83       	st	Z, r24
		EEARH = (uint8) (address & 0xFF);
    168c:	ef e3       	ldi	r30, 0x3F	; 63
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	80 83       	st	Z, r24

		/* 2. Write logical one to EERE */
		SET_BIT(EECR, EERE);
    1694:	ac e3       	ldi	r26, 0x3C	; 60
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ec e3       	ldi	r30, 0x3C	; 60
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	8c 93       	st	X, r24

		/* Store EEDR content in data */
		*data = EEDR;
    16a2:	ed e3       	ldi	r30, 0x3D	; 61
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	ec 81       	ldd	r30, Y+4	; 0x04
    16aa:	fd 81       	ldd	r31, Y+5	; 0x05
    16ac:	80 83       	st	Z, r24
	}
	return error_status;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <EEPROM_write>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType EEPROM_write(const uint16 address, uint8 data){
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	27 97       	sbiw	r28, 0x07	; 7
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	6d 83       	std	Y+5, r22	; 0x05
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	8a 83       	std	Y+2, r24	; 0x02

	/* Wait for completion of previous write */
	while(READ_BIT(EECR, EEWE));
    16de:	ec e3       	ldi	r30, 0x3C	; 60
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	86 95       	lsr	r24
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	81 70       	andi	r24, 0x01	; 1
    16ec:	90 70       	andi	r25, 0x00	; 0
    16ee:	88 23       	and	r24, r24
    16f0:	b1 f7       	brne	.-20     	; 0x16de <EEPROM_write+0x1e>

	/* 1. read global interrupt status */
	uint8 global_interrupt_status = READ_BIT(SREG, 7);
    16f2:	ef e5       	ldi	r30, 0x5F	; 95
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 1f       	adc	r24, r24
    16fa:	88 27       	eor	r24, r24
    16fc:	88 1f       	adc	r24, r24
    16fe:	89 83       	std	Y+1, r24	; 0x01

	/* 2. disable global interrupt*/
	CLR_BIT(SREG, 7);
    1700:	af e5       	ldi	r26, 0x5F	; 95
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ef e5       	ldi	r30, 0x5F	; 95
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 77       	andi	r24, 0x7F	; 127
    170c:	8c 93       	st	X, r24

	/* 3. update address registers */
	EEARH = (uint8) (address >> 8) & 0x03;
    170e:	ef e3       	ldi	r30, 0x3F	; 63
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	89 2f       	mov	r24, r25
    1718:	99 27       	eor	r25, r25
    171a:	83 70       	andi	r24, 0x03	; 3
    171c:	80 83       	st	Z, r24
	EEARH = (uint8) (address & 0xFF);
    171e:	ef e3       	ldi	r30, 0x3F	; 63
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	80 83       	st	Z, r24

	/* 4. update data register */
	EEDR = data;
    1726:	ed e3       	ldi	r30, 0x3D	; 61
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	80 83       	st	Z, r24

	/* 5. set EEMWE */
	SET_BIT(EECR, EEMWE);
    172e:	ac e3       	ldi	r26, 0x3C	; 60
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ec e3       	ldi	r30, 0x3C	; 60
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	84 60       	ori	r24, 0x04	; 4
    173a:	8c 93       	st	X, r24

	/* 6. set EEWE */
	SET_BIT(EECR, EEWE);
    173c:	ac e3       	ldi	r26, 0x3C	; 60
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ec e3       	ldi	r30, 0x3C	; 60
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	82 60       	ori	r24, 0x02	; 2
    1748:	8c 93       	st	X, r24

	/* 7. set global interrupt flag to its original value */
	global_interrupt_status == 1 ? SET_BIT(SREG, 7) : CLR_BIT(SREG, 7);
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	49 f4       	brne	.+18     	; 0x1762 <EEPROM_write+0xa2>
    1750:	af e5       	ldi	r26, 0x5F	; 95
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ef e5       	ldi	r30, 0x5F	; 95
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 68       	ori	r24, 0x80	; 128
    175c:	8c 93       	st	X, r24
    175e:	8c 91       	ld	r24, X
    1760:	08 c0       	rjmp	.+16     	; 0x1772 <EEPROM_write+0xb2>
    1762:	af e5       	ldi	r26, 0x5F	; 95
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ef e5       	ldi	r30, 0x5F	; 95
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 77       	andi	r24, 0x7F	; 127
    176e:	8c 93       	st	X, r24
    1770:	8c 91       	ld	r24, X


	return error_status;
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1774:	27 96       	adiw	r28, 0x07	; 7
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <ADC_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType ADC_init(const adc_prescaler_t prescaler_id){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <ADC_init+0x6>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	89 83       	std	Y+1, r24	; 0x01

	if (prescaler_id < 0 || prescaler_id > 7)		/* check if prescaler_id is not of the specified set of values */
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	88 30       	cpi	r24, 0x08	; 8
    179a:	10 f0       	brcs	.+4      	; 0x17a0 <ADC_init+0x1a>
	{
		error_status = E_NOT_OK;
    179c:	19 82       	std	Y+1, r1	; 0x01
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <ADC_init+0x2c>
		/* ADMUX Register Bits Description:
		 * REFS1:0 = 01 to choose AVCC = 5v as reference voltage
		 * ADLAR   = 0 right adjusted
		 * MUX4:0  = 00000 to choose channel 0 as initialization
		 */
		ADMUX = (1 << REFS0);
    17a0:	e7 e2       	ldi	r30, 0x27	; 39
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 e4       	ldi	r24, 0x40	; 64
    17a6:	80 83       	st	Z, r24
		 * ADEN    = 1 Enable ADC
		 * ADIE    = 0 Disable ADC Interrupt
		 * ADATE   = 0 Disable Auto Trigger
		 * ADPS2:0 = user passed value --> ADC must operate in range 50-200Khz
		 */
		ADCSRA = prescaler_id | (1 << ADEN);
    17a8:	e6 e2       	ldi	r30, 0x26	; 38
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	80 68       	ori	r24, 0x80	; 128
    17b0:	80 83       	st	Z, r24
	}
	return error_status;
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <ADC_readChannel>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType ADC_readChannel(const adc_channel_t ch_num, uint16 * digital_out){
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <ADC_readChannel+0x6>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <ADC_readChannel+0x8>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	7c 83       	std	Y+4, r23	; 0x04
    17ce:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01

	if(ch_num < 0 || ch_num > 7)						/* check if ch_num is invalid */
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	88 30       	cpi	r24, 0x08	; 8
    17d8:	10 f0       	brcs	.+4      	; 0x17de <ADC_readChannel+0x20>
	{
		error_status = E_NOT_OK;
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	31 c0       	rjmp	.+98     	; 0x1840 <ADC_readChannel+0x82>
	}
	else
	{
		ADMUX |= (ADMUX & 0xF8) | (ch_num & 0x07); 	/* assign the ch_num to the first 3 bits of ADMUX register */
    17de:	a7 e2       	ldi	r26, 0x27	; 39
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e7 e2       	ldi	r30, 0x27	; 39
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	28 2f       	mov	r18, r24
    17ea:	e7 e2       	ldi	r30, 0x27	; 39
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	98 2f       	mov	r25, r24
    17f2:	98 7f       	andi	r25, 0xF8	; 248
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	87 70       	andi	r24, 0x07	; 7
    17f8:	89 2b       	or	r24, r25
    17fa:	82 2b       	or	r24, r18
    17fc:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, ADSC);						/* start conversion */
    17fe:	a6 e2       	ldi	r26, 0x26	; 38
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e6 e2       	ldi	r30, 0x26	; 38
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	80 64       	ori	r24, 0x40	; 64
    180a:	8c 93       	st	X, r24
		LOOP_UNTIL_BIT_IS_SET(ADCSRA, ADIF);		/* wait for conversion to complete */
    180c:	e6 e2       	ldi	r30, 0x26	; 38
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	82 95       	swap	r24
    1814:	8f 70       	andi	r24, 0x0F	; 15
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	81 70       	andi	r24, 0x01	; 1
    181c:	90 70       	andi	r25, 0x00	; 0
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	a9 f3       	breq	.-22     	; 0x180c <ADC_readChannel+0x4e>
		SET_BIT(ADCSRA, ADIF);						/* clear adc interrupt flag by setting it to 1 */
    1822:	a6 e2       	ldi	r26, 0x26	; 38
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e6 e2       	ldi	r30, 0x26	; 38
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 61       	ori	r24, 0x10	; 16
    182e:	8c 93       	st	X, r24
		*digital_out = ADC;							/* store conversion result in the passed argument */
    1830:	e4 e2       	ldi	r30, 0x24	; 36
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	eb 81       	ldd	r30, Y+3	; 0x03
    183a:	fc 81       	ldd	r31, Y+4	; 0x04
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
	}

	return error_status;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <SEVEN_SEG_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType SEVEN_SEG_init(const seven_seg_t *seven_seg)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <SEVEN_SEG_init+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <SEVEN_SEG_init+0x8>
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;				/* to store the error value to be returned */
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == seven_seg)							/* check for null pointer */
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	11 f4       	brne	.+4      	; 0x1870 <SEVEN_SEG_init+0x20>
	{
		error_status = E_NOT_OK;
    186c:	1a 82       	std	Y+2, r1	; 0x02
    186e:	13 c0       	rjmp	.+38     	; 0x1896 <SEVEN_SEG_init+0x46>
	}
	else
	{
		uint8 counter;
		/*	Initialize all decoder pins as output */
		for (counter = 0; counter < NO_SEGMENT_PINS; counter++)
    1870:	19 82       	std	Y+1, r1	; 0x01
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <SEVEN_SEG_init+0x40>
		{
			error_status = GPIO_pinDirectionInit(&(seven_seg->segment_pins[counter]), GPIO_OUTPUT);
    1874:	2b 81       	ldd	r18, Y+3	; 0x03
    1876:	3c 81       	ldd	r19, Y+4	; 0x04
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	82 0f       	add	r24, r18
    1880:	93 1f       	adc	r25, r19
    1882:	61 e0       	ldi	r22, 0x01	; 1
    1884:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_pinDirectionInit>
    1888:	8a 83       	std	Y+2, r24	; 0x02
	}
	else
	{
		uint8 counter;
		/*	Initialize all decoder pins as output */
		for (counter = 0; counter < NO_SEGMENT_PINS; counter++)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	8f 5f       	subi	r24, 0xFF	; 255
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	87 30       	cpi	r24, 0x07	; 7
    1894:	78 f3       	brcs	.-34     	; 0x1874 <SEVEN_SEG_init+0x24>
			error_status = GPIO_pinDirectionInit(&(seven_seg->segment_pins[counter]), GPIO_OUTPUT);
		}

	}

	return error_status;
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <SEVEN_SEG_write>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType SEVEN_SEG_write(const seven_seg_t *seven_seg, uint8 number)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	6b 97       	sbiw	r28, 0x1b	; 27
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	9b 83       	std	Y+3, r25	; 0x03
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;				/* to store the error value to be returned */
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == seven_seg || number > 9)				/* check for null pointer or invalid number */
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	19 f0       	breq	.+6      	; 0x18d2 <SEVEN_SEG_write+0x2c>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	8a 30       	cpi	r24, 0x0A	; 10
    18d0:	10 f0       	brcs	.+4      	; 0x18d6 <SEVEN_SEG_write+0x30>
	{
		error_status = E_NOT_OK;
    18d2:	19 82       	std	Y+1, r1	; 0x01
    18d4:	a6 c1       	rjmp	.+844    	; 0x1c22 <SEVEN_SEG_write+0x37c>
		error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), READ_BIT(number, 2));
		error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), READ_BIT(number, 3));

#else 					/* without decoder */
		/* 1. determine the type of the 7-segment */
		switch(seven_seg->segment_type)
    18d6:	ea 81       	ldd	r30, Y+2	; 0x02
    18d8:	fb 81       	ldd	r31, Y+3	; 0x03
    18da:	87 81       	ldd	r24, Z+7	; 0x07
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3b 8f       	std	Y+27, r19	; 0x1b
    18e2:	2a 8f       	std	Y+26, r18	; 0x1a
    18e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	39 f0       	breq	.+14     	; 0x18fa <SEVEN_SEG_write+0x54>
    18ec:	2a 8d       	ldd	r18, Y+26	; 0x1a
    18ee:	3b 8d       	ldd	r19, Y+27	; 0x1b
    18f0:	21 30       	cpi	r18, 0x01	; 1
    18f2:	31 05       	cpc	r19, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <SEVEN_SEG_write+0x52>
    18f6:	ed c0       	rjmp	.+474    	; 0x1ad2 <SEVEN_SEG_write+0x22c>
    18f8:	93 c1       	rjmp	.+806    	; 0x1c20 <SEVEN_SEG_write+0x37a>
		case COMMON_ANODE:
			/* get the bit states required to print the number from the global SEVEN_SEG_INPUT array
			 * since the array is made to deal with common cathode configuration,
			 * then, reverse every bit state before writing it to the common anode 7-segment*/

			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[0]), !READ_BIT(SEVEN_SEG_INPUT[number], 0));
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	9b 81       	ldd	r25, Y+3	; 0x03
    18fe:	99 8f       	std	Y+25, r25	; 0x19
    1900:	88 8f       	std	Y+24, r24	; 0x18
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	fc 01       	movw	r30, r24
    190a:	e4 56       	subi	r30, 0x64	; 100
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	90 70       	andi	r25, 0x00	; 0
    1918:	1f 8a       	std	Y+23, r1	; 0x17
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	11 f4       	brne	.+4      	; 0x1922 <SEVEN_SEG_write+0x7c>
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	9f 8b       	std	Y+23, r25	; 0x17
    1922:	88 8d       	ldd	r24, Y+24	; 0x18
    1924:	99 8d       	ldd	r25, Y+25	; 0x19
    1926:	6f 89       	ldd	r22, Y+23	; 0x17
    1928:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    192c:	98 2f       	mov	r25, r24
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	89 23       	and	r24, r25
    1932:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[1]), !READ_BIT(SEVEN_SEG_INPUT[number], 1));
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	9c 01       	movw	r18, r24
    193a:	2f 5f       	subi	r18, 0xFF	; 255
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	3e 8b       	std	Y+22, r19	; 0x16
    1940:	2d 8b       	std	Y+21, r18	; 0x15
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	fc 01       	movw	r30, r24
    194a:	e4 56       	subi	r30, 0x64	; 100
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	86 95       	lsr	r24
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	81 70       	andi	r24, 0x01	; 1
    1958:	90 70       	andi	r25, 0x00	; 0
    195a:	1c 8a       	std	Y+20, r1	; 0x14
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	11 f4       	brne	.+4      	; 0x1964 <SEVEN_SEG_write+0xbe>
    1960:	31 e0       	ldi	r19, 0x01	; 1
    1962:	3c 8b       	std	Y+20, r19	; 0x14
    1964:	8d 89       	ldd	r24, Y+21	; 0x15
    1966:	9e 89       	ldd	r25, Y+22	; 0x16
    1968:	6c 89       	ldd	r22, Y+20	; 0x14
    196a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    196e:	98 2f       	mov	r25, r24
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	89 23       	and	r24, r25
    1974:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), !READ_BIT(SEVEN_SEG_INPUT[number], 2));
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	9c 01       	movw	r18, r24
    197c:	2e 5f       	subi	r18, 0xFE	; 254
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	3b 8b       	std	Y+19, r19	; 0x13
    1982:	2a 8b       	std	Y+18, r18	; 0x12
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	e4 56       	subi	r30, 0x64	; 100
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	86 95       	lsr	r24
    1994:	86 95       	lsr	r24
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	81 70       	andi	r24, 0x01	; 1
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	19 8a       	std	Y+17, r1	; 0x11
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <SEVEN_SEG_write+0x102>
    19a4:	31 e0       	ldi	r19, 0x01	; 1
    19a6:	39 8b       	std	Y+17, r19	; 0x11
    19a8:	8a 89       	ldd	r24, Y+18	; 0x12
    19aa:	9b 89       	ldd	r25, Y+19	; 0x13
    19ac:	69 89       	ldd	r22, Y+17	; 0x11
    19ae:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    19b2:	98 2f       	mov	r25, r24
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	89 23       	and	r24, r25
    19b8:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), !READ_BIT(SEVEN_SEG_INPUT[number], 3));
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	9c 01       	movw	r18, r24
    19c0:	2d 5f       	subi	r18, 0xFD	; 253
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	38 8b       	std	Y+16, r19	; 0x10
    19c6:	2f 87       	std	Y+15, r18	; 0x0f
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	fc 01       	movw	r30, r24
    19d0:	e4 56       	subi	r30, 0x64	; 100
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	86 95       	lsr	r24
    19d8:	86 95       	lsr	r24
    19da:	86 95       	lsr	r24
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	1e 86       	std	Y+14, r1	; 0x0e
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	11 f4       	brne	.+4      	; 0x19ee <SEVEN_SEG_write+0x148>
    19ea:	31 e0       	ldi	r19, 0x01	; 1
    19ec:	3e 87       	std	Y+14, r19	; 0x0e
    19ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f0:	98 89       	ldd	r25, Y+16	; 0x10
    19f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    19f4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    19f8:	98 2f       	mov	r25, r24
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	89 23       	and	r24, r25
    19fe:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[4]), !READ_BIT(SEVEN_SEG_INPUT[number], 4));
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	9b 81       	ldd	r25, Y+3	; 0x03
    1a04:	9c 01       	movw	r18, r24
    1a06:	2c 5f       	subi	r18, 0xFC	; 252
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	3d 87       	std	Y+13, r19	; 0x0d
    1a0c:	2c 87       	std	Y+12, r18	; 0x0c
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	fc 01       	movw	r30, r24
    1a16:	e4 56       	subi	r30, 0x64	; 100
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	82 95       	swap	r24
    1a1e:	8f 70       	andi	r24, 0x0F	; 15
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	81 70       	andi	r24, 0x01	; 1
    1a26:	90 70       	andi	r25, 0x00	; 0
    1a28:	1b 86       	std	Y+11, r1	; 0x0b
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <SEVEN_SEG_write+0x18c>
    1a2e:	31 e0       	ldi	r19, 0x01	; 1
    1a30:	3b 87       	std	Y+11, r19	; 0x0b
    1a32:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a34:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a38:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	89 23       	and	r24, r25
    1a42:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[5]), !READ_BIT(SEVEN_SEG_INPUT[number], 5));
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	9b 81       	ldd	r25, Y+3	; 0x03
    1a48:	9c 01       	movw	r18, r24
    1a4a:	2b 5f       	subi	r18, 0xFB	; 251
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	3a 87       	std	Y+10, r19	; 0x0a
    1a50:	29 87       	std	Y+9, r18	; 0x09
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	fc 01       	movw	r30, r24
    1a5a:	e4 56       	subi	r30, 0x64	; 100
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	82 95       	swap	r24
    1a62:	86 95       	lsr	r24
    1a64:	87 70       	andi	r24, 0x07	; 7
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	18 86       	std	Y+8, r1	; 0x08
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <SEVEN_SEG_write+0x1d2>
    1a74:	31 e0       	ldi	r19, 0x01	; 1
    1a76:	38 87       	std	Y+8, r19	; 0x08
    1a78:	89 85       	ldd	r24, Y+9	; 0x09
    1a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7c:	68 85       	ldd	r22, Y+8	; 0x08
    1a7e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1a82:	98 2f       	mov	r25, r24
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	89 23       	and	r24, r25
    1a88:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[6]), !READ_BIT(SEVEN_SEG_INPUT[number], 6));
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	9c 01       	movw	r18, r24
    1a90:	2a 5f       	subi	r18, 0xFA	; 250
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	3f 83       	std	Y+7, r19	; 0x07
    1a96:	2e 83       	std	Y+6, r18	; 0x06
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e4 56       	subi	r30, 0x64	; 100
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 81       	ld	r24, Z
    1aa6:	82 95       	swap	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	86 95       	lsr	r24
    1aac:	83 70       	andi	r24, 0x03	; 3
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	1d 82       	std	Y+5, r1	; 0x05
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <SEVEN_SEG_write+0x21a>
    1abc:	31 e0       	ldi	r19, 0x01	; 1
    1abe:	3d 83       	std	Y+5, r19	; 0x05
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1aca:	99 81       	ldd	r25, Y+1	; 0x01
    1acc:	89 23       	and	r24, r25
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	a8 c0       	rjmp	.+336    	; 0x1c22 <SEVEN_SEG_write+0x37c>

		case COMMON_CATHODE:
			/* get the bit states required to print the number from the global SEVEN_SEG_INPUT array
			 * write every pin state of array element  on its relevant pin*/

			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[0]), READ_BIT(SEVEN_SEG_INPUT[number], 0));
    1ad2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ad4:	5b 81       	ldd	r21, Y+3	; 0x03
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	fc 01       	movw	r30, r24
    1ade:	e4 56       	subi	r30, 0x64	; 100
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	80 81       	ld	r24, Z
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	21 70       	andi	r18, 0x01	; 1
    1ae8:	ca 01       	movw	r24, r20
    1aea:	62 2f       	mov	r22, r18
    1aec:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1af0:	98 2f       	mov	r25, r24
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	89 23       	and	r24, r25
    1af6:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[1]), READ_BIT(SEVEN_SEG_INPUT[number], 1));
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	ac 01       	movw	r20, r24
    1afe:	4f 5f       	subi	r20, 0xFF	; 255
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e4 56       	subi	r30, 0x64	; 100
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	86 95       	lsr	r24
    1b12:	28 2f       	mov	r18, r24
    1b14:	21 70       	andi	r18, 0x01	; 1
    1b16:	ca 01       	movw	r24, r20
    1b18:	62 2f       	mov	r22, r18
    1b1a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1b1e:	98 2f       	mov	r25, r24
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	89 23       	and	r24, r25
    1b24:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), READ_BIT(SEVEN_SEG_INPUT[number], 2));
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	4e 5f       	subi	r20, 0xFE	; 254
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	fc 01       	movw	r30, r24
    1b38:	e4 56       	subi	r30, 0x64	; 100
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	86 95       	lsr	r24
    1b40:	86 95       	lsr	r24
    1b42:	28 2f       	mov	r18, r24
    1b44:	21 70       	andi	r18, 0x01	; 1
    1b46:	ca 01       	movw	r24, r20
    1b48:	62 2f       	mov	r22, r18
    1b4a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1b4e:	98 2f       	mov	r25, r24
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	89 23       	and	r24, r25
    1b54:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), READ_BIT(SEVEN_SEG_INPUT[number], 3));
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	4d 5f       	subi	r20, 0xFD	; 253
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	fc 01       	movw	r30, r24
    1b68:	e4 56       	subi	r30, 0x64	; 100
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	86 95       	lsr	r24
    1b70:	86 95       	lsr	r24
    1b72:	86 95       	lsr	r24
    1b74:	28 2f       	mov	r18, r24
    1b76:	21 70       	andi	r18, 0x01	; 1
    1b78:	ca 01       	movw	r24, r20
    1b7a:	62 2f       	mov	r22, r18
    1b7c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1b80:	98 2f       	mov	r25, r24
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	89 23       	and	r24, r25
    1b86:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[4]), READ_BIT(SEVEN_SEG_INPUT[number], 4));
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	ac 01       	movw	r20, r24
    1b8e:	4c 5f       	subi	r20, 0xFC	; 252
    1b90:	5f 4f       	sbci	r21, 0xFF	; 255
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e4 56       	subi	r30, 0x64	; 100
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	82 95       	swap	r24
    1ba2:	8f 70       	andi	r24, 0x0F	; 15
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	21 70       	andi	r18, 0x01	; 1
    1ba8:	ca 01       	movw	r24, r20
    1baa:	62 2f       	mov	r22, r18
    1bac:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	89 23       	and	r24, r25
    1bb6:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[5]), READ_BIT(SEVEN_SEG_INPUT[number], 5));
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	ac 01       	movw	r20, r24
    1bbe:	4b 5f       	subi	r20, 0xFB	; 251
    1bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e4 56       	subi	r30, 0x64	; 100
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	82 95       	swap	r24
    1bd2:	86 95       	lsr	r24
    1bd4:	87 70       	andi	r24, 0x07	; 7
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	21 70       	andi	r18, 0x01	; 1
    1bda:	ca 01       	movw	r24, r20
    1bdc:	62 2f       	mov	r22, r18
    1bde:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1be2:	98 2f       	mov	r25, r24
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	89 23       	and	r24, r25
    1be8:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[6]), READ_BIT(SEVEN_SEG_INPUT[number], 6));
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	ac 01       	movw	r20, r24
    1bf0:	4a 5f       	subi	r20, 0xFA	; 250
    1bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	e4 56       	subi	r30, 0x64	; 100
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	82 95       	swap	r24
    1c04:	86 95       	lsr	r24
    1c06:	86 95       	lsr	r24
    1c08:	83 70       	andi	r24, 0x03	; 3
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	21 70       	andi	r18, 0x01	; 1
    1c0e:	ca 01       	movw	r24, r20
    1c10:	62 2f       	mov	r22, r18
    1c12:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1c16:	98 2f       	mov	r25, r24
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	89 23       	and	r24, r25
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <SEVEN_SEG_write+0x37c>
			break;

		default:
			error_status = E_NOT_OK;
    1c20:	19 82       	std	Y+1, r1	; 0x01
		}
#endif
	}


	return error_status;
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c24:	6b 96       	adiw	r28, 0x1b	; 27
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <LED_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_init(const led_t *led)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <LED_init+0x6>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <LED_init+0x8>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	11 f4       	brne	.+4      	; 0x1c56 <LED_init+0x20>
	{
		error_status = E_NOT_OK;
    1c52:	19 82       	std	Y+1, r1	; 0x01
    1c54:	36 c0       	rjmp	.+108    	; 0x1cc2 <LED_init+0x8c>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id,
				.direction = GPIO_OUTPUT, .logic = led->led_initial_state};
    1c56:	eb 81       	ldd	r30, Y+3	; 0x03
    1c58:	fc 81       	ldd	r31, Y+4	; 0x04
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	23 70       	andi	r18, 0x03	; 3
    1c60:	eb 81       	ldd	r30, Y+3	; 0x03
    1c62:	fc 81       	ldd	r31, Y+4	; 0x04
    1c64:	80 81       	ld	r24, Z
    1c66:	98 2f       	mov	r25, r24
    1c68:	96 95       	lsr	r25
    1c6a:	96 95       	lsr	r25
    1c6c:	97 70       	andi	r25, 0x07	; 7
    1c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c70:	fc 81       	ldd	r31, Y+4	; 0x04
    1c72:	80 81       	ld	r24, Z
    1c74:	38 2f       	mov	r19, r24
    1c76:	32 95       	swap	r19
    1c78:	36 95       	lsr	r19
    1c7a:	37 70       	andi	r19, 0x07	; 7
    1c7c:	31 70       	andi	r19, 0x01	; 1
    1c7e:	1a 82       	std	Y+2, r1	; 0x02
    1c80:	23 70       	andi	r18, 0x03	; 3
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	8c 7f       	andi	r24, 0xFC	; 252
    1c86:	82 2b       	or	r24, r18
    1c88:	8a 83       	std	Y+2, r24	; 0x02
    1c8a:	89 2f       	mov	r24, r25
    1c8c:	87 70       	andi	r24, 0x07	; 7
    1c8e:	98 2f       	mov	r25, r24
    1c90:	99 0f       	add	r25, r25
    1c92:	99 0f       	add	r25, r25
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	83 7e       	andi	r24, 0xE3	; 227
    1c98:	89 2b       	or	r24, r25
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	80 62       	ori	r24, 0x20	; 32
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
    1ca2:	83 2f       	mov	r24, r19
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	92 95       	swap	r25
    1caa:	99 0f       	add	r25, r25
    1cac:	99 0f       	add	r25, r25
    1cae:	90 7c       	andi	r25, 0xC0	; 192
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	8f 7b       	andi	r24, 0xBF	; 191
    1cb4:	89 2b       	or	r24, r25
    1cb6:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&led_pin);
    1cb8:	ce 01       	movw	r24, r28
    1cba:	02 96       	adiw	r24, 0x02	; 2
    1cbc:	0e 94 7e 07 	call	0xefc	; 0xefc <GPIO_pinInit>
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <LED_on>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_on(const led_t *led)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <LED_on+0x6>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <LED_on+0x8>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	11 f4       	brne	.+4      	; 0x1cf2 <LED_on+0x20>
	{
		error_status = E_NOT_OK;
    1cee:	19 82       	std	Y+1, r1	; 0x01
    1cf0:	21 c0       	rjmp	.+66     	; 0x1d34 <LED_on+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf6:	80 81       	ld	r24, Z
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	23 70       	andi	r18, 0x03	; 3
    1cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1d00:	80 81       	ld	r24, Z
    1d02:	98 2f       	mov	r25, r24
    1d04:	96 95       	lsr	r25
    1d06:	96 95       	lsr	r25
    1d08:	97 70       	andi	r25, 0x07	; 7
    1d0a:	1a 82       	std	Y+2, r1	; 0x02
    1d0c:	23 70       	andi	r18, 0x03	; 3
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	8c 7f       	andi	r24, 0xFC	; 252
    1d12:	82 2b       	or	r24, r18
    1d14:	8a 83       	std	Y+2, r24	; 0x02
    1d16:	89 2f       	mov	r24, r25
    1d18:	87 70       	andi	r24, 0x07	; 7
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	99 0f       	add	r25, r25
    1d1e:	99 0f       	add	r25, r25
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	83 7e       	andi	r24, 0xE3	; 227
    1d24:	89 2b       	or	r24, r25
    1d26:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_HIGH);
    1d28:	ce 01       	movw	r24, r28
    1d2a:	02 96       	adiw	r24, 0x02	; 2
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1d32:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <LED_off>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_off(const led_t *led)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <LED_off+0x6>
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <LED_off+0x8>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <LED_off+0x20>
	{
		error_status = E_NOT_OK;
    1d60:	19 82       	std	Y+1, r1	; 0x01
    1d62:	21 c0       	rjmp	.+66     	; 0x1da6 <LED_off+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1d64:	eb 81       	ldd	r30, Y+3	; 0x03
    1d66:	fc 81       	ldd	r31, Y+4	; 0x04
    1d68:	80 81       	ld	r24, Z
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	23 70       	andi	r18, 0x03	; 3
    1d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d70:	fc 81       	ldd	r31, Y+4	; 0x04
    1d72:	80 81       	ld	r24, Z
    1d74:	98 2f       	mov	r25, r24
    1d76:	96 95       	lsr	r25
    1d78:	96 95       	lsr	r25
    1d7a:	97 70       	andi	r25, 0x07	; 7
    1d7c:	1a 82       	std	Y+2, r1	; 0x02
    1d7e:	23 70       	andi	r18, 0x03	; 3
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	8c 7f       	andi	r24, 0xFC	; 252
    1d84:	82 2b       	or	r24, r18
    1d86:	8a 83       	std	Y+2, r24	; 0x02
    1d88:	89 2f       	mov	r24, r25
    1d8a:	87 70       	andi	r24, 0x07	; 7
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	99 0f       	add	r25, r25
    1d90:	99 0f       	add	r25, r25
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	83 7e       	andi	r24, 0xE3	; 227
    1d96:	89 2b       	or	r24, r25
    1d98:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_LOW);
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	02 96       	adiw	r24, 0x02	; 2
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    1da4:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <LED_toggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_toggle(const led_t *led)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <LED_toggle+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <LED_toggle+0x8>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	9c 83       	std	Y+4, r25	; 0x04
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <LED_toggle+0x20>
	{
		error_status = E_NOT_OK;
    1dd2:	19 82       	std	Y+1, r1	; 0x01
    1dd4:	20 c0       	rjmp	.+64     	; 0x1e16 <LED_toggle+0x60>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dda:	80 81       	ld	r24, Z
    1ddc:	28 2f       	mov	r18, r24
    1dde:	23 70       	andi	r18, 0x03	; 3
    1de0:	eb 81       	ldd	r30, Y+3	; 0x03
    1de2:	fc 81       	ldd	r31, Y+4	; 0x04
    1de4:	80 81       	ld	r24, Z
    1de6:	98 2f       	mov	r25, r24
    1de8:	96 95       	lsr	r25
    1dea:	96 95       	lsr	r25
    1dec:	97 70       	andi	r25, 0x07	; 7
    1dee:	1a 82       	std	Y+2, r1	; 0x02
    1df0:	23 70       	andi	r18, 0x03	; 3
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	8c 7f       	andi	r24, 0xFC	; 252
    1df6:	82 2b       	or	r24, r18
    1df8:	8a 83       	std	Y+2, r24	; 0x02
    1dfa:	89 2f       	mov	r24, r25
    1dfc:	87 70       	andi	r24, 0x07	; 7
    1dfe:	98 2f       	mov	r25, r24
    1e00:	99 0f       	add	r25, r25
    1e02:	99 0f       	add	r25, r25
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	83 7e       	andi	r24, 0xE3	; 227
    1e08:	89 2b       	or	r24, r25
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinToggle(&led_pin);
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	02 96       	adiw	r24, 0x02	; 2
    1e10:	0e 94 1c 0a 	call	0x1438	; 0x1438 <GPIO_pinToggle>
    1e14:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LCD_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_init(const lcd_t *lcd)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	e8 97       	sbiw	r28, 0x38	; 56
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	98 af       	std	Y+56, r25	; 0x38
    1e3c:	8f ab       	std	Y+55, r24	; 0x37
	STD_ReturnType error_status = E_OK;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	8e ab       	std	Y+54, r24	; 0x36
	if(NULL == lcd)
    1e42:	8f a9       	ldd	r24, Y+55	; 0x37
    1e44:	98 ad       	ldd	r25, Y+56	; 0x38
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	11 f4       	brne	.+4      	; 0x1e4e <LCD_init+0x28>
	{
		error_status = E_NOT_OK;
    1e4a:	1e aa       	std	Y+54, r1	; 0x36
    1e4c:	13 c2       	rjmp	.+1062   	; 0x2274 <LCD_init+0x44e>
	}
	else
	{
		uint8 data_pin_counter = 0; /* To loop through data pins */
    1e4e:	1d aa       	std	Y+53, r1	; 0x35
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
    1e50:	8f a9       	ldd	r24, Y+55	; 0x37
    1e52:	98 ad       	ldd	r25, Y+56	; 0x38
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_pinDirectionInit>
    1e5a:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */
    1e5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_pinDirectionInit>
    1e68:	98 2f       	mov	r25, r24
    1e6a:	8e a9       	ldd	r24, Y+54	; 0x36
    1e6c:	89 23       	and	r24, r25
    1e6e:	8e ab       	std	Y+54, r24	; 0x36
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <LCD_init+0x74>

		/* make data pins output pins */
		for(; data_pin_counter < LCD_DATA_BITS_MODE; data_pin_counter++) 
		{
			error_status &= GPIO_pinDirectionInit(&(lcd->data_pin[data_pin_counter]), GPIO_OUTPUT);
    1e72:	8f a9       	ldd	r24, Y+55	; 0x37
    1e74:	98 ad       	ldd	r25, Y+56	; 0x38
    1e76:	9c 01       	movw	r18, r24
    1e78:	2e 5f       	subi	r18, 0xFE	; 254
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	8d a9       	ldd	r24, Y+53	; 0x35
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	82 0f       	add	r24, r18
    1e84:	93 1f       	adc	r25, r19
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_pinDirectionInit>
    1e8c:	98 2f       	mov	r25, r24
    1e8e:	8e a9       	ldd	r24, Y+54	; 0x36
    1e90:	89 23       	and	r24, r25
    1e92:	8e ab       	std	Y+54, r24	; 0x36
		uint8 data_pin_counter = 0; /* To loop through data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */

		/* make data pins output pins */
		for(; data_pin_counter < LCD_DATA_BITS_MODE; data_pin_counter++) 
    1e94:	8d a9       	ldd	r24, Y+53	; 0x35
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	8d ab       	std	Y+53, r24	; 0x35
    1e9a:	8d a9       	ldd	r24, Y+53	; 0x35
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	48 f3       	brcs	.-46     	; 0x1e72 <LCD_init+0x4c>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ea6:	b1 e4       	ldi	r27, 0x41	; 65
    1ea8:	89 ab       	std	Y+49, r24	; 0x31
    1eaa:	9a ab       	std	Y+50, r25	; 0x32
    1eac:	ab ab       	std	Y+51, r26	; 0x33
    1eae:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a e7       	ldi	r20, 0x7A	; 122
    1ebe:	55 e4       	ldi	r21, 0x45	; 69
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8d a7       	std	Y+45, r24	; 0x2d
    1eca:	9e a7       	std	Y+46, r25	; 0x2e
    1ecc:	af a7       	std	Y+47, r26	; 0x2f
    1ece:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1ed0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ed2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_init+0xcc>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c a7       	std	Y+44, r25	; 0x2c
    1eee:	8b a7       	std	Y+43, r24	; 0x2b
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <LCD_init+0x14a>
	else if (__tmp > 65535)
    1ef2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ef4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef8:	98 a9       	ldd	r25, Y+48	; 0x30
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <LCD_init+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f10:	9c a9       	ldd	r25, Y+52	; 0x34
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c a7       	std	Y+44, r25	; 0x2c
    1f30:	8b a7       	std	Y+43, r24	; 0x2b
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_init+0x12c>
    1f34:	80 e9       	ldi	r24, 0x90	; 144
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	9a a7       	std	Y+42, r25	; 0x2a
    1f3a:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_init+0x11a>
    1f44:	9a a7       	std	Y+42, r25	; 0x2a
    1f46:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9c a7       	std	Y+44, r25	; 0x2c
    1f50:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <LCD_init+0x10e>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <LCD_init+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9c a7       	std	Y+44, r25	; 0x2c
    1f6e:	8b a7       	std	Y+43, r24	; 0x2b
    1f70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f74:	98 a7       	std	Y+40, r25	; 0x28
    1f76:	8f a3       	std	Y+39, r24	; 0x27
    1f78:	8f a1       	ldd	r24, Y+39	; 0x27
    1f7a:	98 a5       	ldd	r25, Y+40	; 0x28
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_init+0x156>
    1f80:	98 a7       	std	Y+40, r25	; 0x28
    1f82:	8f a3       	std	Y+39, r24	; 0x27
		/* generate a delay of 20 msec at  startup*/
		_delay_ms(20);

#if LCD_DATA_BITS_MODE == 4
		/* send 4-bit initialization sequence */
		error_status &= LCD_sendCommand(lcd, _LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f84:	8f a9       	ldd	r24, Y+55	; 0x37
    1f86:	98 ad       	ldd	r25, Y+56	; 0x38
    1f88:	63 e3       	ldi	r22, 0x33	; 51
    1f8a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    1f8e:	98 2f       	mov	r25, r24
    1f90:	8e a9       	ldd	r24, Y+54	; 0x36
    1f92:	89 23       	and	r24, r25
    1f94:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_sendCommand(lcd, _LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f96:	8f a9       	ldd	r24, Y+55	; 0x37
    1f98:	98 ad       	ldd	r25, Y+56	; 0x38
    1f9a:	62 e3       	ldi	r22, 0x32	; 50
    1f9c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	8e a9       	ldd	r24, Y+54	; 0x36
    1fa4:	89 23       	and	r24, r25
    1fa6:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE); /* set 4 bit mode 2 line */
    1fa8:	8f a9       	ldd	r24, Y+55	; 0x37
    1faa:	98 ad       	ldd	r25, Y+56	; 0x38
    1fac:	68 e2       	ldi	r22, 0x28	; 40
    1fae:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    1fb2:	98 2f       	mov	r25, r24
    1fb4:	8e a9       	ldd	r24, Y+54	; 0x36
    1fb6:	89 23       	and	r24, r25
    1fb8:	8e ab       	std	Y+54, r24	; 0x36
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc0:	b0 e4       	ldi	r27, 0x40	; 64
    1fc2:	8b a3       	std	Y+35, r24	; 0x23
    1fc4:	9c a3       	std	Y+36, r25	; 0x24
    1fc6:	ad a3       	std	Y+37, r26	; 0x25
    1fc8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	6b a1       	ldd	r22, Y+35	; 0x23
    1fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fce:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a e7       	ldi	r20, 0x7A	; 122
    1fd8:	55 e4       	ldi	r21, 0x45	; 69
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe4:	98 a3       	std	Y+32, r25	; 0x20
    1fe6:	a9 a3       	std	Y+33, r26	; 0x21
    1fe8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1fea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fec:	78 a1       	ldd	r23, Y+32	; 0x20
    1fee:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <LCD_init+0x1e6>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9e 8f       	std	Y+30, r25	; 0x1e
    2008:	8d 8f       	std	Y+29, r24	; 0x1d
    200a:	3f c0       	rjmp	.+126    	; 0x208a <LCD_init+0x264>
	else if (__tmp > 65535)
    200c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    200e:	78 a1       	ldd	r23, Y+32	; 0x20
    2010:	89 a1       	ldd	r24, Y+33	; 0x21
    2012:	9a a1       	ldd	r25, Y+34	; 0x22
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <LCD_init+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	6b a1       	ldd	r22, Y+35	; 0x23
    2026:	7c a1       	ldd	r23, Y+36	; 0x24
    2028:	8d a1       	ldd	r24, Y+37	; 0x25
    202a:	9e a1       	ldd	r25, Y+38	; 0x26
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9e 8f       	std	Y+30, r25	; 0x1e
    204a:	8d 8f       	std	Y+29, r24	; 0x1d
    204c:	0f c0       	rjmp	.+30     	; 0x206c <LCD_init+0x246>
    204e:	80 e9       	ldi	r24, 0x90	; 144
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	9c 8f       	std	Y+28, r25	; 0x1c
    2054:	8b 8f       	std	Y+27, r24	; 0x1b
    2056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_init+0x234>
    205e:	9c 8f       	std	Y+28, r25	; 0x1c
    2060:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2064:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9e 8f       	std	Y+30, r25	; 0x1e
    206a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <LCD_init+0x228>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <LCD_init+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2078:	78 a1       	ldd	r23, Y+32	; 0x20
    207a:	89 a1       	ldd	r24, Y+33	; 0x21
    207c:	9a a1       	ldd	r25, Y+34	; 0x22
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
    208a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208e:	9a 8f       	std	Y+26, r25	; 0x1a
    2090:	89 8f       	std	Y+25, r24	; 0x19
    2092:	89 8d       	ldd	r24, Y+25	; 0x19
    2094:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_init+0x270>
    209a:	9a 8f       	std	Y+26, r25	; 0x1a
    209c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		error_status &= LCD_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    209e:	8f a9       	ldd	r24, Y+55	; 0x37
    20a0:	98 ad       	ldd	r25, Y+56	; 0x38
    20a2:	68 e2       	ldi	r22, 0x28	; 40
    20a4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    20a8:	98 2f       	mov	r25, r24
    20aa:	8e a9       	ldd	r24, Y+54	; 0x36
    20ac:	89 23       	and	r24, r25
    20ae:	8e ab       	std	Y+54, r24	; 0x36
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a6 e1       	ldi	r26, 0x16	; 22
    20b6:	b3 e4       	ldi	r27, 0x43	; 67
    20b8:	8d 8b       	std	Y+21, r24	; 0x15
    20ba:	9e 8b       	std	Y+22, r25	; 0x16
    20bc:	af 8b       	std	Y+23, r26	; 0x17
    20be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	2b ea       	ldi	r18, 0xAB	; 171
    20ca:	3a ea       	ldi	r19, 0xAA	; 170
    20cc:	4a ea       	ldi	r20, 0xAA	; 170
    20ce:	50 e4       	ldi	r21, 0x40	; 64
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	89 8b       	std	Y+17, r24	; 0x11
    20da:	9a 8b       	std	Y+18, r25	; 0x12
    20dc:	ab 8b       	std	Y+19, r26	; 0x13
    20de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20e0:	69 89       	ldd	r22, Y+17	; 0x11
    20e2:	7a 89       	ldd	r23, Y+18	; 0x12
    20e4:	8b 89       	ldd	r24, Y+19	; 0x13
    20e6:	9c 89       	ldd	r25, Y+20	; 0x14
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	1c f4       	brge	.+6      	; 0x20fe <LCD_init+0x2d8>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	88 8b       	std	Y+16, r24	; 0x10
    20fc:	91 c0       	rjmp	.+290    	; 0x2220 <LCD_init+0x3fa>
	else if (__tmp > 255)
    20fe:	69 89       	ldd	r22, Y+17	; 0x11
    2100:	7a 89       	ldd	r23, Y+18	; 0x12
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	53 e4       	ldi	r21, 0x43	; 67
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	0c f0       	brlt	.+2      	; 0x2118 <LCD_init+0x2f2>
    2116:	7b c0       	rjmp	.+246    	; 0x220e <LCD_init+0x3e8>
	{
		_delay_ms(__us / 1000.0);
    2118:	6d 89       	ldd	r22, Y+21	; 0x15
    211a:	7e 89       	ldd	r23, Y+22	; 0x16
    211c:	8f 89       	ldd	r24, Y+23	; 0x17
    211e:	98 8d       	ldd	r25, Y+24	; 0x18
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a e7       	ldi	r20, 0x7A	; 122
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8c 87       	std	Y+12, r24	; 0x0c
    2132:	9d 87       	std	Y+13, r25	; 0x0d
    2134:	ae 87       	std	Y+14, r26	; 0x0e
    2136:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6c 85       	ldd	r22, Y+12	; 0x0c
    213a:	7d 85       	ldd	r23, Y+13	; 0x0d
    213c:	8e 85       	ldd	r24, Y+14	; 0x0e
    213e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a e7       	ldi	r20, 0x7A	; 122
    2146:	55 e4       	ldi	r21, 0x45	; 69
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	88 87       	std	Y+8, r24	; 0x08
    2152:	99 87       	std	Y+9, r25	; 0x09
    2154:	aa 87       	std	Y+10, r26	; 0x0a
    2156:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2158:	68 85       	ldd	r22, Y+8	; 0x08
    215a:	79 85       	ldd	r23, Y+9	; 0x09
    215c:	8a 85       	ldd	r24, Y+10	; 0x0a
    215e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <LCD_init+0x354>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9f 83       	std	Y+7, r25	; 0x07
    2176:	8e 83       	std	Y+6, r24	; 0x06
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <LCD_init+0x3d2>
	else if (__tmp > 65535)
    217a:	68 85       	ldd	r22, Y+8	; 0x08
    217c:	79 85       	ldd	r23, Y+9	; 0x09
    217e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2180:	9b 85       	ldd	r25, Y+11	; 0x0b
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <LCD_init+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6c 85       	ldd	r22, Y+12	; 0x0c
    2194:	7d 85       	ldd	r23, Y+13	; 0x0d
    2196:	8e 85       	ldd	r24, Y+14	; 0x0e
    2198:	9f 85       	ldd	r25, Y+15	; 0x0f
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9f 83       	std	Y+7, r25	; 0x07
    21b8:	8e 83       	std	Y+6, r24	; 0x06
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <LCD_init+0x3b4>
    21bc:	80 e9       	ldi	r24, 0x90	; 144
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	9d 83       	std	Y+5, r25	; 0x05
    21c2:	8c 83       	std	Y+4, r24	; 0x04
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	9d 81       	ldd	r25, Y+5	; 0x05
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_init+0x3a2>
    21cc:	9d 83       	std	Y+5, r25	; 0x05
    21ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8e 81       	ldd	r24, Y+6	; 0x06
    21d2:	9f 81       	ldd	r25, Y+7	; 0x07
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9f 83       	std	Y+7, r25	; 0x07
    21d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8e 81       	ldd	r24, Y+6	; 0x06
    21dc:	9f 81       	ldd	r25, Y+7	; 0x07
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <LCD_init+0x396>
    21e2:	24 c0       	rjmp	.+72     	; 0x222c <LCD_init+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	68 85       	ldd	r22, Y+8	; 0x08
    21e6:	79 85       	ldd	r23, Y+9	; 0x09
    21e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9f 83       	std	Y+7, r25	; 0x07
    21f6:	8e 83       	std	Y+6, r24	; 0x06
    21f8:	8e 81       	ldd	r24, Y+6	; 0x06
    21fa:	9f 81       	ldd	r25, Y+7	; 0x07
    21fc:	9b 83       	std	Y+3, r25	; 0x03
    21fe:	8a 83       	std	Y+2, r24	; 0x02
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	9b 81       	ldd	r25, Y+3	; 0x03
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_init+0x3de>
    2208:	9b 83       	std	Y+3, r25	; 0x03
    220a:	8a 83       	std	Y+2, r24	; 0x02
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_init+0x406>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    220e:	69 89       	ldd	r22, Y+17	; 0x11
    2210:	7a 89       	ldd	r23, Y+18	; 0x12
    2212:	8b 89       	ldd	r24, Y+19	; 0x13
    2214:	9c 89       	ldd	r25, Y+20	; 0x14
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	88 8b       	std	Y+16, r24	; 0x10
    2220:	88 89       	ldd	r24, Y+16	; 0x10
    2222:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	8a 95       	dec	r24
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_init+0x400>
    222a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		error_status &= LCD_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    222c:	8f a9       	ldd	r24, Y+55	; 0x37
    222e:	98 ad       	ldd	r25, Y+56	; 0x38
    2230:	68 e2       	ldi	r22, 0x28	; 40
    2232:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    2236:	98 2f       	mov	r25, r24
    2238:	8e a9       	ldd	r24, Y+54	; 0x36
    223a:	89 23       	and	r24, r25
    223c:	8e ab       	std	Y+54, r24	; 0x36


#else
		error_status = E_NOT_OK;
#endif
		error_status &= LCD_sendCommand(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
    223e:	8f a9       	ldd	r24, Y+55	; 0x37
    2240:	98 ad       	ldd	r25, Y+56	; 0x38
    2242:	6c e0       	ldi	r22, 0x0C	; 12
    2244:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    2248:	98 2f       	mov	r25, r24
    224a:	8e a9       	ldd	r24, Y+54	; 0x36
    224c:	89 23       	and	r24, r25
    224e:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_sendCommand(lcd, _LCD_ENTRY_MODE);
    2250:	8f a9       	ldd	r24, Y+55	; 0x37
    2252:	98 ad       	ldd	r25, Y+56	; 0x38
    2254:	66 e0       	ldi	r22, 0x06	; 6
    2256:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    225a:	98 2f       	mov	r25, r24
    225c:	8e a9       	ldd	r24, Y+54	; 0x36
    225e:	89 23       	and	r24, r25
    2260:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_sendCommand(lcd, _LCD_CLEAR);
    2262:	8f a9       	ldd	r24, Y+55	; 0x37
    2264:	98 ad       	ldd	r25, Y+56	; 0x38
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    226c:	98 2f       	mov	r25, r24
    226e:	8e a9       	ldd	r24, Y+54	; 0x36
    2270:	89 23       	and	r24, r25
    2272:	8e ab       	std	Y+54, r24	; 0x36

	}
	return error_status;
    2274:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2276:	e8 96       	adiw	r28, 0x38	; 56
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <LCD_clear>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_clear(const lcd_t *lcd)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <LCD_clear+0x6>
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	9b 83       	std	Y+3, r25	; 0x03
    2296:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	11 f4       	brne	.+4      	; 0x22a8 <LCD_clear+0x20>
	{
		error_status = E_NOT_OK;
    22a4:	19 82       	std	Y+1, r1	; 0x01
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <LCD_clear+0x2a>
	}
	else
	{
		LCD_sendCommand(lcd, _LCD_CLEAR);
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	9b 81       	ldd	r25, Y+3	; 0x03
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
	}
	return error_status;
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <LCD_sendCommand>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_sendCommand(const lcd_t *lcd, uint8 command)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	62 97       	sbiw	r28, 0x12	; 18
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	99 8b       	std	Y+17, r25	; 0x11
    22d6:	88 8b       	std	Y+16, r24	; 0x10
    22d8:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    22de:	88 89       	ldd	r24, Y+16	; 0x10
    22e0:	99 89       	ldd	r25, Y+17	; 0x11
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	11 f4       	brne	.+4      	; 0x22ea <LCD_sendCommand+0x2a>
	{
		error_status = E_NOT_OK;
    22e6:	1f 86       	std	Y+15, r1	; 0x0f
    22e8:	a1 c0       	rjmp	.+322    	; 0x242c <LCD_sendCommand+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
    22ea:	88 89       	ldd	r24, Y+16	; 0x10
    22ec:	99 89       	ldd	r25, Y+17	; 0x11
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    22f4:	98 2f       	mov	r25, r24
    22f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f8:	89 23       	and	r24, r25
    22fa:	8f 87       	std	Y+15, r24	; 0x0f

#if LCD_DATA_BITS_MODE == 4
		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (command >> 4));	/* Send the higher command nibble first */
    22fc:	8a 89       	ldd	r24, Y+18	; 0x12
    22fe:	28 2f       	mov	r18, r24
    2300:	22 95       	swap	r18
    2302:	2f 70       	andi	r18, 0x0F	; 15
    2304:	88 89       	ldd	r24, Y+16	; 0x10
    2306:	99 89       	ldd	r25, Y+17	; 0x11
    2308:	62 2f       	mov	r22, r18
    230a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <LCD_send4Bits>
    230e:	98 2f       	mov	r25, r24
    2310:	8f 85       	ldd	r24, Y+15	; 0x0f
    2312:	89 23       	and	r24, r25
    2314:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2316:	88 89       	ldd	r24, Y+16	; 0x10
    2318:	99 89       	ldd	r25, Y+17	; 0x11
    231a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_genEnablePulse>
    231e:	98 2f       	mov	r25, r24
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	89 23       	and	r24, r25
    2324:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, command);			/* Send the lower command nibble */
    2326:	88 89       	ldd	r24, Y+16	; 0x10
    2328:	99 89       	ldd	r25, Y+17	; 0x11
    232a:	6a 89       	ldd	r22, Y+18	; 0x12
    232c:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <LCD_send4Bits>
    2330:	98 2f       	mov	r25, r24
    2332:	8f 85       	ldd	r24, Y+15	; 0x0f
    2334:	89 23       	and	r24, r25
    2336:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2338:	88 89       	ldd	r24, Y+16	; 0x10
    233a:	99 89       	ldd	r25, Y+17	; 0x11
    233c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_genEnablePulse>
    2340:	98 2f       	mov	r25, r24
    2342:	8f 85       	ldd	r24, Y+15	; 0x0f
    2344:	89 23       	and	r24, r25
    2346:	8f 87       	std	Y+15, r24	; 0x0f
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e0       	ldi	r26, 0x00	; 0
    234e:	b0 e4       	ldi	r27, 0x40	; 64
    2350:	8b 87       	std	Y+11, r24	; 0x0b
    2352:	9c 87       	std	Y+12, r25	; 0x0c
    2354:	ad 87       	std	Y+13, r26	; 0x0d
    2356:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6b 85       	ldd	r22, Y+11	; 0x0b
    235a:	7c 85       	ldd	r23, Y+12	; 0x0c
    235c:	8d 85       	ldd	r24, Y+13	; 0x0d
    235e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a e7       	ldi	r20, 0x7A	; 122
    2366:	55 e4       	ldi	r21, 0x45	; 69
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8f 83       	std	Y+7, r24	; 0x07
    2372:	98 87       	std	Y+8, r25	; 0x08
    2374:	a9 87       	std	Y+9, r26	; 0x09
    2376:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2378:	6f 81       	ldd	r22, Y+7	; 0x07
    237a:	78 85       	ldd	r23, Y+8	; 0x08
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <LCD_sendCommand+0xda>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <LCD_sendCommand+0x158>
	else if (__tmp > 65535)
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_sendCommand+0x13a>
    23dc:	80 e9       	ldi	r24, 0x90	; 144
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_sendCommand+0x128>
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_sendCommand+0x11c>
    2402:	14 c0       	rjmp	.+40     	; 0x242c <LCD_sendCommand+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	9a 83       	std	Y+2, r25	; 0x02
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_sendCommand+0x164>
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
#else
		error_status = E_NOT_OK;
#endif
		_delay_ms(2);
	}
	return error_status;
    242c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    242e:	62 96       	adiw	r28, 0x12	; 18
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_sendChar>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_sendChar(const lcd_t *lcd, uint8 _char)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	62 97       	sbiw	r28, 0x12	; 18
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	99 8b       	std	Y+17, r25	; 0x11
    2456:	88 8b       	std	Y+16, r24	; 0x10
    2458:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    245e:	88 89       	ldd	r24, Y+16	; 0x10
    2460:	99 89       	ldd	r25, Y+17	; 0x11
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	11 f4       	brne	.+4      	; 0x246a <LCD_sendChar+0x2a>
	{
		error_status = E_NOT_OK;
    2466:	1f 86       	std	Y+15, r1	; 0x0f
    2468:	a1 c0       	rjmp	.+322    	; 0x25ac <LCD_sendChar+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    246a:	88 89       	ldd	r24, Y+16	; 0x10
    246c:	99 89       	ldd	r25, Y+17	; 0x11
    246e:	61 e0       	ldi	r22, 0x01	; 1
    2470:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2474:	98 2f       	mov	r25, r24
    2476:	8f 85       	ldd	r24, Y+15	; 0x0f
    2478:	89 23       	and	r24, r25
    247a:	8f 87       	std	Y+15, r24	; 0x0f

#if LCD_DATA_BITS_MODE == 4
		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    247c:	8a 89       	ldd	r24, Y+18	; 0x12
    247e:	28 2f       	mov	r18, r24
    2480:	22 95       	swap	r18
    2482:	2f 70       	andi	r18, 0x0F	; 15
    2484:	88 89       	ldd	r24, Y+16	; 0x10
    2486:	99 89       	ldd	r25, Y+17	; 0x11
    2488:	62 2f       	mov	r22, r18
    248a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <LCD_send4Bits>
    248e:	98 2f       	mov	r25, r24
    2490:	8f 85       	ldd	r24, Y+15	; 0x0f
    2492:	89 23       	and	r24, r25
    2494:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2496:	88 89       	ldd	r24, Y+16	; 0x10
    2498:	99 89       	ldd	r25, Y+17	; 0x11
    249a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_genEnablePulse>
    249e:	98 2f       	mov	r25, r24
    24a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a2:	89 23       	and	r24, r25
    24a4:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    24a6:	88 89       	ldd	r24, Y+16	; 0x10
    24a8:	99 89       	ldd	r25, Y+17	; 0x11
    24aa:	6a 89       	ldd	r22, Y+18	; 0x12
    24ac:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <LCD_send4Bits>
    24b0:	98 2f       	mov	r25, r24
    24b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b4:	89 23       	and	r24, r25
    24b6:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    24b8:	88 89       	ldd	r24, Y+16	; 0x10
    24ba:	99 89       	ldd	r25, Y+17	; 0x11
    24bc:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_genEnablePulse>
    24c0:	98 2f       	mov	r25, r24
    24c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c4:	89 23       	and	r24, r25
    24c6:	8f 87       	std	Y+15, r24	; 0x0f
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	b0 e4       	ldi	r27, 0x40	; 64
    24d0:	8b 87       	std	Y+11, r24	; 0x0b
    24d2:	9c 87       	std	Y+12, r25	; 0x0c
    24d4:	ad 87       	std	Y+13, r26	; 0x0d
    24d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24da:	7c 85       	ldd	r23, Y+12	; 0x0c
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a e7       	ldi	r20, 0x7A	; 122
    24e6:	55 e4       	ldi	r21, 0x45	; 69
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8f 83       	std	Y+7, r24	; 0x07
    24f2:	98 87       	std	Y+8, r25	; 0x08
    24f4:	a9 87       	std	Y+9, r26	; 0x09
    24f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <LCD_sendChar+0xda>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <LCD_sendChar+0x158>
	else if (__tmp > 65535)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <LCD_sendChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	6b 85       	ldd	r22, Y+11	; 0x0b
    2534:	7c 85       	ldd	r23, Y+12	; 0x0c
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	0f c0       	rjmp	.+30     	; 0x257a <LCD_sendChar+0x13a>
    255c:	80 e9       	ldi	r24, 0x90	; 144
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_sendChar+0x128>
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <LCD_sendChar+0x11c>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <LCD_sendChar+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_sendChar+0x164>
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
		error_status = E_NOT_OK;
#endif
		_delay_ms(2);

	}
	return error_status;
    25ac:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    25ae:	62 96       	adiw	r28, 0x12	; 18
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <LCD_sendCharAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_sendCharAtPosition(const lcd_t *lcd, uint8 row, uint8 col, uint8 _char)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	64 97       	sbiw	r28, 0x14	; 20
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	99 8b       	std	Y+17, r25	; 0x11
    25d6:	88 8b       	std	Y+16, r24	; 0x10
    25d8:	6a 8b       	std	Y+18, r22	; 0x12
    25da:	4b 8b       	std	Y+19, r20	; 0x13
    25dc:	2c 8b       	std	Y+20, r18	; 0x14
	STD_ReturnType error_status = E_OK;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    25e2:	88 89       	ldd	r24, Y+16	; 0x10
    25e4:	99 89       	ldd	r25, Y+17	; 0x11
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	11 f4       	brne	.+4      	; 0x25ee <LCD_sendCharAtPosition+0x2e>
	{
		error_status = E_NOT_OK;
    25ea:	1f 86       	std	Y+15, r1	; 0x0f
    25ec:	a7 c0       	rjmp	.+334    	; 0x273c <LCD_sendCharAtPosition+0x17c>
	}
	else
	{

		/* set cursor to the required position */
		LCD_setCursorLocation(lcd, row, col);
    25ee:	88 89       	ldd	r24, Y+16	; 0x10
    25f0:	99 89       	ldd	r25, Y+17	; 0x11
    25f2:	6a 89       	ldd	r22, Y+18	; 0x12
    25f4:	4b 89       	ldd	r20, Y+19	; 0x13
    25f6:	0e 94 b3 14 	call	0x2966	; 0x2966 <LCD_setCursorLocation>

		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    25fa:	88 89       	ldd	r24, Y+16	; 0x10
    25fc:	99 89       	ldd	r25, Y+17	; 0x11
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2604:	98 2f       	mov	r25, r24
    2606:	8f 85       	ldd	r24, Y+15	; 0x0f
    2608:	89 23       	and	r24, r25
    260a:	8f 87       	std	Y+15, r24	; 0x0f

#if LCD_DATA_BITS_MODE == 4
		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    260c:	8c 89       	ldd	r24, Y+20	; 0x14
    260e:	28 2f       	mov	r18, r24
    2610:	22 95       	swap	r18
    2612:	2f 70       	andi	r18, 0x0F	; 15
    2614:	88 89       	ldd	r24, Y+16	; 0x10
    2616:	99 89       	ldd	r25, Y+17	; 0x11
    2618:	62 2f       	mov	r22, r18
    261a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <LCD_send4Bits>
    261e:	98 2f       	mov	r25, r24
    2620:	8f 85       	ldd	r24, Y+15	; 0x0f
    2622:	89 23       	and	r24, r25
    2624:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2626:	88 89       	ldd	r24, Y+16	; 0x10
    2628:	99 89       	ldd	r25, Y+17	; 0x11
    262a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_genEnablePulse>
    262e:	98 2f       	mov	r25, r24
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	89 23       	and	r24, r25
    2634:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    2636:	88 89       	ldd	r24, Y+16	; 0x10
    2638:	99 89       	ldd	r25, Y+17	; 0x11
    263a:	6c 89       	ldd	r22, Y+20	; 0x14
    263c:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <LCD_send4Bits>
    2640:	98 2f       	mov	r25, r24
    2642:	8f 85       	ldd	r24, Y+15	; 0x0f
    2644:	89 23       	and	r24, r25
    2646:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2648:	88 89       	ldd	r24, Y+16	; 0x10
    264a:	99 89       	ldd	r25, Y+17	; 0x11
    264c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_genEnablePulse>
    2650:	98 2f       	mov	r25, r24
    2652:	8f 85       	ldd	r24, Y+15	; 0x0f
    2654:	89 23       	and	r24, r25
    2656:	8f 87       	std	Y+15, r24	; 0x0f
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a0 e0       	ldi	r26, 0x00	; 0
    265e:	b0 e4       	ldi	r27, 0x40	; 64
    2660:	8b 87       	std	Y+11, r24	; 0x0b
    2662:	9c 87       	std	Y+12, r25	; 0x0c
    2664:	ad 87       	std	Y+13, r26	; 0x0d
    2666:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	6b 85       	ldd	r22, Y+11	; 0x0b
    266a:	7c 85       	ldd	r23, Y+12	; 0x0c
    266c:	8d 85       	ldd	r24, Y+13	; 0x0d
    266e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a e7       	ldi	r20, 0x7A	; 122
    2676:	55 e4       	ldi	r21, 0x45	; 69
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8f 83       	std	Y+7, r24	; 0x07
    2682:	98 87       	std	Y+8, r25	; 0x08
    2684:	a9 87       	std	Y+9, r26	; 0x09
    2686:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2688:	6f 81       	ldd	r22, Y+7	; 0x07
    268a:	78 85       	ldd	r23, Y+8	; 0x08
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <LCD_sendCharAtPosition+0xea>
		__ticks = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <LCD_sendCharAtPosition+0x168>
	else if (__tmp > 65535)
    26aa:	6f 81       	ldd	r22, Y+7	; 0x07
    26ac:	78 85       	ldd	r23, Y+8	; 0x08
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	4c f5       	brge	.+82     	; 0x2714 <LCD_sendCharAtPosition+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <LCD_sendCharAtPosition+0x14a>
    26ec:	80 e9       	ldi	r24, 0x90	; 144
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	9c 83       	std	Y+4, r25	; 0x04
    26f2:	8b 83       	std	Y+3, r24	; 0x03
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <LCD_sendCharAtPosition+0x138>
    26fc:	9c 83       	std	Y+4, r25	; 0x04
    26fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9e 83       	std	Y+6, r25	; 0x06
    2708:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	9e 81       	ldd	r25, Y+6	; 0x06
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <LCD_sendCharAtPosition+0x12c>
    2712:	14 c0       	rjmp	.+40     	; 0x273c <LCD_sendCharAtPosition+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	8d 81       	ldd	r24, Y+5	; 0x05
    272a:	9e 81       	ldd	r25, Y+6	; 0x06
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_sendCharAtPosition+0x174>
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	89 83       	std	Y+1, r24	; 0x01
#endif


	}

	return error_status;
    273c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    273e:	64 96       	adiw	r28, 0x14	; 20
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <LCD_sendString>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_sendString(const lcd_t *lcd, uint8 * str)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <LCD_sendString+0x6>
    2756:	00 d0       	rcall	.+0      	; 0x2758 <LCD_sendString+0x8>
    2758:	0f 92       	push	r0
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	9b 83       	std	Y+3, r25	; 0x03
    2760:	8a 83       	std	Y+2, r24	; 0x02
    2762:	7d 83       	std	Y+5, r23	; 0x05
    2764:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	21 f0       	breq	.+8      	; 0x277a <LCD_sendString+0x2a>
    2772:	8c 81       	ldd	r24, Y+4	; 0x04
    2774:	9d 81       	ldd	r25, Y+5	; 0x05
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	79 f4       	brne	.+30     	; 0x2798 <LCD_sendString+0x48>
	{
		error_status = E_NOT_OK;
    277a:	19 82       	std	Y+1, r1	; 0x01
    277c:	12 c0       	rjmp	.+36     	; 0x27a2 <LCD_sendString+0x52>
	}
	else
	{
		while(*str)
		{
			LCD_sendChar(lcd, *str++); /* print character then increment pointer */
    277e:	ec 81       	ldd	r30, Y+4	; 0x04
    2780:	fd 81       	ldd	r31, Y+5	; 0x05
    2782:	20 81       	ld	r18, Z
    2784:	8c 81       	ldd	r24, Y+4	; 0x04
    2786:	9d 81       	ldd	r25, Y+5	; 0x05
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	9d 83       	std	Y+5, r25	; 0x05
    278c:	8c 83       	std	Y+4, r24	; 0x04
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	62 2f       	mov	r22, r18
    2794:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendChar>
	{
		error_status = E_NOT_OK;
	}
	else
	{
		while(*str)
    2798:	ec 81       	ldd	r30, Y+4	; 0x04
    279a:	fd 81       	ldd	r31, Y+5	; 0x05
    279c:	80 81       	ld	r24, Z
    279e:	88 23       	and	r24, r24
    27a0:	71 f7       	brne	.-36     	; 0x277e <LCD_sendString+0x2e>
			LCD_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <LCD_sendStringAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_sendStringAtPosition(const lcd_t *lcd, uint8 row, uint8 col, uint8 * str )
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	27 97       	sbiw	r28, 0x07	; 7
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	9b 83       	std	Y+3, r25	; 0x03
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	6c 83       	std	Y+4, r22	; 0x04
    27ce:	4d 83       	std	Y+5, r20	; 0x05
    27d0:	3f 83       	std	Y+7, r19	; 0x07
    27d2:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnType error_status = E_OK;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	9b 81       	ldd	r25, Y+3	; 0x03
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	21 f0       	breq	.+8      	; 0x27e8 <LCD_sendStringAtPosition+0x34>
    27e0:	8e 81       	ldd	r24, Y+6	; 0x06
    27e2:	9f 81       	ldd	r25, Y+7	; 0x07
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	11 f4       	brne	.+4      	; 0x27ec <LCD_sendStringAtPosition+0x38>
	{
		error_status = E_NOT_OK;
    27e8:	19 82       	std	Y+1, r1	; 0x01
    27ea:	1d c0       	rjmp	.+58     	; 0x2826 <LCD_sendStringAtPosition+0x72>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_setCursorLocation(lcd, row, col);
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	9b 81       	ldd	r25, Y+3	; 0x03
    27f0:	6c 81       	ldd	r22, Y+4	; 0x04
    27f2:	4d 81       	ldd	r20, Y+5	; 0x05
    27f4:	0e 94 b3 14 	call	0x2966	; 0x2966 <LCD_setCursorLocation>
    27f8:	98 2f       	mov	r25, r24
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	89 23       	and	r24, r25
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	0d c0       	rjmp	.+26     	; 0x281c <LCD_sendStringAtPosition+0x68>
		while(*str)
		{
			LCD_sendChar(lcd, *str++); /* print character then increment pointer */
    2802:	ee 81       	ldd	r30, Y+6	; 0x06
    2804:	ff 81       	ldd	r31, Y+7	; 0x07
    2806:	20 81       	ld	r18, Z
    2808:	8e 81       	ldd	r24, Y+6	; 0x06
    280a:	9f 81       	ldd	r25, Y+7	; 0x07
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	9f 83       	std	Y+7, r25	; 0x07
    2810:	8e 83       	std	Y+6, r24	; 0x06
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	9b 81       	ldd	r25, Y+3	; 0x03
    2816:	62 2f       	mov	r22, r18
    2818:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendChar>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_setCursorLocation(lcd, row, col);
		while(*str)
    281c:	ee 81       	ldd	r30, Y+6	; 0x06
    281e:	ff 81       	ldd	r31, Y+7	; 0x07
    2820:	80 81       	ld	r24, Z
    2822:	88 23       	and	r24, r24
    2824:	71 f7       	brne	.-36     	; 0x2802 <LCD_sendStringAtPosition+0x4e>
		{
			LCD_sendChar(lcd, *str++); /* print character then increment pointer */
		}
	}
	return error_status;
    2826:	89 81       	ldd	r24, Y+1	; 0x01
}
    2828:	27 96       	adiw	r28, 0x07	; 7
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <LCD_sendCustomCharAtPosition>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_sendCustomCharAtPosition(const lcd_t *lcd, uint8 * char_arr, uint8 row,\
		uint8 col, uint8 mem_position)
{
    283a:	0f 93       	push	r16
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	29 97       	sbiw	r28, 0x09	; 9
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
    2854:	7e 83       	std	Y+6, r23	; 0x06
    2856:	6d 83       	std	Y+5, r22	; 0x05
    2858:	4f 83       	std	Y+7, r20	; 0x07
    285a:	28 87       	std	Y+8, r18	; 0x08
    285c:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnType error_status = E_OK;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd)
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	9c 81       	ldd	r25, Y+4	; 0x04
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	11 f4       	brne	.+4      	; 0x286e <LCD_sendCustomCharAtPosition+0x34>
	{
		error_status = E_NOT_OK;
    286a:	1a 82       	std	Y+2, r1	; 0x02
    286c:	36 c0       	rjmp	.+108    	; 0x28da <LCD_sendCustomCharAtPosition+0xa0>
	}
	else
	{
		uint8 new_char_counter;
		/* make AC point to the CGRAM memory position point to where the character will be stored */
		error_status = LCD_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));
    286e:	89 85       	ldd	r24, Y+9	; 0x09
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	08 96       	adiw	r24, 0x08	; 8
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	28 2f       	mov	r18, r24
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	62 2f       	mov	r22, r18
    288a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    288e:	8a 83       	std	Y+2, r24	; 0x02

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    2890:	19 82       	std	Y+1, r1	; 0x01
    2892:	15 c0       	rjmp	.+42     	; 0x28be <LCD_sendCustomCharAtPosition+0x84>
		{
			error_status &= LCD_sendChar(lcd, char_arr[new_char_counter]);
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	28 2f       	mov	r18, r24
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	fc 01       	movw	r30, r24
    28a0:	e2 0f       	add	r30, r18
    28a2:	f3 1f       	adc	r31, r19
    28a4:	20 81       	ld	r18, Z
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	9c 81       	ldd	r25, Y+4	; 0x04
    28aa:	62 2f       	mov	r22, r18
    28ac:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendChar>
    28b0:	98 2f       	mov	r25, r24
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	89 23       	and	r24, r25
    28b6:	8a 83       	std	Y+2, r24	; 0x02
		error_status = LCD_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	88 30       	cpi	r24, 0x08	; 8
    28c2:	40 f3       	brcs	.-48     	; 0x2894 <LCD_sendCustomCharAtPosition+0x5a>
		{
			error_status &= LCD_sendChar(lcd, char_arr[new_char_counter]);
		}
		/* return to DDRAM and send the new char */
		error_status &= LCD_sendCharAtPosition(lcd, row, col, mem_position);
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	48 85       	ldd	r20, Y+8	; 0x08
    28cc:	29 85       	ldd	r18, Y+9	; 0x09
    28ce:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCharAtPosition>
    28d2:	98 2f       	mov	r25, r24
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	89 23       	and	r24, r25
    28d8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return error_status;
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    28dc:	29 96       	adiw	r28, 0x09	; 9
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret

000028f0 <LCD_sendNum>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_sendNum(const lcd_t *lcd, uint32 num)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	63 97       	sbiw	r28, 0x13	; 19
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	9f 87       	std	Y+15, r25	; 0x0f
    2906:	8e 87       	std	Y+14, r24	; 0x0e
    2908:	48 8b       	std	Y+16, r20	; 0x10
    290a:	59 8b       	std	Y+17, r21	; 0x11
    290c:	6a 8b       	std	Y+18, r22	; 0x12
    290e:	7b 8b       	std	Y+19, r23	; 0x13
	STD_ReturnType error_status = E_OK;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2914:	8e 85       	ldd	r24, Y+14	; 0x0e
    2916:	9f 85       	ldd	r25, Y+15	; 0x0f
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	11 f4       	brne	.+4      	; 0x2920 <LCD_sendNum+0x30>
	{
		error_status = E_NOT_OK;
    291c:	19 82       	std	Y+1, r1	; 0x01
    291e:	19 c0       	rjmp	.+50     	; 0x2952 <LCD_sendNum+0x62>
	}
	else
	{
		uint8 str[12];											/* to store the converted number */
		error_status  = numToStr(num, str);						/* call the function to convert the number */
    2920:	88 89       	ldd	r24, Y+16	; 0x10
    2922:	99 89       	ldd	r25, Y+17	; 0x11
    2924:	aa 89       	ldd	r26, Y+18	; 0x12
    2926:	bb 89       	ldd	r27, Y+19	; 0x13
    2928:	9e 01       	movw	r18, r28
    292a:	2e 5f       	subi	r18, 0xFE	; 254
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	a9 01       	movw	r20, r18
    2934:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <numToStr>
    2938:	89 83       	std	Y+1, r24	; 0x01
		error_status &= LCD_sendString(lcd, str);			/* send the string to the LCD */
    293a:	8e 85       	ldd	r24, Y+14	; 0x0e
    293c:	9f 85       	ldd	r25, Y+15	; 0x0f
    293e:	9e 01       	movw	r18, r28
    2940:	2e 5f       	subi	r18, 0xFE	; 254
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	b9 01       	movw	r22, r18
    2946:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_sendString>
    294a:	98 2f       	mov	r25, r24
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	89 23       	and	r24, r25
    2950:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    2952:	89 81       	ldd	r24, Y+1	; 0x01
}
    2954:	63 96       	adiw	r28, 0x13	; 19
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <LCD_setCursorLocation>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_setCursorLocation(const lcd_t *lcd, uint8 row, uint8 col)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	27 97       	sbiw	r28, 0x07	; 7
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	9b 83       	std	Y+3, r25	; 0x03
    297c:	8a 83       	std	Y+2, r24	; 0x02
    297e:	6c 83       	std	Y+4, r22	; 0x04
    2980:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnType error_status = E_OK;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	9b 81       	ldd	r25, Y+3	; 0x03
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	11 f4       	brne	.+4      	; 0x2992 <LCD_setCursorLocation+0x2c>
	{
		error_status = E_NOT_OK;
    298e:	19 82       	std	Y+1, r1	; 0x01
    2990:	58 c0       	rjmp	.+176    	; 0x2a42 <LCD_setCursorLocation+0xdc>
	}
	else
	{
		col--;
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	81 50       	subi	r24, 0x01	; 1
    2996:	8d 83       	std	Y+5, r24	; 0x05
		/* check row value */
		switch(row)
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	3f 83       	std	Y+7, r19	; 0x07
    29a0:	2e 83       	std	Y+6, r18	; 0x06
    29a2:	8e 81       	ldd	r24, Y+6	; 0x06
    29a4:	9f 81       	ldd	r25, Y+7	; 0x07
    29a6:	82 30       	cpi	r24, 0x02	; 2
    29a8:	91 05       	cpc	r25, r1
    29aa:	19 f1       	breq	.+70     	; 0x29f2 <LCD_setCursorLocation+0x8c>
    29ac:	2e 81       	ldd	r18, Y+6	; 0x06
    29ae:	3f 81       	ldd	r19, Y+7	; 0x07
    29b0:	23 30       	cpi	r18, 0x03	; 3
    29b2:	31 05       	cpc	r19, r1
    29b4:	34 f4       	brge	.+12     	; 0x29c2 <LCD_setCursorLocation+0x5c>
    29b6:	8e 81       	ldd	r24, Y+6	; 0x06
    29b8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	91 05       	cpc	r25, r1
    29be:	61 f0       	breq	.+24     	; 0x29d8 <LCD_setCursorLocation+0x72>
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <LCD_setCursorLocation+0xda>
    29c2:	2e 81       	ldd	r18, Y+6	; 0x06
    29c4:	3f 81       	ldd	r19, Y+7	; 0x07
    29c6:	23 30       	cpi	r18, 0x03	; 3
    29c8:	31 05       	cpc	r19, r1
    29ca:	01 f1       	breq	.+64     	; 0x2a0c <LCD_setCursorLocation+0xa6>
    29cc:	8e 81       	ldd	r24, Y+6	; 0x06
    29ce:	9f 81       	ldd	r25, Y+7	; 0x07
    29d0:	84 30       	cpi	r24, 0x04	; 4
    29d2:	91 05       	cpc	r25, r1
    29d4:	41 f1       	breq	.+80     	; 0x2a26 <LCD_setCursorLocation+0xc0>
    29d6:	34 c0       	rjmp	.+104    	; 0x2a40 <LCD_setCursorLocation+0xda>
		{
		case ROW1:
			/* address format is 1 A6 A5 A4 A3 A2 A1 A0,
			 * so, we add 0x80 to the base address of every row */

			error_status &= LCD_sendCommand(lcd, (0x80 + col)); /* first row start address is 0x00 */
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	28 2f       	mov	r18, r24
    29dc:	20 58       	subi	r18, 0x80	; 128
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	9b 81       	ldd	r25, Y+3	; 0x03
    29e2:	62 2f       	mov	r22, r18
    29e4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    29e8:	98 2f       	mov	r25, r24
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	89 23       	and	r24, r25
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	28 c0       	rjmp	.+80     	; 0x2a42 <LCD_setCursorLocation+0xdc>
			break;

		case ROW2:
			error_status &= LCD_sendCommand(lcd, (0xC0 + col)); /* second row start address is 0x40 */
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	28 2f       	mov	r18, r24
    29f6:	20 54       	subi	r18, 0x40	; 64
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	9b 81       	ldd	r25, Y+3	; 0x03
    29fc:	62 2f       	mov	r22, r18
    29fe:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    2a02:	98 2f       	mov	r25, r24
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	89 23       	and	r24, r25
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	1b c0       	rjmp	.+54     	; 0x2a42 <LCD_setCursorLocation+0xdc>
			break;

		case ROW3:
			error_status &= LCD_sendCommand(lcd, (0x94 + col)); /* third row start address is 0x14 */
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	28 2f       	mov	r18, r24
    2a10:	2c 56       	subi	r18, 0x6C	; 108
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	9b 81       	ldd	r25, Y+3	; 0x03
    2a16:	62 2f       	mov	r22, r18
    2a18:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    2a1c:	98 2f       	mov	r25, r24
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	89 23       	and	r24, r25
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	0e c0       	rjmp	.+28     	; 0x2a42 <LCD_setCursorLocation+0xdc>
			break;

		case ROW4:
			error_status &= LCD_sendCommand(lcd, (0xD4 + col)); /* fourth row start address is 0x54 */
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	28 2f       	mov	r18, r24
    2a2a:	2c 52       	subi	r18, 0x2C	; 44
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a30:	62 2f       	mov	r22, r18
    2a32:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_sendCommand>
    2a36:	98 2f       	mov	r25, r24
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	89 23       	and	r24, r25
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <LCD_setCursorLocation+0xdc>
			break;

		default:
			error_status = E_NOT_OK;
    2a40:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a44:	27 96       	adiw	r28, 0x07	; 7
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <LCD_send4Bits>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_send4Bits(const lcd_t *lcd, uint8 data_command)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <LCD_send4Bits+0x6>
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <LCD_send4Bits+0x8>
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	9b 83       	std	Y+3, r25	; 0x03
    2a64:	8a 83       	std	Y+2, r24	; 0x02
    2a66:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	11 f4       	brne	.+4      	; 0x2a78 <LCD_send4Bits+0x22>
	{
		error_status = E_NOT_OK;
    2a74:	19 82       	std	Y+1, r1	; 0x01
    2a76:	3a c0       	rjmp	.+116    	; 0x2aec <LCD_send4Bits+0x96>
	}
	else
	{
		/* write the lower nibble of the passed data_command argument to the data pin of LCD */
		error_status = GPIO_pinWrite(&(lcd->data_pin[0]), READ_BIT(data_command, 0));
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7c:	9c 01       	movw	r18, r24
    2a7e:	2e 5f       	subi	r18, 0xFE	; 254
    2a80:	3f 4f       	sbci	r19, 0xFF	; 255
    2a82:	8c 81       	ldd	r24, Y+4	; 0x04
    2a84:	48 2f       	mov	r20, r24
    2a86:	41 70       	andi	r20, 0x01	; 1
    2a88:	c9 01       	movw	r24, r18
    2a8a:	64 2f       	mov	r22, r20
    2a8c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2a90:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[1]), READ_BIT(data_command, 1));
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	9b 81       	ldd	r25, Y+3	; 0x03
    2a96:	9c 01       	movw	r18, r24
    2a98:	2d 5f       	subi	r18, 0xFD	; 253
    2a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9e:	86 95       	lsr	r24
    2aa0:	48 2f       	mov	r20, r24
    2aa2:	41 70       	andi	r20, 0x01	; 1
    2aa4:	c9 01       	movw	r24, r18
    2aa6:	64 2f       	mov	r22, r20
    2aa8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2aac:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[2]), READ_BIT(data_command, 2));
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab2:	9c 01       	movw	r18, r24
    2ab4:	2c 5f       	subi	r18, 0xFC	; 252
    2ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aba:	86 95       	lsr	r24
    2abc:	86 95       	lsr	r24
    2abe:	48 2f       	mov	r20, r24
    2ac0:	41 70       	andi	r20, 0x01	; 1
    2ac2:	c9 01       	movw	r24, r18
    2ac4:	64 2f       	mov	r22, r20
    2ac6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2aca:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[3]), READ_BIT(data_command, 3));
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	9c 01       	movw	r18, r24
    2ad2:	2b 5f       	subi	r18, 0xFB	; 251
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad8:	86 95       	lsr	r24
    2ada:	86 95       	lsr	r24
    2adc:	86 95       	lsr	r24
    2ade:	48 2f       	mov	r20, r24
    2ae0:	41 70       	andi	r20, 0x01	; 1
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	64 2f       	mov	r22, r20
    2ae6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2aea:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <LCD_genEnablePulse>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_genEnablePulse(const lcd_t *lcd)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	6b 97       	sbiw	r28, 0x1b	; 27
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	9b 8f       	std	Y+27, r25	; 0x1b
    2b12:	8a 8f       	std	Y+26, r24	; 0x1a
	STD_ReturnType error_status = E_OK;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd)
    2b18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	11 f4       	brne	.+4      	; 0x2b24 <LCD_genEnablePulse+0x28>
	{
		error_status = E_NOT_OK;
    2b20:	19 8e       	std	Y+25, r1	; 0x19
    2b22:	cc c0       	rjmp	.+408    	; 0x2cbc <LCD_genEnablePulse+0x1c0>
	}
	else
	{
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_HIGH);
    2b24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b28:	01 96       	adiw	r24, 0x01	; 1
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2b30:	89 8f       	std	Y+25, r24	; 0x19
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a0 e8       	ldi	r26, 0x80	; 128
    2b38:	bf e3       	ldi	r27, 0x3F	; 63
    2b3a:	8d 8b       	std	Y+21, r24	; 0x15
    2b3c:	9e 8b       	std	Y+22, r25	; 0x16
    2b3e:	af 8b       	std	Y+23, r26	; 0x17
    2b40:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	2b ea       	ldi	r18, 0xAB	; 171
    2b4c:	3a ea       	ldi	r19, 0xAA	; 170
    2b4e:	4a ea       	ldi	r20, 0xAA	; 170
    2b50:	50 e4       	ldi	r21, 0x40	; 64
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	89 8b       	std	Y+17, r24	; 0x11
    2b5c:	9a 8b       	std	Y+18, r25	; 0x12
    2b5e:	ab 8b       	std	Y+19, r26	; 0x13
    2b60:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b62:	69 89       	ldd	r22, Y+17	; 0x11
    2b64:	7a 89       	ldd	r23, Y+18	; 0x12
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	1c f4       	brge	.+6      	; 0x2b80 <LCD_genEnablePulse+0x84>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	88 8b       	std	Y+16, r24	; 0x10
    2b7e:	91 c0       	rjmp	.+290    	; 0x2ca2 <LCD_genEnablePulse+0x1a6>
	else if (__tmp > 255)
    2b80:	69 89       	ldd	r22, Y+17	; 0x11
    2b82:	7a 89       	ldd	r23, Y+18	; 0x12
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	4f e7       	ldi	r20, 0x7F	; 127
    2b8e:	53 e4       	ldi	r21, 0x43	; 67
    2b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b94:	18 16       	cp	r1, r24
    2b96:	0c f0       	brlt	.+2      	; 0x2b9a <LCD_genEnablePulse+0x9e>
    2b98:	7b c0       	rjmp	.+246    	; 0x2c90 <LCD_genEnablePulse+0x194>
	{
		_delay_ms(__us / 1000.0);
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a e7       	ldi	r20, 0x7A	; 122
    2ba8:	54 e4       	ldi	r21, 0x44	; 68
    2baa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8c 87       	std	Y+12, r24	; 0x0c
    2bb4:	9d 87       	std	Y+13, r25	; 0x0d
    2bb6:	ae 87       	std	Y+14, r26	; 0x0e
    2bb8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bba:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	4a e7       	ldi	r20, 0x7A	; 122
    2bc8:	55 e4       	ldi	r21, 0x45	; 69
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	88 87       	std	Y+8, r24	; 0x08
    2bd4:	99 87       	std	Y+9, r25	; 0x09
    2bd6:	aa 87       	std	Y+10, r26	; 0x0a
    2bd8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bda:	68 85       	ldd	r22, Y+8	; 0x08
    2bdc:	79 85       	ldd	r23, Y+9	; 0x09
    2bde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e8       	ldi	r20, 0x80	; 128
    2be8:	5f e3       	ldi	r21, 0x3F	; 63
    2bea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bee:	88 23       	and	r24, r24
    2bf0:	2c f4       	brge	.+10     	; 0x2bfc <LCD_genEnablePulse+0x100>
		__ticks = 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9f 83       	std	Y+7, r25	; 0x07
    2bf8:	8e 83       	std	Y+6, r24	; 0x06
    2bfa:	3f c0       	rjmp	.+126    	; 0x2c7a <LCD_genEnablePulse+0x17e>
	else if (__tmp > 65535)
    2bfc:	68 85       	ldd	r22, Y+8	; 0x08
    2bfe:	79 85       	ldd	r23, Y+9	; 0x09
    2c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	3f ef       	ldi	r19, 0xFF	; 255
    2c08:	4f e7       	ldi	r20, 0x7F	; 127
    2c0a:	57 e4       	ldi	r21, 0x47	; 71
    2c0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c10:	18 16       	cp	r1, r24
    2c12:	4c f5       	brge	.+82     	; 0x2c66 <LCD_genEnablePulse+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c14:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c16:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c18:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9f 83       	std	Y+7, r25	; 0x07
    2c3a:	8e 83       	std	Y+6, r24	; 0x06
    2c3c:	0f c0       	rjmp	.+30     	; 0x2c5c <LCD_genEnablePulse+0x160>
    2c3e:	80 e9       	ldi	r24, 0x90	; 144
    2c40:	91 e0       	ldi	r25, 0x01	; 1
    2c42:	9d 83       	std	Y+5, r25	; 0x05
    2c44:	8c 83       	std	Y+4, r24	; 0x04
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <LCD_genEnablePulse+0x14e>
    2c4e:	9d 83       	std	Y+5, r25	; 0x05
    2c50:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c52:	8e 81       	ldd	r24, Y+6	; 0x06
    2c54:	9f 81       	ldd	r25, Y+7	; 0x07
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	9f 83       	std	Y+7, r25	; 0x07
    2c5a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	69 f7       	brne	.-38     	; 0x2c3e <LCD_genEnablePulse+0x142>
    2c64:	24 c0       	rjmp	.+72     	; 0x2cae <LCD_genEnablePulse+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c66:	68 85       	ldd	r22, Y+8	; 0x08
    2c68:	79 85       	ldd	r23, Y+9	; 0x09
    2c6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	9f 83       	std	Y+7, r25	; 0x07
    2c78:	8e 83       	std	Y+6, r24	; 0x06
    2c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7e:	9b 83       	std	Y+3, r25	; 0x03
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <LCD_genEnablePulse+0x18a>
    2c8a:	9b 83       	std	Y+3, r25	; 0x03
    2c8c:	8a 83       	std	Y+2, r24	; 0x02
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <LCD_genEnablePulse+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c90:	69 89       	ldd	r22, Y+17	; 0x11
    2c92:	7a 89       	ldd	r23, Y+18	; 0x12
    2c94:	8b 89       	ldd	r24, Y+19	; 0x13
    2c96:	9c 89       	ldd	r25, Y+20	; 0x14
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	88 8b       	std	Y+16, r24	; 0x10
    2ca2:	88 89       	ldd	r24, Y+16	; 0x10
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	8a 95       	dec	r24
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <LCD_genEnablePulse+0x1ac>
    2cac:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_LOW);
    2cae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cb2:	01 96       	adiw	r24, 0x01	; 1
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2cba:	89 8f       	std	Y+25, r24	; 0x19

	}
	return error_status;
    2cbc:	89 8d       	ldd	r24, Y+25	; 0x19
}
    2cbe:	6b 96       	adiw	r28, 0x1b	; 27
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <numToStr>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType numToStr(const uint32 num, char * str)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	27 97       	sbiw	r28, 0x07	; 7
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	6a 83       	std	Y+2, r22	; 0x02
    2ce6:	7b 83       	std	Y+3, r23	; 0x03
    2ce8:	8c 83       	std	Y+4, r24	; 0x04
    2cea:	9d 83       	std	Y+5, r25	; 0x05
    2cec:	5f 83       	std	Y+7, r21	; 0x07
    2cee:	4e 83       	std	Y+6, r20	; 0x06
	STD_ReturnType error_status = E_OK;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str)
    2cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	11 f4       	brne	.+4      	; 0x2d00 <numToStr+0x30>
	{
		error_status = E_NOT_OK;
    2cfc:	19 82       	std	Y+1, r1	; 0x01
    2cfe:	25 c0       	rjmp	.+74     	; 0x2d4a <numToStr+0x7a>
	}
	else
	{
		sprintf(str, "%i", num);
    2d00:	8d b7       	in	r24, 0x3d	; 61
    2d02:	9e b7       	in	r25, 0x3e	; 62
    2d04:	08 97       	sbiw	r24, 0x08	; 8
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	9e bf       	out	0x3e, r25	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	8d bf       	out	0x3d, r24	; 61
    2d10:	ed b7       	in	r30, 0x3d	; 61
    2d12:	fe b7       	in	r31, 0x3e	; 62
    2d14:	31 96       	adiw	r30, 0x01	; 1
    2d16:	8e 81       	ldd	r24, Y+6	; 0x06
    2d18:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	80 83       	st	Z, r24
    2d1e:	80 e6       	ldi	r24, 0x60	; 96
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	93 83       	std	Z+3, r25	; 0x03
    2d24:	82 83       	std	Z+2, r24	; 0x02
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	ac 81       	ldd	r26, Y+4	; 0x04
    2d2c:	bd 81       	ldd	r27, Y+5	; 0x05
    2d2e:	84 83       	std	Z+4, r24	; 0x04
    2d30:	95 83       	std	Z+5, r25	; 0x05
    2d32:	a6 83       	std	Z+6, r26	; 0x06
    2d34:	b7 83       	std	Z+7, r27	; 0x07
    2d36:	0e 94 52 19 	call	0x32a4	; 0x32a4 <sprintf>
    2d3a:	8d b7       	in	r24, 0x3d	; 61
    2d3c:	9e b7       	in	r25, 0x3e	; 62
    2d3e:	08 96       	adiw	r24, 0x08	; 8
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	9e bf       	out	0x3e, r25	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	8d bf       	out	0x3d, r24	; 61
	}
	return error_status;
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d4c:	27 96       	adiw	r28, 0x07	; 7
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <KEYPAD_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_init(const keypad_t *keypad_obj)
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <KEYPAD_init+0x6>
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <KEYPAD_init+0x8>
    2d66:	0f 92       	push	r0
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	9d 83       	std	Y+5, r25	; 0x05
    2d6e:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	8b 83       	std	Y+3, r24	; 0x03

	if(NULL == keypad_obj)				/* check for null pointer */
    2d74:	8c 81       	ldd	r24, Y+4	; 0x04
    2d76:	9d 81       	ldd	r25, Y+5	; 0x05
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	11 f4       	brne	.+4      	; 0x2d80 <KEYPAD_init+0x22>
	{
		error_status = E_NOT_OK;
    2d7c:	1b 82       	std	Y+3, r1	; 0x03
    2d7e:	31 c0       	rjmp	.+98     	; 0x2de2 <KEYPAD_init+0x84>
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    2d80:	1a 82       	std	Y+2, r1	; 0x02
    2d82:	19 82       	std	Y+1, r1	; 0x01
    2d84:	0f c0       	rjmp	.+30     	; 0x2da4 <KEYPAD_init+0x46>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
    2d86:	2c 81       	ldd	r18, Y+4	; 0x04
    2d88:	3d 81       	ldd	r19, Y+5	; 0x05
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	82 0f       	add	r24, r18
    2d90:	93 1f       	adc	r25, r19
    2d92:	61 e0       	ldi	r22, 0x01	; 1
    2d94:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_pinDirectionInit>
    2d98:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9e:	01 96       	adiw	r24, 0x01	; 1
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	9a 81       	ldd	r25, Y+2	; 0x02
    2da8:	84 30       	cpi	r24, 0x04	; 4
    2daa:	91 05       	cpc	r25, r1
    2dac:	64 f3       	brlt	.-40     	; 0x2d86 <KEYPAD_init+0x28>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    2dae:	1a 82       	std	Y+2, r1	; 0x02
    2db0:	19 82       	std	Y+1, r1	; 0x01
    2db2:	12 c0       	rjmp	.+36     	; 0x2dd8 <KEYPAD_init+0x7a>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
    2db4:	8c 81       	ldd	r24, Y+4	; 0x04
    2db6:	9d 81       	ldd	r25, Y+5	; 0x05
    2db8:	9c 01       	movw	r18, r24
    2dba:	2c 5f       	subi	r18, 0xFC	; 252
    2dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc2:	82 0f       	add	r24, r18
    2dc4:	93 1f       	adc	r25, r19
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_pinDirectionInit>
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	9a 81       	ldd	r25, Y+2	; 0x02
    2ddc:	84 30       	cpi	r24, 0x04	; 4
    2dde:	91 05       	cpc	r25, r1
    2de0:	4c f3       	brlt	.-46     	; 0x2db4 <KEYPAD_init+0x56>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
		}
	}
	return error_status;
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <KEYPAD_getPressedKey>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_getPressedKey(const keypad_t *keypad_obj, uint8 *value)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	67 97       	sbiw	r28, 0x17	; 23
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	f8 94       	cli
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	cd bf       	out	0x3d, r28	; 61
    2e08:	9d 8b       	std	Y+21, r25	; 0x15
    2e0a:	8c 8b       	std	Y+20, r24	; 0x14
    2e0c:	7f 8b       	std	Y+23, r23	; 0x17
    2e0e:	6e 8b       	std	Y+22, r22	; 0x16
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	8a 8b       	std	Y+18, r24	; 0x12

	if(NULL == keypad_obj)
    2e14:	8c 89       	ldd	r24, Y+20	; 0x14
    2e16:	9d 89       	ldd	r25, Y+21	; 0x15
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	11 f4       	brne	.+4      	; 0x2e20 <KEYPAD_getPressedKey+0x2c>
	{
		error_status = E_NOT_OK;
    2e1c:	1a 8a       	std	Y+18, r1	; 0x12
    2e1e:	e4 c0       	rjmp	.+456    	; 0x2fe8 <KEYPAD_getPressedKey+0x1f4>
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
    2e20:	1f 86       	std	Y+15, r1	; 0x0f
		/* make sure that initially all 4 rows pins logic is the same as the default of columns pins */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    2e22:	19 8a       	std	Y+17, r1	; 0x11
    2e24:	0e c0       	rjmp	.+28     	; 0x2e42 <KEYPAD_getPressedKey+0x4e>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
    2e26:	2c 89       	ldd	r18, Y+20	; 0x14
    2e28:	3d 89       	ldd	r19, Y+21	; 0x15
    2e2a:	89 89       	ldd	r24, Y+17	; 0x11
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	82 0f       	add	r24, r18
    2e32:	93 1f       	adc	r25, r19
    2e34:	61 e0       	ldi	r22, 0x01	; 1
    2e36:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2e3a:	8a 8b       	std	Y+18, r24	; 0x12
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
		/* make sure that initially all 4 rows pins logic is the same as the default of columns pins */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    2e3c:	89 89       	ldd	r24, Y+17	; 0x11
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	89 8b       	std	Y+17, r24	; 0x11
    2e42:	89 89       	ldd	r24, Y+17	; 0x11
    2e44:	84 30       	cpi	r24, 0x04	; 4
    2e46:	78 f3       	brcs	.-34     	; 0x2e26 <KEYPAD_getPressedKey+0x32>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
		}

		/* loop through Rows pins change their logic status one at a time */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    2e48:	19 8a       	std	Y+17, r1	; 0x11
    2e4a:	ca c0       	rjmp	.+404    	; 0x2fe0 <KEYPAD_getPressedKey+0x1ec>
		{
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_PRESSED);
    2e4c:	2c 89       	ldd	r18, Y+20	; 0x14
    2e4e:	3d 89       	ldd	r19, Y+21	; 0x15
    2e50:	89 89       	ldd	r24, Y+17	; 0x11
    2e52:	88 2f       	mov	r24, r24
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	82 0f       	add	r24, r18
    2e58:	93 1f       	adc	r25, r19
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2e60:	98 2f       	mov	r25, r24
    2e62:	8a 89       	ldd	r24, Y+18	; 0x12
    2e64:	89 23       	and	r24, r25
    2e66:	8a 8b       	std	Y+18, r24	; 0x12
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	a0 e0       	ldi	r26, 0x00	; 0
    2e6e:	b0 e4       	ldi	r27, 0x40	; 64
    2e70:	8b 87       	std	Y+11, r24	; 0x0b
    2e72:	9c 87       	std	Y+12, r25	; 0x0c
    2e74:	ad 87       	std	Y+13, r26	; 0x0d
    2e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	4a e7       	ldi	r20, 0x7A	; 122
    2e86:	55 e4       	ldi	r21, 0x45	; 69
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	8f 83       	std	Y+7, r24	; 0x07
    2e92:	98 87       	std	Y+8, r25	; 0x08
    2e94:	a9 87       	std	Y+9, r26	; 0x09
    2e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e98:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9a:	78 85       	ldd	r23, Y+8	; 0x08
    2e9c:	89 85       	ldd	r24, Y+9	; 0x09
    2e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5f e3       	ldi	r21, 0x3F	; 63
    2ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	2c f4       	brge	.+10     	; 0x2eba <KEYPAD_getPressedKey+0xc6>
		__ticks = 1;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
    2eb8:	3f c0       	rjmp	.+126    	; 0x2f38 <KEYPAD_getPressedKey+0x144>
	else if (__tmp > 65535)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	3f ef       	ldi	r19, 0xFF	; 255
    2ec6:	4f e7       	ldi	r20, 0x7F	; 127
    2ec8:	57 e4       	ldi	r21, 0x47	; 71
    2eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ece:	18 16       	cp	r1, r24
    2ed0:	4c f5       	brge	.+82     	; 0x2f24 <KEYPAD_getPressedKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e2       	ldi	r20, 0x20	; 32
    2ee0:	51 e4       	ldi	r21, 0x41	; 65
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	0f c0       	rjmp	.+30     	; 0x2f1a <KEYPAD_getPressedKey+0x126>
    2efc:	80 e9       	ldi	r24, 0x90	; 144
    2efe:	91 e0       	ldi	r25, 0x01	; 1
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	9c 81       	ldd	r25, Y+4	; 0x04
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <KEYPAD_getPressedKey+0x114>
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	9e 81       	ldd	r25, Y+6	; 0x06
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	69 f7       	brne	.-38     	; 0x2efc <KEYPAD_getPressedKey+0x108>
    2f22:	14 c0       	rjmp	.+40     	; 0x2f4c <KEYPAD_getPressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f24:	6f 81       	ldd	r22, Y+7	; 0x07
    2f26:	78 85       	ldd	r23, Y+8	; 0x08
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <KEYPAD_getPressedKey+0x150>
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    2f4c:	18 8a       	std	Y+16, r1	; 0x10
    2f4e:	31 c0       	rjmp	.+98     	; 0x2fb2 <KEYPAD_getPressedKey+0x1be>
			{
				error_status &= GPIO_pinRead(&(keypad_obj->columns_pins[col_counter]), &state);
    2f50:	8c 89       	ldd	r24, Y+20	; 0x14
    2f52:	9d 89       	ldd	r25, Y+21	; 0x15
    2f54:	9c 01       	movw	r18, r24
    2f56:	2c 5f       	subi	r18, 0xFC	; 252
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	88 89       	ldd	r24, Y+16	; 0x10
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	82 0f       	add	r24, r18
    2f62:	93 1f       	adc	r25, r19
    2f64:	9e 01       	movw	r18, r28
    2f66:	2d 5e       	subi	r18, 0xED	; 237
    2f68:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6a:	b9 01       	movw	r22, r18
    2f6c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_pinRead>
    2f70:	98 2f       	mov	r25, r24
    2f72:	8a 89       	ldd	r24, Y+18	; 0x12
    2f74:	89 23       	and	r24, r25
    2f76:	8a 8b       	std	Y+18, r24	; 0x12

				/* Check if state variable changes to  KEYPAD_BUTTON_PRESSED */
				if(KEYPAD_BUTTON_PRESSED == state)
    2f78:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7a:	88 23       	and	r24, r24
    2f7c:	b9 f4       	brne	.+46     	; 0x2fac <KEYPAD_getPressedKey+0x1b8>
				{
					/* Store the value in the passed argument */
					*value = btn_values[row_counter][col_counter];
    2f7e:	89 89       	ldd	r24, Y+17	; 0x11
    2f80:	48 2f       	mov	r20, r24
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	88 89       	ldd	r24, Y+16	; 0x10
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	ca 01       	movw	r24, r20
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	82 0f       	add	r24, r18
    2f96:	93 1f       	adc	r25, r19
    2f98:	fc 01       	movw	r30, r24
    2f9a:	ea 57       	subi	r30, 0x7A	; 122
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	ee 89       	ldd	r30, Y+22	; 0x16
    2fa2:	ff 89       	ldd	r31, Y+23	; 0x17
    2fa4:	80 83       	st	Z, r24

					/* set the found flag, break to outer loop */
					found_flag = 1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	8f 87       	std	Y+15, r24	; 0x0f
    2faa:	06 c0       	rjmp	.+12     	; 0x2fb8 <KEYPAD_getPressedKey+0x1c4>
		{
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_PRESSED);
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    2fac:	88 89       	ldd	r24, Y+16	; 0x10
    2fae:	8f 5f       	subi	r24, 0xFF	; 255
    2fb0:	88 8b       	std	Y+16, r24	; 0x10
    2fb2:	88 89       	ldd	r24, Y+16	; 0x10
    2fb4:	84 30       	cpi	r24, 0x04	; 4
    2fb6:	60 f2       	brcs	.-104    	; 0x2f50 <KEYPAD_getPressedKey+0x15c>
					break;
				}else{}
			}

			/* Reset the row pin to default */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
    2fb8:	2c 89       	ldd	r18, Y+20	; 0x14
    2fba:	3d 89       	ldd	r19, Y+21	; 0x15
    2fbc:	89 89       	ldd	r24, Y+17	; 0x11
    2fbe:	88 2f       	mov	r24, r24
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	82 0f       	add	r24, r18
    2fc4:	93 1f       	adc	r25, r19
    2fc6:	61 e0       	ldi	r22, 0x01	; 1
    2fc8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <GPIO_pinWrite>
    2fcc:	98 2f       	mov	r25, r24
    2fce:	8a 89       	ldd	r24, Y+18	; 0x12
    2fd0:	89 23       	and	r24, r25
    2fd2:	8a 8b       	std	Y+18, r24	; 0x12

			/* if a key has been pressed, break to end of function */
			if (1 == found_flag)
    2fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	39 f0       	breq	.+14     	; 0x2fe8 <KEYPAD_getPressedKey+0x1f4>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
		}

		/* loop through Rows pins change their logic status one at a time */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    2fda:	89 89       	ldd	r24, Y+17	; 0x11
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	89 8b       	std	Y+17, r24	; 0x11
    2fe0:	89 89       	ldd	r24, Y+17	; 0x11
    2fe2:	84 30       	cpi	r24, 0x04	; 4
    2fe4:	08 f4       	brcc	.+2      	; 0x2fe8 <KEYPAD_getPressedKey+0x1f4>
    2fe6:	32 cf       	rjmp	.-412    	; 0x2e4c <KEYPAD_getPressedKey+0x58>
			{
				break;
			}else{}
		}
	}
	return error_status;
    2fe8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2fea:	67 96       	adiw	r28, 0x17	; 23
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <BUTTON_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_init(const button_t *btn)
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	00 d0       	rcall	.+0      	; 0x3002 <BUTTON_init+0x6>
    3002:	00 d0       	rcall	.+0      	; 0x3004 <BUTTON_init+0x8>
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	9c 83       	std	Y+4, r25	; 0x04
    300a:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == btn)
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	11 f4       	brne	.+4      	; 0x301c <BUTTON_init+0x20>
	{
		error_status = E_NOT_OK;
    3018:	19 82       	std	Y+1, r1	; 0x01
    301a:	34 c0       	rjmp	.+104    	; 0x3084 <BUTTON_init+0x88>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id,
				.direction = GPIO_INPUT, .logic = btn->internal_pullup_t};
    301c:	eb 81       	ldd	r30, Y+3	; 0x03
    301e:	fc 81       	ldd	r31, Y+4	; 0x04
    3020:	80 81       	ld	r24, Z
    3022:	28 2f       	mov	r18, r24
    3024:	23 70       	andi	r18, 0x03	; 3
    3026:	eb 81       	ldd	r30, Y+3	; 0x03
    3028:	fc 81       	ldd	r31, Y+4	; 0x04
    302a:	80 81       	ld	r24, Z
    302c:	98 2f       	mov	r25, r24
    302e:	96 95       	lsr	r25
    3030:	96 95       	lsr	r25
    3032:	97 70       	andi	r25, 0x07	; 7
    3034:	eb 81       	ldd	r30, Y+3	; 0x03
    3036:	fc 81       	ldd	r31, Y+4	; 0x04
    3038:	80 81       	ld	r24, Z
    303a:	38 2f       	mov	r19, r24
    303c:	32 95       	swap	r19
    303e:	36 95       	lsr	r19
    3040:	36 95       	lsr	r19
    3042:	33 70       	andi	r19, 0x03	; 3
    3044:	31 70       	andi	r19, 0x01	; 1
    3046:	1a 82       	std	Y+2, r1	; 0x02
    3048:	23 70       	andi	r18, 0x03	; 3
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	8c 7f       	andi	r24, 0xFC	; 252
    304e:	82 2b       	or	r24, r18
    3050:	8a 83       	std	Y+2, r24	; 0x02
    3052:	89 2f       	mov	r24, r25
    3054:	87 70       	andi	r24, 0x07	; 7
    3056:	98 2f       	mov	r25, r24
    3058:	99 0f       	add	r25, r25
    305a:	99 0f       	add	r25, r25
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	83 7e       	andi	r24, 0xE3	; 227
    3060:	89 2b       	or	r24, r25
    3062:	8a 83       	std	Y+2, r24	; 0x02
    3064:	83 2f       	mov	r24, r19
    3066:	81 70       	andi	r24, 0x01	; 1
    3068:	98 2f       	mov	r25, r24
    306a:	92 95       	swap	r25
    306c:	99 0f       	add	r25, r25
    306e:	99 0f       	add	r25, r25
    3070:	90 7c       	andi	r25, 0xC0	; 192
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	8f 7b       	andi	r24, 0xBF	; 191
    3076:	89 2b       	or	r24, r25
    3078:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&btn_pin);
    307a:	ce 01       	movw	r24, r28
    307c:	02 96       	adiw	r24, 0x02	; 2
    307e:	0e 94 7e 07 	call	0xefc	; 0xefc <GPIO_pinInit>
    3082:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    3084:	89 81       	ldd	r24, Y+1	; 0x01
}
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <BUTTON_read>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_read(const button_t *btn, uint8 *btn_state)
{
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	2b 97       	sbiw	r28, 0x0b	; 11
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	9d 83       	std	Y+5, r25	; 0x05
    30aa:	8c 83       	std	Y+4, r24	; 0x04
    30ac:	7f 83       	std	Y+7, r23	; 0x07
    30ae:	6e 83       	std	Y+6, r22	; 0x06
	STD_ReturnType error_status = E_OK;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_logic_t btn_pin_status;
	if(NULL == btn)
    30b4:	8c 81       	ldd	r24, Y+4	; 0x04
    30b6:	9d 81       	ldd	r25, Y+5	; 0x05
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	11 f4       	brne	.+4      	; 0x30c0 <BUTTON_read+0x2c>
	{
		error_status = E_NOT_OK;
    30bc:	19 82       	std	Y+1, r1	; 0x01
    30be:	51 c0       	rjmp	.+162    	; 0x3162 <BUTTON_read+0xce>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id};
    30c0:	ec 81       	ldd	r30, Y+4	; 0x04
    30c2:	fd 81       	ldd	r31, Y+5	; 0x05
    30c4:	80 81       	ld	r24, Z
    30c6:	28 2f       	mov	r18, r24
    30c8:	23 70       	andi	r18, 0x03	; 3
    30ca:	ec 81       	ldd	r30, Y+4	; 0x04
    30cc:	fd 81       	ldd	r31, Y+5	; 0x05
    30ce:	80 81       	ld	r24, Z
    30d0:	98 2f       	mov	r25, r24
    30d2:	96 95       	lsr	r25
    30d4:	96 95       	lsr	r25
    30d6:	97 70       	andi	r25, 0x07	; 7
    30d8:	1b 82       	std	Y+3, r1	; 0x03
    30da:	23 70       	andi	r18, 0x03	; 3
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	8c 7f       	andi	r24, 0xFC	; 252
    30e0:	82 2b       	or	r24, r18
    30e2:	8b 83       	std	Y+3, r24	; 0x03
    30e4:	89 2f       	mov	r24, r25
    30e6:	87 70       	andi	r24, 0x07	; 7
    30e8:	98 2f       	mov	r25, r24
    30ea:	99 0f       	add	r25, r25
    30ec:	99 0f       	add	r25, r25
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	83 7e       	andi	r24, 0xE3	; 227
    30f2:	89 2b       	or	r24, r25
    30f4:	8b 83       	std	Y+3, r24	; 0x03
		error_status = GPIO_pinRead(&btn_pin, &btn_pin_status);
    30f6:	ce 01       	movw	r24, r28
    30f8:	03 96       	adiw	r24, 0x03	; 3
    30fa:	9e 01       	movw	r18, r28
    30fc:	2e 5f       	subi	r18, 0xFE	; 254
    30fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3100:	b9 01       	movw	r22, r18
    3102:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_pinRead>
    3106:	89 83       	std	Y+1, r24	; 0x01
		switch(btn->button_active_t)
    3108:	ec 81       	ldd	r30, Y+4	; 0x04
    310a:	fd 81       	ldd	r31, Y+5	; 0x05
    310c:	80 81       	ld	r24, Z
    310e:	82 95       	swap	r24
    3110:	86 95       	lsr	r24
    3112:	87 70       	andi	r24, 0x07	; 7
    3114:	81 70       	andi	r24, 0x01	; 1
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	3a 87       	std	Y+10, r19	; 0x0a
    311c:	29 87       	std	Y+9, r18	; 0x09
    311e:	89 85       	ldd	r24, Y+9	; 0x09
    3120:	9a 85       	ldd	r25, Y+10	; 0x0a
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	31 f0       	breq	.+12     	; 0x3132 <BUTTON_read+0x9e>
    3126:	29 85       	ldd	r18, Y+9	; 0x09
    3128:	3a 85       	ldd	r19, Y+10	; 0x0a
    312a:	21 30       	cpi	r18, 0x01	; 1
    312c:	31 05       	cpc	r19, r1
    312e:	61 f0       	breq	.+24     	; 0x3148 <BUTTON_read+0xb4>
    3130:	17 c0       	rjmp	.+46     	; 0x3160 <BUTTON_read+0xcc>
		{
		case BUTTON_ACTIVE_HIGH:

			(*btn_state) = btn_pin_status == GPIO_HIGH ? BUTTON_PRESSED : BUTTON_RELEASED;
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	18 86       	std	Y+8, r1	; 0x08
    3136:	81 30       	cpi	r24, 0x01	; 1
    3138:	11 f0       	breq	.+4      	; 0x313e <BUTTON_read+0xaa>
    313a:	31 e0       	ldi	r19, 0x01	; 1
    313c:	38 87       	std	Y+8, r19	; 0x08
    313e:	ee 81       	ldd	r30, Y+6	; 0x06
    3140:	ff 81       	ldd	r31, Y+7	; 0x07
    3142:	88 85       	ldd	r24, Y+8	; 0x08
    3144:	80 83       	st	Z, r24
    3146:	0d c0       	rjmp	.+26     	; 0x3162 <BUTTON_read+0xce>
			break;

		case BUTTON_ACTIVE_LOW:

			(*btn_state) = btn_pin_status == GPIO_LOW ? BUTTON_PRESSED : BUTTON_RELEASED;
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	8b 87       	std	Y+11, r24	; 0x0b
    314c:	9b 85       	ldd	r25, Y+11	; 0x0b
    314e:	99 23       	and	r25, r25
    3150:	11 f0       	breq	.+4      	; 0x3156 <BUTTON_read+0xc2>
    3152:	21 e0       	ldi	r18, 0x01	; 1
    3154:	2b 87       	std	Y+11, r18	; 0x0b
    3156:	8b 85       	ldd	r24, Y+11	; 0x0b
    3158:	ee 81       	ldd	r30, Y+6	; 0x06
    315a:	ff 81       	ldd	r31, Y+7	; 0x07
    315c:	80 83       	st	Z, r24
    315e:	01 c0       	rjmp	.+2      	; 0x3162 <BUTTON_read+0xce>
			break;

		default:
			error_status = E_NOT_OK;
    3160:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    3162:	89 81       	ldd	r24, Y+1	; 0x01
}
    3164:	2b 96       	adiw	r28, 0x0b	; 11
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <main>:
		.data_pin[3].port_id = PORTA_ID,
		.data_pin[3].pin_id = PIN_6,

};
int main()
{
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	00 d0       	rcall	.+0      	; 0x317c <main+0x6>
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
	ADC_init(ADC_PRESCALER_128);
    3180:	87 e0       	ldi	r24, 0x07	; 7
    3182:	0e 94 c3 0b 	call	0x1786	; 0x1786 <ADC_init>
	LCD_init(&board_lcd);
    3186:	86 e9       	ldi	r24, 0x96	; 150
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_init>
	uint16 value;

	while(1)
	{
		ADC_readChannel(ADC_CHANNEL_0, &value);
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	9e 01       	movw	r18, r28
    3192:	2f 5f       	subi	r18, 0xFF	; 255
    3194:	3f 4f       	sbci	r19, 0xFF	; 255
    3196:	b9 01       	movw	r22, r18
    3198:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_readChannel>

		//LCD_4bit_clear(&board_lcd);
		if(value >= 1000)
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	23 e0       	ldi	r18, 0x03	; 3
    31a2:	88 3e       	cpi	r24, 0xE8	; 232
    31a4:	92 07       	cpc	r25, r18
    31a6:	90 f0       	brcs	.+36     	; 0x31cc <main+0x56>
		{
			LCD_setCursorLocation(&board_lcd, 1, 1);
    31a8:	86 e9       	ldi	r24, 0x96	; 150
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	61 e0       	ldi	r22, 0x01	; 1
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	0e 94 b3 14 	call	0x2966	; 0x2966 <LCD_setCursorLocation>
			LCD_sendNum(&board_lcd, value);
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	9c 01       	movw	r18, r24
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	50 e0       	ldi	r21, 0x00	; 0
    31be:	86 e9       	ldi	r24, 0x96	; 150
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	ba 01       	movw	r22, r20
    31c4:	a9 01       	movw	r20, r18
    31c6:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_sendNum>
    31ca:	e1 cf       	rjmp	.-62     	; 0x318e <main+0x18>
		}
		else if(value >= 100)
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	84 36       	cpi	r24, 0x64	; 100
    31d2:	91 05       	cpc	r25, r1
    31d4:	b8 f0       	brcs	.+46     	; 0x3204 <main+0x8e>
		{
			LCD_setCursorLocation(&board_lcd, 1, 1);
    31d6:	86 e9       	ldi	r24, 0x96	; 150
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	61 e0       	ldi	r22, 0x01	; 1
    31dc:	41 e0       	ldi	r20, 0x01	; 1
    31de:	0e 94 b3 14 	call	0x2966	; 0x2966 <LCD_setCursorLocation>
			LCD_sendNum(&board_lcd, value);
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	9c 01       	movw	r18, r24
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	86 e9       	ldi	r24, 0x96	; 150
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	ba 01       	movw	r22, r20
    31f2:	a9 01       	movw	r20, r18
    31f4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_sendNum>
			LCD_sendChar(&board_lcd, ' ');
    31f8:	86 e9       	ldi	r24, 0x96	; 150
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	60 e2       	ldi	r22, 0x20	; 32
    31fe:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendChar>
    3202:	c5 cf       	rjmp	.-118    	; 0x318e <main+0x18>
		}
		else
		{
		LCD_setCursorLocation(&board_lcd, 1, 1);
    3204:	86 e9       	ldi	r24, 0x96	; 150
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 b3 14 	call	0x2966	; 0x2966 <LCD_setCursorLocation>
		LCD_sendNum(&board_lcd, value);
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	9c 01       	movw	r18, r24
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	86 e9       	ldi	r24, 0x96	; 150
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	ba 01       	movw	r22, r20
    3220:	a9 01       	movw	r20, r18
    3222:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_sendNum>
		LCD_sendString(&board_lcd, "  ");
    3226:	86 e9       	ldi	r24, 0x96	; 150
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	23 e6       	ldi	r18, 0x63	; 99
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	b9 01       	movw	r22, r18
    3230:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_sendString>
    3234:	ac cf       	rjmp	.-168    	; 0x318e <main+0x18>

00003236 <__prologue_saves__>:
    3236:	2f 92       	push	r2
    3238:	3f 92       	push	r3
    323a:	4f 92       	push	r4
    323c:	5f 92       	push	r5
    323e:	6f 92       	push	r6
    3240:	7f 92       	push	r7
    3242:	8f 92       	push	r8
    3244:	9f 92       	push	r9
    3246:	af 92       	push	r10
    3248:	bf 92       	push	r11
    324a:	cf 92       	push	r12
    324c:	df 92       	push	r13
    324e:	ef 92       	push	r14
    3250:	ff 92       	push	r15
    3252:	0f 93       	push	r16
    3254:	1f 93       	push	r17
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	ca 1b       	sub	r28, r26
    3260:	db 0b       	sbc	r29, r27
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	09 94       	ijmp

0000326e <__epilogue_restores__>:
    326e:	2a 88       	ldd	r2, Y+18	; 0x12
    3270:	39 88       	ldd	r3, Y+17	; 0x11
    3272:	48 88       	ldd	r4, Y+16	; 0x10
    3274:	5f 84       	ldd	r5, Y+15	; 0x0f
    3276:	6e 84       	ldd	r6, Y+14	; 0x0e
    3278:	7d 84       	ldd	r7, Y+13	; 0x0d
    327a:	8c 84       	ldd	r8, Y+12	; 0x0c
    327c:	9b 84       	ldd	r9, Y+11	; 0x0b
    327e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3280:	b9 84       	ldd	r11, Y+9	; 0x09
    3282:	c8 84       	ldd	r12, Y+8	; 0x08
    3284:	df 80       	ldd	r13, Y+7	; 0x07
    3286:	ee 80       	ldd	r14, Y+6	; 0x06
    3288:	fd 80       	ldd	r15, Y+5	; 0x05
    328a:	0c 81       	ldd	r16, Y+4	; 0x04
    328c:	1b 81       	ldd	r17, Y+3	; 0x03
    328e:	aa 81       	ldd	r26, Y+2	; 0x02
    3290:	b9 81       	ldd	r27, Y+1	; 0x01
    3292:	ce 0f       	add	r28, r30
    3294:	d1 1d       	adc	r29, r1
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	ed 01       	movw	r28, r26
    32a2:	08 95       	ret

000032a4 <sprintf>:
    32a4:	ae e0       	ldi	r26, 0x0E	; 14
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e8 e5       	ldi	r30, 0x58	; 88
    32aa:	f9 e1       	ldi	r31, 0x19	; 25
    32ac:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x1c>
    32b0:	0d 89       	ldd	r16, Y+21	; 0x15
    32b2:	1e 89       	ldd	r17, Y+22	; 0x16
    32b4:	86 e0       	ldi	r24, 0x06	; 6
    32b6:	8c 83       	std	Y+4, r24	; 0x04
    32b8:	1a 83       	std	Y+2, r17	; 0x02
    32ba:	09 83       	std	Y+1, r16	; 0x01
    32bc:	8f ef       	ldi	r24, 0xFF	; 255
    32be:	9f e7       	ldi	r25, 0x7F	; 127
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	9e 01       	movw	r18, r28
    32c6:	27 5e       	subi	r18, 0xE7	; 231
    32c8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ca:	ce 01       	movw	r24, r28
    32cc:	01 96       	adiw	r24, 0x01	; 1
    32ce:	6f 89       	ldd	r22, Y+23	; 0x17
    32d0:	78 8d       	ldd	r23, Y+24	; 0x18
    32d2:	a9 01       	movw	r20, r18
    32d4:	0e 94 76 19 	call	0x32ec	; 0x32ec <vfprintf>
    32d8:	2f 81       	ldd	r18, Y+7	; 0x07
    32da:	38 85       	ldd	r19, Y+8	; 0x08
    32dc:	02 0f       	add	r16, r18
    32de:	13 1f       	adc	r17, r19
    32e0:	f8 01       	movw	r30, r16
    32e2:	10 82       	st	Z, r1
    32e4:	2e 96       	adiw	r28, 0x0e	; 14
    32e6:	e4 e0       	ldi	r30, 0x04	; 4
    32e8:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x1c>

000032ec <vfprintf>:
    32ec:	ab e0       	ldi	r26, 0x0B	; 11
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	ec e7       	ldi	r30, 0x7C	; 124
    32f2:	f9 e1       	ldi	r31, 0x19	; 25
    32f4:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__prologue_saves__>
    32f8:	3c 01       	movw	r6, r24
    32fa:	2b 01       	movw	r4, r22
    32fc:	5a 01       	movw	r10, r20
    32fe:	fc 01       	movw	r30, r24
    3300:	17 82       	std	Z+7, r1	; 0x07
    3302:	16 82       	std	Z+6, r1	; 0x06
    3304:	83 81       	ldd	r24, Z+3	; 0x03
    3306:	81 fd       	sbrc	r24, 1
    3308:	03 c0       	rjmp	.+6      	; 0x3310 <vfprintf+0x24>
    330a:	6f ef       	ldi	r22, 0xFF	; 255
    330c:	7f ef       	ldi	r23, 0xFF	; 255
    330e:	c6 c1       	rjmp	.+908    	; 0x369c <vfprintf+0x3b0>
    3310:	9a e0       	ldi	r25, 0x0A	; 10
    3312:	89 2e       	mov	r8, r25
    3314:	1e 01       	movw	r2, r28
    3316:	08 94       	sec
    3318:	21 1c       	adc	r2, r1
    331a:	31 1c       	adc	r3, r1
    331c:	f3 01       	movw	r30, r6
    331e:	23 81       	ldd	r18, Z+3	; 0x03
    3320:	f2 01       	movw	r30, r4
    3322:	23 fd       	sbrc	r18, 3
    3324:	85 91       	lpm	r24, Z+
    3326:	23 ff       	sbrs	r18, 3
    3328:	81 91       	ld	r24, Z+
    332a:	2f 01       	movw	r4, r30
    332c:	88 23       	and	r24, r24
    332e:	09 f4       	brne	.+2      	; 0x3332 <vfprintf+0x46>
    3330:	b2 c1       	rjmp	.+868    	; 0x3696 <vfprintf+0x3aa>
    3332:	85 32       	cpi	r24, 0x25	; 37
    3334:	39 f4       	brne	.+14     	; 0x3344 <vfprintf+0x58>
    3336:	23 fd       	sbrc	r18, 3
    3338:	85 91       	lpm	r24, Z+
    333a:	23 ff       	sbrs	r18, 3
    333c:	81 91       	ld	r24, Z+
    333e:	2f 01       	movw	r4, r30
    3340:	85 32       	cpi	r24, 0x25	; 37
    3342:	29 f4       	brne	.+10     	; 0x334e <vfprintf+0x62>
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	b3 01       	movw	r22, r6
    3348:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    334c:	e7 cf       	rjmp	.-50     	; 0x331c <vfprintf+0x30>
    334e:	98 2f       	mov	r25, r24
    3350:	ff 24       	eor	r15, r15
    3352:	ee 24       	eor	r14, r14
    3354:	99 24       	eor	r9, r9
    3356:	ff e1       	ldi	r31, 0x1F	; 31
    3358:	ff 15       	cp	r31, r15
    335a:	d0 f0       	brcs	.+52     	; 0x3390 <vfprintf+0xa4>
    335c:	9b 32       	cpi	r25, 0x2B	; 43
    335e:	69 f0       	breq	.+26     	; 0x337a <vfprintf+0x8e>
    3360:	9c 32       	cpi	r25, 0x2C	; 44
    3362:	28 f4       	brcc	.+10     	; 0x336e <vfprintf+0x82>
    3364:	90 32       	cpi	r25, 0x20	; 32
    3366:	59 f0       	breq	.+22     	; 0x337e <vfprintf+0x92>
    3368:	93 32       	cpi	r25, 0x23	; 35
    336a:	91 f4       	brne	.+36     	; 0x3390 <vfprintf+0xa4>
    336c:	0e c0       	rjmp	.+28     	; 0x338a <vfprintf+0x9e>
    336e:	9d 32       	cpi	r25, 0x2D	; 45
    3370:	49 f0       	breq	.+18     	; 0x3384 <vfprintf+0x98>
    3372:	90 33       	cpi	r25, 0x30	; 48
    3374:	69 f4       	brne	.+26     	; 0x3390 <vfprintf+0xa4>
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	24 c0       	rjmp	.+72     	; 0x33c2 <vfprintf+0xd6>
    337a:	52 e0       	ldi	r21, 0x02	; 2
    337c:	f5 2a       	or	r15, r21
    337e:	84 e0       	ldi	r24, 0x04	; 4
    3380:	f8 2a       	or	r15, r24
    3382:	28 c0       	rjmp	.+80     	; 0x33d4 <vfprintf+0xe8>
    3384:	98 e0       	ldi	r25, 0x08	; 8
    3386:	f9 2a       	or	r15, r25
    3388:	25 c0       	rjmp	.+74     	; 0x33d4 <vfprintf+0xe8>
    338a:	e0 e1       	ldi	r30, 0x10	; 16
    338c:	fe 2a       	or	r15, r30
    338e:	22 c0       	rjmp	.+68     	; 0x33d4 <vfprintf+0xe8>
    3390:	f7 fc       	sbrc	r15, 7
    3392:	29 c0       	rjmp	.+82     	; 0x33e6 <vfprintf+0xfa>
    3394:	89 2f       	mov	r24, r25
    3396:	80 53       	subi	r24, 0x30	; 48
    3398:	8a 30       	cpi	r24, 0x0A	; 10
    339a:	70 f4       	brcc	.+28     	; 0x33b8 <vfprintf+0xcc>
    339c:	f6 fe       	sbrs	r15, 6
    339e:	05 c0       	rjmp	.+10     	; 0x33aa <vfprintf+0xbe>
    33a0:	98 9c       	mul	r9, r8
    33a2:	90 2c       	mov	r9, r0
    33a4:	11 24       	eor	r1, r1
    33a6:	98 0e       	add	r9, r24
    33a8:	15 c0       	rjmp	.+42     	; 0x33d4 <vfprintf+0xe8>
    33aa:	e8 9c       	mul	r14, r8
    33ac:	e0 2c       	mov	r14, r0
    33ae:	11 24       	eor	r1, r1
    33b0:	e8 0e       	add	r14, r24
    33b2:	f0 e2       	ldi	r31, 0x20	; 32
    33b4:	ff 2a       	or	r15, r31
    33b6:	0e c0       	rjmp	.+28     	; 0x33d4 <vfprintf+0xe8>
    33b8:	9e 32       	cpi	r25, 0x2E	; 46
    33ba:	29 f4       	brne	.+10     	; 0x33c6 <vfprintf+0xda>
    33bc:	f6 fc       	sbrc	r15, 6
    33be:	6b c1       	rjmp	.+726    	; 0x3696 <vfprintf+0x3aa>
    33c0:	40 e4       	ldi	r20, 0x40	; 64
    33c2:	f4 2a       	or	r15, r20
    33c4:	07 c0       	rjmp	.+14     	; 0x33d4 <vfprintf+0xe8>
    33c6:	9c 36       	cpi	r25, 0x6C	; 108
    33c8:	19 f4       	brne	.+6      	; 0x33d0 <vfprintf+0xe4>
    33ca:	50 e8       	ldi	r21, 0x80	; 128
    33cc:	f5 2a       	or	r15, r21
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <vfprintf+0xe8>
    33d0:	98 36       	cpi	r25, 0x68	; 104
    33d2:	49 f4       	brne	.+18     	; 0x33e6 <vfprintf+0xfa>
    33d4:	f2 01       	movw	r30, r4
    33d6:	23 fd       	sbrc	r18, 3
    33d8:	95 91       	lpm	r25, Z+
    33da:	23 ff       	sbrs	r18, 3
    33dc:	91 91       	ld	r25, Z+
    33de:	2f 01       	movw	r4, r30
    33e0:	99 23       	and	r25, r25
    33e2:	09 f0       	breq	.+2      	; 0x33e6 <vfprintf+0xfa>
    33e4:	b8 cf       	rjmp	.-144    	; 0x3356 <vfprintf+0x6a>
    33e6:	89 2f       	mov	r24, r25
    33e8:	85 54       	subi	r24, 0x45	; 69
    33ea:	83 30       	cpi	r24, 0x03	; 3
    33ec:	18 f0       	brcs	.+6      	; 0x33f4 <vfprintf+0x108>
    33ee:	80 52       	subi	r24, 0x20	; 32
    33f0:	83 30       	cpi	r24, 0x03	; 3
    33f2:	38 f4       	brcc	.+14     	; 0x3402 <vfprintf+0x116>
    33f4:	44 e0       	ldi	r20, 0x04	; 4
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	a4 0e       	add	r10, r20
    33fa:	b5 1e       	adc	r11, r21
    33fc:	5f e3       	ldi	r21, 0x3F	; 63
    33fe:	59 83       	std	Y+1, r21	; 0x01
    3400:	0f c0       	rjmp	.+30     	; 0x3420 <vfprintf+0x134>
    3402:	93 36       	cpi	r25, 0x63	; 99
    3404:	31 f0       	breq	.+12     	; 0x3412 <vfprintf+0x126>
    3406:	93 37       	cpi	r25, 0x73	; 115
    3408:	79 f0       	breq	.+30     	; 0x3428 <vfprintf+0x13c>
    340a:	93 35       	cpi	r25, 0x53	; 83
    340c:	09 f0       	breq	.+2      	; 0x3410 <vfprintf+0x124>
    340e:	56 c0       	rjmp	.+172    	; 0x34bc <vfprintf+0x1d0>
    3410:	20 c0       	rjmp	.+64     	; 0x3452 <vfprintf+0x166>
    3412:	f5 01       	movw	r30, r10
    3414:	80 81       	ld	r24, Z
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	42 e0       	ldi	r20, 0x02	; 2
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	a4 0e       	add	r10, r20
    341e:	b5 1e       	adc	r11, r21
    3420:	61 01       	movw	r12, r2
    3422:	01 e0       	ldi	r16, 0x01	; 1
    3424:	10 e0       	ldi	r17, 0x00	; 0
    3426:	12 c0       	rjmp	.+36     	; 0x344c <vfprintf+0x160>
    3428:	f5 01       	movw	r30, r10
    342a:	c0 80       	ld	r12, Z
    342c:	d1 80       	ldd	r13, Z+1	; 0x01
    342e:	f6 fc       	sbrc	r15, 6
    3430:	03 c0       	rjmp	.+6      	; 0x3438 <vfprintf+0x14c>
    3432:	6f ef       	ldi	r22, 0xFF	; 255
    3434:	7f ef       	ldi	r23, 0xFF	; 255
    3436:	02 c0       	rjmp	.+4      	; 0x343c <vfprintf+0x150>
    3438:	69 2d       	mov	r22, r9
    343a:	70 e0       	ldi	r23, 0x00	; 0
    343c:	42 e0       	ldi	r20, 0x02	; 2
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	a4 0e       	add	r10, r20
    3442:	b5 1e       	adc	r11, r21
    3444:	c6 01       	movw	r24, r12
    3446:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <strnlen>
    344a:	8c 01       	movw	r16, r24
    344c:	5f e7       	ldi	r21, 0x7F	; 127
    344e:	f5 22       	and	r15, r21
    3450:	14 c0       	rjmp	.+40     	; 0x347a <vfprintf+0x18e>
    3452:	f5 01       	movw	r30, r10
    3454:	c0 80       	ld	r12, Z
    3456:	d1 80       	ldd	r13, Z+1	; 0x01
    3458:	f6 fc       	sbrc	r15, 6
    345a:	03 c0       	rjmp	.+6      	; 0x3462 <vfprintf+0x176>
    345c:	6f ef       	ldi	r22, 0xFF	; 255
    345e:	7f ef       	ldi	r23, 0xFF	; 255
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <vfprintf+0x17a>
    3462:	69 2d       	mov	r22, r9
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	42 e0       	ldi	r20, 0x02	; 2
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	a4 0e       	add	r10, r20
    346c:	b5 1e       	adc	r11, r21
    346e:	c6 01       	movw	r24, r12
    3470:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <strnlen_P>
    3474:	8c 01       	movw	r16, r24
    3476:	50 e8       	ldi	r21, 0x80	; 128
    3478:	f5 2a       	or	r15, r21
    347a:	f3 fe       	sbrs	r15, 3
    347c:	07 c0       	rjmp	.+14     	; 0x348c <vfprintf+0x1a0>
    347e:	1a c0       	rjmp	.+52     	; 0x34b4 <vfprintf+0x1c8>
    3480:	80 e2       	ldi	r24, 0x20	; 32
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	b3 01       	movw	r22, r6
    3486:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    348a:	ea 94       	dec	r14
    348c:	8e 2d       	mov	r24, r14
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	08 17       	cp	r16, r24
    3492:	19 07       	cpc	r17, r25
    3494:	a8 f3       	brcs	.-22     	; 0x3480 <vfprintf+0x194>
    3496:	0e c0       	rjmp	.+28     	; 0x34b4 <vfprintf+0x1c8>
    3498:	f6 01       	movw	r30, r12
    349a:	f7 fc       	sbrc	r15, 7
    349c:	85 91       	lpm	r24, Z+
    349e:	f7 fe       	sbrs	r15, 7
    34a0:	81 91       	ld	r24, Z+
    34a2:	6f 01       	movw	r12, r30
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	b3 01       	movw	r22, r6
    34a8:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    34ac:	e1 10       	cpse	r14, r1
    34ae:	ea 94       	dec	r14
    34b0:	01 50       	subi	r16, 0x01	; 1
    34b2:	10 40       	sbci	r17, 0x00	; 0
    34b4:	01 15       	cp	r16, r1
    34b6:	11 05       	cpc	r17, r1
    34b8:	79 f7       	brne	.-34     	; 0x3498 <vfprintf+0x1ac>
    34ba:	ea c0       	rjmp	.+468    	; 0x3690 <vfprintf+0x3a4>
    34bc:	94 36       	cpi	r25, 0x64	; 100
    34be:	11 f0       	breq	.+4      	; 0x34c4 <vfprintf+0x1d8>
    34c0:	99 36       	cpi	r25, 0x69	; 105
    34c2:	69 f5       	brne	.+90     	; 0x351e <vfprintf+0x232>
    34c4:	f7 fe       	sbrs	r15, 7
    34c6:	08 c0       	rjmp	.+16     	; 0x34d8 <vfprintf+0x1ec>
    34c8:	f5 01       	movw	r30, r10
    34ca:	20 81       	ld	r18, Z
    34cc:	31 81       	ldd	r19, Z+1	; 0x01
    34ce:	42 81       	ldd	r20, Z+2	; 0x02
    34d0:	53 81       	ldd	r21, Z+3	; 0x03
    34d2:	84 e0       	ldi	r24, 0x04	; 4
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	0a c0       	rjmp	.+20     	; 0x34ec <vfprintf+0x200>
    34d8:	f5 01       	movw	r30, r10
    34da:	80 81       	ld	r24, Z
    34dc:	91 81       	ldd	r25, Z+1	; 0x01
    34de:	9c 01       	movw	r18, r24
    34e0:	44 27       	eor	r20, r20
    34e2:	37 fd       	sbrc	r19, 7
    34e4:	40 95       	com	r20
    34e6:	54 2f       	mov	r21, r20
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a8 0e       	add	r10, r24
    34ee:	b9 1e       	adc	r11, r25
    34f0:	9f e6       	ldi	r25, 0x6F	; 111
    34f2:	f9 22       	and	r15, r25
    34f4:	57 ff       	sbrs	r21, 7
    34f6:	09 c0       	rjmp	.+18     	; 0x350a <vfprintf+0x21e>
    34f8:	50 95       	com	r21
    34fa:	40 95       	com	r20
    34fc:	30 95       	com	r19
    34fe:	21 95       	neg	r18
    3500:	3f 4f       	sbci	r19, 0xFF	; 255
    3502:	4f 4f       	sbci	r20, 0xFF	; 255
    3504:	5f 4f       	sbci	r21, 0xFF	; 255
    3506:	e0 e8       	ldi	r30, 0x80	; 128
    3508:	fe 2a       	or	r15, r30
    350a:	ca 01       	movw	r24, r20
    350c:	b9 01       	movw	r22, r18
    350e:	a1 01       	movw	r20, r2
    3510:	2a e0       	ldi	r18, 0x0A	; 10
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	0e 94 95 1b 	call	0x372a	; 0x372a <__ultoa_invert>
    3518:	d8 2e       	mov	r13, r24
    351a:	d2 18       	sub	r13, r2
    351c:	40 c0       	rjmp	.+128    	; 0x359e <vfprintf+0x2b2>
    351e:	95 37       	cpi	r25, 0x75	; 117
    3520:	29 f4       	brne	.+10     	; 0x352c <vfprintf+0x240>
    3522:	1f 2d       	mov	r17, r15
    3524:	1f 7e       	andi	r17, 0xEF	; 239
    3526:	2a e0       	ldi	r18, 0x0A	; 10
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	1d c0       	rjmp	.+58     	; 0x3566 <vfprintf+0x27a>
    352c:	1f 2d       	mov	r17, r15
    352e:	19 7f       	andi	r17, 0xF9	; 249
    3530:	9f 36       	cpi	r25, 0x6F	; 111
    3532:	61 f0       	breq	.+24     	; 0x354c <vfprintf+0x260>
    3534:	90 37       	cpi	r25, 0x70	; 112
    3536:	20 f4       	brcc	.+8      	; 0x3540 <vfprintf+0x254>
    3538:	98 35       	cpi	r25, 0x58	; 88
    353a:	09 f0       	breq	.+2      	; 0x353e <vfprintf+0x252>
    353c:	ac c0       	rjmp	.+344    	; 0x3696 <vfprintf+0x3aa>
    353e:	0f c0       	rjmp	.+30     	; 0x355e <vfprintf+0x272>
    3540:	90 37       	cpi	r25, 0x70	; 112
    3542:	39 f0       	breq	.+14     	; 0x3552 <vfprintf+0x266>
    3544:	98 37       	cpi	r25, 0x78	; 120
    3546:	09 f0       	breq	.+2      	; 0x354a <vfprintf+0x25e>
    3548:	a6 c0       	rjmp	.+332    	; 0x3696 <vfprintf+0x3aa>
    354a:	04 c0       	rjmp	.+8      	; 0x3554 <vfprintf+0x268>
    354c:	28 e0       	ldi	r18, 0x08	; 8
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	0a c0       	rjmp	.+20     	; 0x3566 <vfprintf+0x27a>
    3552:	10 61       	ori	r17, 0x10	; 16
    3554:	14 fd       	sbrc	r17, 4
    3556:	14 60       	ori	r17, 0x04	; 4
    3558:	20 e1       	ldi	r18, 0x10	; 16
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	04 c0       	rjmp	.+8      	; 0x3566 <vfprintf+0x27a>
    355e:	14 fd       	sbrc	r17, 4
    3560:	16 60       	ori	r17, 0x06	; 6
    3562:	20 e1       	ldi	r18, 0x10	; 16
    3564:	32 e0       	ldi	r19, 0x02	; 2
    3566:	17 ff       	sbrs	r17, 7
    3568:	08 c0       	rjmp	.+16     	; 0x357a <vfprintf+0x28e>
    356a:	f5 01       	movw	r30, r10
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	44 e0       	ldi	r20, 0x04	; 4
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	08 c0       	rjmp	.+16     	; 0x358a <vfprintf+0x29e>
    357a:	f5 01       	movw	r30, r10
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	bc 01       	movw	r22, r24
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	42 e0       	ldi	r20, 0x02	; 2
    3588:	50 e0       	ldi	r21, 0x00	; 0
    358a:	a4 0e       	add	r10, r20
    358c:	b5 1e       	adc	r11, r21
    358e:	a1 01       	movw	r20, r2
    3590:	0e 94 95 1b 	call	0x372a	; 0x372a <__ultoa_invert>
    3594:	d8 2e       	mov	r13, r24
    3596:	d2 18       	sub	r13, r2
    3598:	8f e7       	ldi	r24, 0x7F	; 127
    359a:	f8 2e       	mov	r15, r24
    359c:	f1 22       	and	r15, r17
    359e:	f6 fe       	sbrs	r15, 6
    35a0:	0b c0       	rjmp	.+22     	; 0x35b8 <vfprintf+0x2cc>
    35a2:	5e ef       	ldi	r21, 0xFE	; 254
    35a4:	f5 22       	and	r15, r21
    35a6:	d9 14       	cp	r13, r9
    35a8:	38 f4       	brcc	.+14     	; 0x35b8 <vfprintf+0x2cc>
    35aa:	f4 fe       	sbrs	r15, 4
    35ac:	07 c0       	rjmp	.+14     	; 0x35bc <vfprintf+0x2d0>
    35ae:	f2 fc       	sbrc	r15, 2
    35b0:	05 c0       	rjmp	.+10     	; 0x35bc <vfprintf+0x2d0>
    35b2:	8f ee       	ldi	r24, 0xEF	; 239
    35b4:	f8 22       	and	r15, r24
    35b6:	02 c0       	rjmp	.+4      	; 0x35bc <vfprintf+0x2d0>
    35b8:	1d 2d       	mov	r17, r13
    35ba:	01 c0       	rjmp	.+2      	; 0x35be <vfprintf+0x2d2>
    35bc:	19 2d       	mov	r17, r9
    35be:	f4 fe       	sbrs	r15, 4
    35c0:	0d c0       	rjmp	.+26     	; 0x35dc <vfprintf+0x2f0>
    35c2:	fe 01       	movw	r30, r28
    35c4:	ed 0d       	add	r30, r13
    35c6:	f1 1d       	adc	r31, r1
    35c8:	80 81       	ld	r24, Z
    35ca:	80 33       	cpi	r24, 0x30	; 48
    35cc:	19 f4       	brne	.+6      	; 0x35d4 <vfprintf+0x2e8>
    35ce:	99 ee       	ldi	r25, 0xE9	; 233
    35d0:	f9 22       	and	r15, r25
    35d2:	08 c0       	rjmp	.+16     	; 0x35e4 <vfprintf+0x2f8>
    35d4:	1f 5f       	subi	r17, 0xFF	; 255
    35d6:	f2 fe       	sbrs	r15, 2
    35d8:	05 c0       	rjmp	.+10     	; 0x35e4 <vfprintf+0x2f8>
    35da:	03 c0       	rjmp	.+6      	; 0x35e2 <vfprintf+0x2f6>
    35dc:	8f 2d       	mov	r24, r15
    35de:	86 78       	andi	r24, 0x86	; 134
    35e0:	09 f0       	breq	.+2      	; 0x35e4 <vfprintf+0x2f8>
    35e2:	1f 5f       	subi	r17, 0xFF	; 255
    35e4:	0f 2d       	mov	r16, r15
    35e6:	f3 fc       	sbrc	r15, 3
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <vfprintf+0x326>
    35ea:	f0 fe       	sbrs	r15, 0
    35ec:	0f c0       	rjmp	.+30     	; 0x360c <vfprintf+0x320>
    35ee:	1e 15       	cp	r17, r14
    35f0:	10 f0       	brcs	.+4      	; 0x35f6 <vfprintf+0x30a>
    35f2:	9d 2c       	mov	r9, r13
    35f4:	0b c0       	rjmp	.+22     	; 0x360c <vfprintf+0x320>
    35f6:	9d 2c       	mov	r9, r13
    35f8:	9e 0c       	add	r9, r14
    35fa:	91 1a       	sub	r9, r17
    35fc:	1e 2d       	mov	r17, r14
    35fe:	06 c0       	rjmp	.+12     	; 0x360c <vfprintf+0x320>
    3600:	80 e2       	ldi	r24, 0x20	; 32
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	b3 01       	movw	r22, r6
    3606:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    360a:	1f 5f       	subi	r17, 0xFF	; 255
    360c:	1e 15       	cp	r17, r14
    360e:	c0 f3       	brcs	.-16     	; 0x3600 <vfprintf+0x314>
    3610:	04 c0       	rjmp	.+8      	; 0x361a <vfprintf+0x32e>
    3612:	1e 15       	cp	r17, r14
    3614:	10 f4       	brcc	.+4      	; 0x361a <vfprintf+0x32e>
    3616:	e1 1a       	sub	r14, r17
    3618:	01 c0       	rjmp	.+2      	; 0x361c <vfprintf+0x330>
    361a:	ee 24       	eor	r14, r14
    361c:	04 ff       	sbrs	r16, 4
    361e:	0f c0       	rjmp	.+30     	; 0x363e <vfprintf+0x352>
    3620:	80 e3       	ldi	r24, 0x30	; 48
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	b3 01       	movw	r22, r6
    3626:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    362a:	02 ff       	sbrs	r16, 2
    362c:	1d c0       	rjmp	.+58     	; 0x3668 <vfprintf+0x37c>
    362e:	01 fd       	sbrc	r16, 1
    3630:	03 c0       	rjmp	.+6      	; 0x3638 <vfprintf+0x34c>
    3632:	88 e7       	ldi	r24, 0x78	; 120
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0e c0       	rjmp	.+28     	; 0x3654 <vfprintf+0x368>
    3638:	88 e5       	ldi	r24, 0x58	; 88
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	0b c0       	rjmp	.+22     	; 0x3654 <vfprintf+0x368>
    363e:	80 2f       	mov	r24, r16
    3640:	86 78       	andi	r24, 0x86	; 134
    3642:	91 f0       	breq	.+36     	; 0x3668 <vfprintf+0x37c>
    3644:	01 ff       	sbrs	r16, 1
    3646:	02 c0       	rjmp	.+4      	; 0x364c <vfprintf+0x360>
    3648:	8b e2       	ldi	r24, 0x2B	; 43
    364a:	01 c0       	rjmp	.+2      	; 0x364e <vfprintf+0x362>
    364c:	80 e2       	ldi	r24, 0x20	; 32
    364e:	f7 fc       	sbrc	r15, 7
    3650:	8d e2       	ldi	r24, 0x2D	; 45
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	b3 01       	movw	r22, r6
    3656:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    365a:	06 c0       	rjmp	.+12     	; 0x3668 <vfprintf+0x37c>
    365c:	80 e3       	ldi	r24, 0x30	; 48
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	b3 01       	movw	r22, r6
    3662:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    3666:	9a 94       	dec	r9
    3668:	d9 14       	cp	r13, r9
    366a:	c0 f3       	brcs	.-16     	; 0x365c <vfprintf+0x370>
    366c:	da 94       	dec	r13
    366e:	f1 01       	movw	r30, r2
    3670:	ed 0d       	add	r30, r13
    3672:	f1 1d       	adc	r31, r1
    3674:	80 81       	ld	r24, Z
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	b3 01       	movw	r22, r6
    367a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    367e:	dd 20       	and	r13, r13
    3680:	a9 f7       	brne	.-22     	; 0x366c <vfprintf+0x380>
    3682:	06 c0       	rjmp	.+12     	; 0x3690 <vfprintf+0x3a4>
    3684:	80 e2       	ldi	r24, 0x20	; 32
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	b3 01       	movw	r22, r6
    368a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <fputc>
    368e:	ea 94       	dec	r14
    3690:	ee 20       	and	r14, r14
    3692:	c1 f7       	brne	.-16     	; 0x3684 <vfprintf+0x398>
    3694:	43 ce       	rjmp	.-890    	; 0x331c <vfprintf+0x30>
    3696:	f3 01       	movw	r30, r6
    3698:	66 81       	ldd	r22, Z+6	; 0x06
    369a:	77 81       	ldd	r23, Z+7	; 0x07
    369c:	cb 01       	movw	r24, r22
    369e:	2b 96       	adiw	r28, 0x0b	; 11
    36a0:	e2 e1       	ldi	r30, 0x12	; 18
    36a2:	0c 94 37 19 	jmp	0x326e	; 0x326e <__epilogue_restores__>

000036a6 <strnlen_P>:
    36a6:	fc 01       	movw	r30, r24
    36a8:	05 90       	lpm	r0, Z+
    36aa:	61 50       	subi	r22, 0x01	; 1
    36ac:	70 40       	sbci	r23, 0x00	; 0
    36ae:	01 10       	cpse	r0, r1
    36b0:	d8 f7       	brcc	.-10     	; 0x36a8 <strnlen_P+0x2>
    36b2:	80 95       	com	r24
    36b4:	90 95       	com	r25
    36b6:	8e 0f       	add	r24, r30
    36b8:	9f 1f       	adc	r25, r31
    36ba:	08 95       	ret

000036bc <strnlen>:
    36bc:	fc 01       	movw	r30, r24
    36be:	61 50       	subi	r22, 0x01	; 1
    36c0:	70 40       	sbci	r23, 0x00	; 0
    36c2:	01 90       	ld	r0, Z+
    36c4:	01 10       	cpse	r0, r1
    36c6:	d8 f7       	brcc	.-10     	; 0x36be <strnlen+0x2>
    36c8:	80 95       	com	r24
    36ca:	90 95       	com	r25
    36cc:	8e 0f       	add	r24, r30
    36ce:	9f 1f       	adc	r25, r31
    36d0:	08 95       	ret

000036d2 <fputc>:
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
    36da:	8c 01       	movw	r16, r24
    36dc:	eb 01       	movw	r28, r22
    36de:	8b 81       	ldd	r24, Y+3	; 0x03
    36e0:	81 ff       	sbrs	r24, 1
    36e2:	1b c0       	rjmp	.+54     	; 0x371a <fputc+0x48>
    36e4:	82 ff       	sbrs	r24, 2
    36e6:	0d c0       	rjmp	.+26     	; 0x3702 <fputc+0x30>
    36e8:	2e 81       	ldd	r18, Y+6	; 0x06
    36ea:	3f 81       	ldd	r19, Y+7	; 0x07
    36ec:	8c 81       	ldd	r24, Y+4	; 0x04
    36ee:	9d 81       	ldd	r25, Y+5	; 0x05
    36f0:	28 17       	cp	r18, r24
    36f2:	39 07       	cpc	r19, r25
    36f4:	64 f4       	brge	.+24     	; 0x370e <fputc+0x3c>
    36f6:	e8 81       	ld	r30, Y
    36f8:	f9 81       	ldd	r31, Y+1	; 0x01
    36fa:	01 93       	st	Z+, r16
    36fc:	f9 83       	std	Y+1, r31	; 0x01
    36fe:	e8 83       	st	Y, r30
    3700:	06 c0       	rjmp	.+12     	; 0x370e <fputc+0x3c>
    3702:	e8 85       	ldd	r30, Y+8	; 0x08
    3704:	f9 85       	ldd	r31, Y+9	; 0x09
    3706:	80 2f       	mov	r24, r16
    3708:	09 95       	icall
    370a:	89 2b       	or	r24, r25
    370c:	31 f4       	brne	.+12     	; 0x371a <fputc+0x48>
    370e:	8e 81       	ldd	r24, Y+6	; 0x06
    3710:	9f 81       	ldd	r25, Y+7	; 0x07
    3712:	01 96       	adiw	r24, 0x01	; 1
    3714:	9f 83       	std	Y+7, r25	; 0x07
    3716:	8e 83       	std	Y+6, r24	; 0x06
    3718:	02 c0       	rjmp	.+4      	; 0x371e <fputc+0x4c>
    371a:	0f ef       	ldi	r16, 0xFF	; 255
    371c:	1f ef       	ldi	r17, 0xFF	; 255
    371e:	c8 01       	movw	r24, r16
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	08 95       	ret

0000372a <__ultoa_invert>:
    372a:	fa 01       	movw	r30, r20
    372c:	aa 27       	eor	r26, r26
    372e:	28 30       	cpi	r18, 0x08	; 8
    3730:	51 f1       	breq	.+84     	; 0x3786 <__ultoa_invert+0x5c>
    3732:	20 31       	cpi	r18, 0x10	; 16
    3734:	81 f1       	breq	.+96     	; 0x3796 <__ultoa_invert+0x6c>
    3736:	e8 94       	clt
    3738:	6f 93       	push	r22
    373a:	6e 7f       	andi	r22, 0xFE	; 254
    373c:	6e 5f       	subi	r22, 0xFE	; 254
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	8f 4f       	sbci	r24, 0xFF	; 255
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	af 4f       	sbci	r26, 0xFF	; 255
    3746:	b1 e0       	ldi	r27, 0x01	; 1
    3748:	3e d0       	rcall	.+124    	; 0x37c6 <__ultoa_invert+0x9c>
    374a:	b4 e0       	ldi	r27, 0x04	; 4
    374c:	3c d0       	rcall	.+120    	; 0x37c6 <__ultoa_invert+0x9c>
    374e:	67 0f       	add	r22, r23
    3750:	78 1f       	adc	r23, r24
    3752:	89 1f       	adc	r24, r25
    3754:	9a 1f       	adc	r25, r26
    3756:	a1 1d       	adc	r26, r1
    3758:	68 0f       	add	r22, r24
    375a:	79 1f       	adc	r23, r25
    375c:	8a 1f       	adc	r24, r26
    375e:	91 1d       	adc	r25, r1
    3760:	a1 1d       	adc	r26, r1
    3762:	6a 0f       	add	r22, r26
    3764:	71 1d       	adc	r23, r1
    3766:	81 1d       	adc	r24, r1
    3768:	91 1d       	adc	r25, r1
    376a:	a1 1d       	adc	r26, r1
    376c:	20 d0       	rcall	.+64     	; 0x37ae <__ultoa_invert+0x84>
    376e:	09 f4       	brne	.+2      	; 0x3772 <__ultoa_invert+0x48>
    3770:	68 94       	set
    3772:	3f 91       	pop	r19
    3774:	2a e0       	ldi	r18, 0x0A	; 10
    3776:	26 9f       	mul	r18, r22
    3778:	11 24       	eor	r1, r1
    377a:	30 19       	sub	r19, r0
    377c:	30 5d       	subi	r19, 0xD0	; 208
    377e:	31 93       	st	Z+, r19
    3780:	de f6       	brtc	.-74     	; 0x3738 <__ultoa_invert+0xe>
    3782:	cf 01       	movw	r24, r30
    3784:	08 95       	ret
    3786:	46 2f       	mov	r20, r22
    3788:	47 70       	andi	r20, 0x07	; 7
    378a:	40 5d       	subi	r20, 0xD0	; 208
    378c:	41 93       	st	Z+, r20
    378e:	b3 e0       	ldi	r27, 0x03	; 3
    3790:	0f d0       	rcall	.+30     	; 0x37b0 <__ultoa_invert+0x86>
    3792:	c9 f7       	brne	.-14     	; 0x3786 <__ultoa_invert+0x5c>
    3794:	f6 cf       	rjmp	.-20     	; 0x3782 <__ultoa_invert+0x58>
    3796:	46 2f       	mov	r20, r22
    3798:	4f 70       	andi	r20, 0x0F	; 15
    379a:	40 5d       	subi	r20, 0xD0	; 208
    379c:	4a 33       	cpi	r20, 0x3A	; 58
    379e:	18 f0       	brcs	.+6      	; 0x37a6 <__ultoa_invert+0x7c>
    37a0:	49 5d       	subi	r20, 0xD9	; 217
    37a2:	31 fd       	sbrc	r19, 1
    37a4:	40 52       	subi	r20, 0x20	; 32
    37a6:	41 93       	st	Z+, r20
    37a8:	02 d0       	rcall	.+4      	; 0x37ae <__ultoa_invert+0x84>
    37aa:	a9 f7       	brne	.-22     	; 0x3796 <__ultoa_invert+0x6c>
    37ac:	ea cf       	rjmp	.-44     	; 0x3782 <__ultoa_invert+0x58>
    37ae:	b4 e0       	ldi	r27, 0x04	; 4
    37b0:	a6 95       	lsr	r26
    37b2:	97 95       	ror	r25
    37b4:	87 95       	ror	r24
    37b6:	77 95       	ror	r23
    37b8:	67 95       	ror	r22
    37ba:	ba 95       	dec	r27
    37bc:	c9 f7       	brne	.-14     	; 0x37b0 <__ultoa_invert+0x86>
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	61 05       	cpc	r22, r1
    37c2:	71 05       	cpc	r23, r1
    37c4:	08 95       	ret
    37c6:	9b 01       	movw	r18, r22
    37c8:	ac 01       	movw	r20, r24
    37ca:	0a 2e       	mov	r0, r26
    37cc:	06 94       	lsr	r0
    37ce:	57 95       	ror	r21
    37d0:	47 95       	ror	r20
    37d2:	37 95       	ror	r19
    37d4:	27 95       	ror	r18
    37d6:	ba 95       	dec	r27
    37d8:	c9 f7       	brne	.-14     	; 0x37cc <__ultoa_invert+0xa2>
    37da:	62 0f       	add	r22, r18
    37dc:	73 1f       	adc	r23, r19
    37de:	84 1f       	adc	r24, r20
    37e0:	95 1f       	adc	r25, r21
    37e2:	a0 1d       	adc	r26, r0
    37e4:	08 95       	ret

000037e6 <_exit>:
    37e6:	f8 94       	cli

000037e8 <__stop_program>:
    37e8:	ff cf       	rjmp	.-2      	; 0x37e8 <__stop_program>
