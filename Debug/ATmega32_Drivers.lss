
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000417c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000417c  000041f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000423c  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00002237  00000000  00000000  00008474  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000a6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000a80b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000a99a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000c9df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000dae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000ea64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ebe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000eea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <main>
      7a:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e6       	ldi	r26, 0x6B	; 107
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e6       	ldi	r24, 0x6B	; 107
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b e6       	ldi	r22, 0x6B	; 107
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <GPIO_pinInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinInit(const pin_obj_t * pin_obj)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	27 97       	sbiw	r28, 0x07	; 7
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	9b 83       	std	Y+3, r25	; 0x03
     ca4:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <GPIO_pinInit+0x28>
	{
		error_status = E_NOT_OK;
     cb2:	19 82       	std	Y+1, r1	; 0x01
     cb4:	ea c0       	rjmp	.+468    	; 0xe8a <GPIO_pinInit+0x1fc>
	}
	else
	{
		/* check the required pin direction */
		switch (pin_obj->direction)
     cb6:	ea 81       	ldd	r30, Y+2	; 0x02
     cb8:	fb 81       	ldd	r31, Y+3	; 0x03
     cba:	80 81       	ld	r24, Z
     cbc:	82 95       	swap	r24
     cbe:	86 95       	lsr	r24
     cc0:	87 70       	andi	r24, 0x07	; 7
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3f 83       	std	Y+7, r19	; 0x07
     cca:	2e 83       	std	Y+6, r18	; 0x06
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	31 f0       	breq	.+12     	; 0xce0 <GPIO_pinInit+0x52>
     cd4:	2e 81       	ldd	r18, Y+6	; 0x06
     cd6:	3f 81       	ldd	r19, Y+7	; 0x07
     cd8:	21 30       	cpi	r18, 0x01	; 1
     cda:	31 05       	cpc	r19, r1
     cdc:	91 f1       	breq	.+100    	; 0xd42 <GPIO_pinInit+0xb4>
     cde:	5f c0       	rjmp	.+190    	; 0xd9e <GPIO_pinInit+0x110>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     ce0:	ea 81       	ldd	r30, Y+2	; 0x02
     ce2:	fb 81       	ldd	r31, Y+3	; 0x03
     ce4:	80 81       	ld	r24, Z
     ce6:	83 70       	andi	r24, 0x03	; 3
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	fc 01       	movw	r30, r24
     cf2:	ed 58       	subi	r30, 0x8D	; 141
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	a0 81       	ld	r26, Z
     cf8:	b1 81       	ldd	r27, Z+1	; 0x01
     cfa:	ea 81       	ldd	r30, Y+2	; 0x02
     cfc:	fb 81       	ldd	r31, Y+3	; 0x03
     cfe:	80 81       	ld	r24, Z
     d00:	83 70       	andi	r24, 0x03	; 3
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	fc 01       	movw	r30, r24
     d0c:	ed 58       	subi	r30, 0x8D	; 141
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	01 90       	ld	r0, Z+
     d12:	f0 81       	ld	r31, Z
     d14:	e0 2d       	mov	r30, r0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	ea 81       	ldd	r30, Y+2	; 0x02
     d1c:	fb 81       	ldd	r31, Y+3	; 0x03
     d1e:	80 81       	ld	r24, Z
     d20:	86 95       	lsr	r24
     d22:	86 95       	lsr	r24
     d24:	87 70       	andi	r24, 0x07	; 7
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <GPIO_pinInit+0xa8>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <GPIO_pinInit+0xa4>
     d3a:	80 95       	com	r24
     d3c:	84 23       	and	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	2e c0       	rjmp	.+92     	; 0xd9e <GPIO_pinInit+0x110>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     d42:	ea 81       	ldd	r30, Y+2	; 0x02
     d44:	fb 81       	ldd	r31, Y+3	; 0x03
     d46:	80 81       	ld	r24, Z
     d48:	83 70       	andi	r24, 0x03	; 3
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	fc 01       	movw	r30, r24
     d54:	ed 58       	subi	r30, 0x8D	; 141
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	a0 81       	ld	r26, Z
     d5a:	b1 81       	ldd	r27, Z+1	; 0x01
     d5c:	ea 81       	ldd	r30, Y+2	; 0x02
     d5e:	fb 81       	ldd	r31, Y+3	; 0x03
     d60:	80 81       	ld	r24, Z
     d62:	83 70       	andi	r24, 0x03	; 3
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	fc 01       	movw	r30, r24
     d6e:	ed 58       	subi	r30, 0x8D	; 141
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	01 90       	ld	r0, Z+
     d74:	f0 81       	ld	r31, Z
     d76:	e0 2d       	mov	r30, r0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	ea 81       	ldd	r30, Y+2	; 0x02
     d7e:	fb 81       	ldd	r31, Y+3	; 0x03
     d80:	80 81       	ld	r24, Z
     d82:	86 95       	lsr	r24
     d84:	86 95       	lsr	r24
     d86:	87 70       	andi	r24, 0x07	; 7
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <GPIO_pinInit+0x108>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	2a 95       	dec	r18
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <GPIO_pinInit+0x104>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}

		/* check the required pin logic */
		switch(pin_obj->logic)
     d9e:	ea 81       	ldd	r30, Y+2	; 0x02
     da0:	fb 81       	ldd	r31, Y+3	; 0x03
     da2:	80 81       	ld	r24, Z
     da4:	82 95       	swap	r24
     da6:	86 95       	lsr	r24
     da8:	86 95       	lsr	r24
     daa:	83 70       	andi	r24, 0x03	; 3
     dac:	81 70       	andi	r24, 0x01	; 1
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3d 83       	std	Y+5, r19	; 0x05
     db4:	2c 83       	std	Y+4, r18	; 0x04
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	31 f0       	breq	.+12     	; 0xdca <GPIO_pinInit+0x13c>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	21 30       	cpi	r18, 0x01	; 1
     dc4:	31 05       	cpc	r19, r1
     dc6:	91 f1       	breq	.+100    	; 0xe2c <GPIO_pinInit+0x19e>
     dc8:	60 c0       	rjmp	.+192    	; 0xe8a <GPIO_pinInit+0x1fc>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
     dca:	ea 81       	ldd	r30, Y+2	; 0x02
     dcc:	fb 81       	ldd	r31, Y+3	; 0x03
     dce:	80 81       	ld	r24, Z
     dd0:	83 70       	andi	r24, 0x03	; 3
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	fc 01       	movw	r30, r24
     ddc:	e5 58       	subi	r30, 0x85	; 133
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	a0 81       	ld	r26, Z
     de2:	b1 81       	ldd	r27, Z+1	; 0x01
     de4:	ea 81       	ldd	r30, Y+2	; 0x02
     de6:	fb 81       	ldd	r31, Y+3	; 0x03
     de8:	80 81       	ld	r24, Z
     dea:	83 70       	andi	r24, 0x03	; 3
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	fc 01       	movw	r30, r24
     df6:	e5 58       	subi	r30, 0x85	; 133
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	01 90       	ld	r0, Z+
     dfc:	f0 81       	ld	r31, Z
     dfe:	e0 2d       	mov	r30, r0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	ea 81       	ldd	r30, Y+2	; 0x02
     e06:	fb 81       	ldd	r31, Y+3	; 0x03
     e08:	80 81       	ld	r24, Z
     e0a:	86 95       	lsr	r24
     e0c:	86 95       	lsr	r24
     e0e:	87 70       	andi	r24, 0x07	; 7
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <GPIO_pinInit+0x192>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <GPIO_pinInit+0x18e>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	2f c0       	rjmp	.+94     	; 0xe8a <GPIO_pinInit+0x1fc>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
     e2c:	ea 81       	ldd	r30, Y+2	; 0x02
     e2e:	fb 81       	ldd	r31, Y+3	; 0x03
     e30:	80 81       	ld	r24, Z
     e32:	83 70       	andi	r24, 0x03	; 3
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	fc 01       	movw	r30, r24
     e3e:	e5 58       	subi	r30, 0x85	; 133
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	a0 81       	ld	r26, Z
     e44:	b1 81       	ldd	r27, Z+1	; 0x01
     e46:	ea 81       	ldd	r30, Y+2	; 0x02
     e48:	fb 81       	ldd	r31, Y+3	; 0x03
     e4a:	80 81       	ld	r24, Z
     e4c:	83 70       	andi	r24, 0x03	; 3
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	fc 01       	movw	r30, r24
     e58:	e5 58       	subi	r30, 0x85	; 133
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	01 90       	ld	r0, Z+
     e5e:	f0 81       	ld	r31, Z
     e60:	e0 2d       	mov	r30, r0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	ea 81       	ldd	r30, Y+2	; 0x02
     e68:	fb 81       	ldd	r31, Y+3	; 0x03
     e6a:	80 81       	ld	r24, Z
     e6c:	86 95       	lsr	r24
     e6e:	86 95       	lsr	r24
     e70:	87 70       	andi	r24, 0x07	; 7
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_pinInit+0x1f4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_pinInit+0x1f0>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
			/* default:
					error_status = E_NOT_OK;*/
		}
	}

	return error_status;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01

}
     e8c:	27 96       	adiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <GPIO_pinDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinDirectionInit(const pin_obj_t * pin_obj, GPIO_direction_t direction)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <GPIO_pinDirectionInit+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <GPIO_pinDirectionInit+0x8>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <GPIO_pinDirectionInit+0xa>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9b 83       	std	Y+3, r25	; 0x03
     eae:	8a 83       	std	Y+2, r24	; 0x02
     eb0:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	11 f4       	brne	.+4      	; 0xec2 <GPIO_pinDirectionInit+0x24>
	{
		error_status = E_NOT_OK;
     ebe:	19 82       	std	Y+1, r1	; 0x01
     ec0:	6f c0       	rjmp	.+222    	; 0xfa0 <GPIO_pinDirectionInit+0x102>
	}
	else
	{
		/* check the required pin direction */
		switch (direction)
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3e 83       	std	Y+6, r19	; 0x06
     eca:	2d 83       	std	Y+5, r18	; 0x05
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	31 f0       	breq	.+12     	; 0xee0 <GPIO_pinDirectionInit+0x42>
     ed4:	2d 81       	ldd	r18, Y+5	; 0x05
     ed6:	3e 81       	ldd	r19, Y+6	; 0x06
     ed8:	21 30       	cpi	r18, 0x01	; 1
     eda:	31 05       	cpc	r19, r1
     edc:	91 f1       	breq	.+100    	; 0xf42 <GPIO_pinDirectionInit+0xa4>
     ede:	60 c0       	rjmp	.+192    	; 0xfa0 <GPIO_pinDirectionInit+0x102>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     ee0:	ea 81       	ldd	r30, Y+2	; 0x02
     ee2:	fb 81       	ldd	r31, Y+3	; 0x03
     ee4:	80 81       	ld	r24, Z
     ee6:	83 70       	andi	r24, 0x03	; 3
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	fc 01       	movw	r30, r24
     ef2:	ed 58       	subi	r30, 0x8D	; 141
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	a0 81       	ld	r26, Z
     ef8:	b1 81       	ldd	r27, Z+1	; 0x01
     efa:	ea 81       	ldd	r30, Y+2	; 0x02
     efc:	fb 81       	ldd	r31, Y+3	; 0x03
     efe:	80 81       	ld	r24, Z
     f00:	83 70       	andi	r24, 0x03	; 3
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	fc 01       	movw	r30, r24
     f0c:	ed 58       	subi	r30, 0x8D	; 141
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	01 90       	ld	r0, Z+
     f12:	f0 81       	ld	r31, Z
     f14:	e0 2d       	mov	r30, r0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	ea 81       	ldd	r30, Y+2	; 0x02
     f1c:	fb 81       	ldd	r31, Y+3	; 0x03
     f1e:	80 81       	ld	r24, Z
     f20:	86 95       	lsr	r24
     f22:	86 95       	lsr	r24
     f24:	87 70       	andi	r24, 0x07	; 7
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_pinDirectionInit+0x98>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_pinDirectionInit+0x94>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	2f c0       	rjmp	.+94     	; 0xfa0 <GPIO_pinDirectionInit+0x102>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     f42:	ea 81       	ldd	r30, Y+2	; 0x02
     f44:	fb 81       	ldd	r31, Y+3	; 0x03
     f46:	80 81       	ld	r24, Z
     f48:	83 70       	andi	r24, 0x03	; 3
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	ed 58       	subi	r30, 0x8D	; 141
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	a0 81       	ld	r26, Z
     f5a:	b1 81       	ldd	r27, Z+1	; 0x01
     f5c:	ea 81       	ldd	r30, Y+2	; 0x02
     f5e:	fb 81       	ldd	r31, Y+3	; 0x03
     f60:	80 81       	ld	r24, Z
     f62:	83 70       	andi	r24, 0x03	; 3
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	fc 01       	movw	r30, r24
     f6e:	ed 58       	subi	r30, 0x8D	; 141
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	01 90       	ld	r0, Z+
     f74:	f0 81       	ld	r31, Z
     f76:	e0 2d       	mov	r30, r0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	ea 81       	ldd	r30, Y+2	; 0x02
     f7e:	fb 81       	ldd	r31, Y+3	; 0x03
     f80:	80 81       	ld	r24, Z
     f82:	86 95       	lsr	r24
     f84:	86 95       	lsr	r24
     f86:	87 70       	andi	r24, 0x07	; 7
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_pinDirectionInit+0xfa>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_pinDirectionInit+0xf6>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
			 * so, there is no need for default case in here */
			/* default:
					error_status = E_NOT_OK;*/
		}
	}
	return error_status;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa2:	26 96       	adiw	r28, 0x06	; 6
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <GPIO_pinGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinGetDirection(const pin_obj_t * pin_obj, GPIO_direction_t * direction)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <GPIO_pinGetDirection+0x6>
     fba:	00 d0       	rcall	.+0      	; 0xfbc <GPIO_pinGetDirection+0x8>
     fbc:	0f 92       	push	r0
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	9b 83       	std	Y+3, r25	; 0x03
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	7d 83       	std	Y+5, r23	; 0x05
     fc8:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	11 f4       	brne	.+4      	; 0xfda <GPIO_pinGetDirection+0x26>
	{
		error_status = E_NOT_OK;
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	24 c0       	rjmp	.+72     	; 0x1022 <GPIO_pinGetDirection+0x6e>
	}
	else
	{
		/* update the passed argument with the current pin state */
		*direction = READ_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
     fda:	ea 81       	ldd	r30, Y+2	; 0x02
     fdc:	fb 81       	ldd	r31, Y+3	; 0x03
     fde:	80 81       	ld	r24, Z
     fe0:	83 70       	andi	r24, 0x03	; 3
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	fc 01       	movw	r30, r24
     fec:	ed 58       	subi	r30, 0x8D	; 141
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	01 90       	ld	r0, Z+
     ff2:	f0 81       	ld	r31, Z
     ff4:	e0 2d       	mov	r30, r0
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	ea 81       	ldd	r30, Y+2	; 0x02
     ffe:	fb 81       	ldd	r31, Y+3	; 0x03
    1000:	80 81       	ld	r24, Z
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	87 70       	andi	r24, 0x07	; 7
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_pinGetDirection+0x60>
    1010:	55 95       	asr	r21
    1012:	47 95       	ror	r20
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_pinGetDirection+0x5c>
    1018:	ca 01       	movw	r24, r20
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	ec 81       	ldd	r30, Y+4	; 0x04
    101e:	fd 81       	ldd	r31, Y+5	; 0x05
    1020:	80 83       	st	Z, r24
	}

	return error_status;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <GPIO_pinWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinWrite(const pin_obj_t * pin_obj, GPIO_logic_t logic)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <GPIO_pinWrite+0x6>
    103a:	00 d0       	rcall	.+0      	; 0x103c <GPIO_pinWrite+0x8>
    103c:	00 d0       	rcall	.+0      	; 0x103e <GPIO_pinWrite+0xa>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9b 83       	std	Y+3, r25	; 0x03
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	11 f4       	brne	.+4      	; 0x1058 <GPIO_pinWrite+0x24>
	{
		error_status = E_NOT_OK;
    1054:	19 82       	std	Y+1, r1	; 0x01
    1056:	6f c0       	rjmp	.+222    	; 0x1136 <GPIO_pinWrite+0x102>
	}
	else
	{
		/* check the required pin logic */
		switch(logic)
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3e 83       	std	Y+6, r19	; 0x06
    1060:	2d 83       	std	Y+5, r18	; 0x05
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	31 f0       	breq	.+12     	; 0x1076 <GPIO_pinWrite+0x42>
    106a:	2d 81       	ldd	r18, Y+5	; 0x05
    106c:	3e 81       	ldd	r19, Y+6	; 0x06
    106e:	21 30       	cpi	r18, 0x01	; 1
    1070:	31 05       	cpc	r19, r1
    1072:	91 f1       	breq	.+100    	; 0x10d8 <GPIO_pinWrite+0xa4>
    1074:	60 c0       	rjmp	.+192    	; 0x1136 <GPIO_pinWrite+0x102>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	80 81       	ld	r24, Z
    107c:	83 70       	andi	r24, 0x03	; 3
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	fc 01       	movw	r30, r24
    1088:	e5 58       	subi	r30, 0x85	; 133
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	a0 81       	ld	r26, Z
    108e:	b1 81       	ldd	r27, Z+1	; 0x01
    1090:	ea 81       	ldd	r30, Y+2	; 0x02
    1092:	fb 81       	ldd	r31, Y+3	; 0x03
    1094:	80 81       	ld	r24, Z
    1096:	83 70       	andi	r24, 0x03	; 3
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	fc 01       	movw	r30, r24
    10a2:	e5 58       	subi	r30, 0x85	; 133
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	01 90       	ld	r0, Z+
    10a8:	f0 81       	ld	r31, Z
    10aa:	e0 2d       	mov	r30, r0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	ea 81       	ldd	r30, Y+2	; 0x02
    10b2:	fb 81       	ldd	r31, Y+3	; 0x03
    10b4:	80 81       	ld	r24, Z
    10b6:	86 95       	lsr	r24
    10b8:	86 95       	lsr	r24
    10ba:	87 70       	andi	r24, 0x07	; 7
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <GPIO_pinWrite+0x98>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <GPIO_pinWrite+0x94>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	2f c0       	rjmp	.+94     	; 0x1136 <GPIO_pinWrite+0x102>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    10d8:	ea 81       	ldd	r30, Y+2	; 0x02
    10da:	fb 81       	ldd	r31, Y+3	; 0x03
    10dc:	80 81       	ld	r24, Z
    10de:	83 70       	andi	r24, 0x03	; 3
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	fc 01       	movw	r30, r24
    10ea:	e5 58       	subi	r30, 0x85	; 133
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	a0 81       	ld	r26, Z
    10f0:	b1 81       	ldd	r27, Z+1	; 0x01
    10f2:	ea 81       	ldd	r30, Y+2	; 0x02
    10f4:	fb 81       	ldd	r31, Y+3	; 0x03
    10f6:	80 81       	ld	r24, Z
    10f8:	83 70       	andi	r24, 0x03	; 3
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	fc 01       	movw	r30, r24
    1104:	e5 58       	subi	r30, 0x85	; 133
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	01 90       	ld	r0, Z+
    110a:	f0 81       	ld	r31, Z
    110c:	e0 2d       	mov	r30, r0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	ea 81       	ldd	r30, Y+2	; 0x02
    1114:	fb 81       	ldd	r31, Y+3	; 0x03
    1116:	80 81       	ld	r24, Z
    1118:	86 95       	lsr	r24
    111a:	86 95       	lsr	r24
    111c:	87 70       	andi	r24, 0x07	; 7
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_pinWrite+0xfa>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_pinWrite+0xf6>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
}
    1138:	26 96       	adiw	r28, 0x06	; 6
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <GPIO_pinRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinRead(const pin_obj_t * pin_obj, GPIO_logic_t * logic)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <GPIO_pinRead+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <GPIO_pinRead+0x8>
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9b 83       	std	Y+3, r25	; 0x03
    115a:	8a 83       	std	Y+2, r24	; 0x02
    115c:	7d 83       	std	Y+5, r23	; 0x05
    115e:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	11 f4       	brne	.+4      	; 0x1170 <GPIO_pinRead+0x26>
	{
		error_status = E_NOT_OK;
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	24 c0       	rjmp	.+72     	; 0x11b8 <GPIO_pinRead+0x6e>
	}
	else
	{
		*logic = READ_BIT(*(PIN_registers[pin_obj->port_id]), pin_obj->pin_id);
    1170:	ea 81       	ldd	r30, Y+2	; 0x02
    1172:	fb 81       	ldd	r31, Y+3	; 0x03
    1174:	80 81       	ld	r24, Z
    1176:	83 70       	andi	r24, 0x03	; 3
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	fc 01       	movw	r30, r24
    1182:	ed 57       	subi	r30, 0x7D	; 125
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	01 90       	ld	r0, Z+
    1188:	f0 81       	ld	r31, Z
    118a:	e0 2d       	mov	r30, r0
    118c:	80 81       	ld	r24, Z
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	ea 81       	ldd	r30, Y+2	; 0x02
    1194:	fb 81       	ldd	r31, Y+3	; 0x03
    1196:	80 81       	ld	r24, Z
    1198:	86 95       	lsr	r24
    119a:	86 95       	lsr	r24
    119c:	87 70       	andi	r24, 0x07	; 7
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_pinRead+0x60>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_pinRead+0x5c>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	ec 81       	ldd	r30, Y+4	; 0x04
    11b4:	fd 81       	ldd	r31, Y+5	; 0x05
    11b6:	80 83       	st	Z, r24
	}

	return error_status;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <GPIO_pinToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinToggle(const pin_obj_t * pin_obj)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_pinToggle+0x6>
    11d0:	0f 92       	push	r0
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9b 83       	std	Y+3, r25	; 0x03
    11d8:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	11 f4       	brne	.+4      	; 0x11ea <GPIO_pinToggle+0x20>
	{
		error_status = E_NOT_OK;
    11e6:	19 82       	std	Y+1, r1	; 0x01
    11e8:	2f c0       	rjmp	.+94     	; 0x1248 <GPIO_pinToggle+0x7e>
	}
	else
	{
		TOGGLE_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    11ea:	ea 81       	ldd	r30, Y+2	; 0x02
    11ec:	fb 81       	ldd	r31, Y+3	; 0x03
    11ee:	80 81       	ld	r24, Z
    11f0:	83 70       	andi	r24, 0x03	; 3
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	fc 01       	movw	r30, r24
    11fc:	e5 58       	subi	r30, 0x85	; 133
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	a0 81       	ld	r26, Z
    1202:	b1 81       	ldd	r27, Z+1	; 0x01
    1204:	ea 81       	ldd	r30, Y+2	; 0x02
    1206:	fb 81       	ldd	r31, Y+3	; 0x03
    1208:	80 81       	ld	r24, Z
    120a:	83 70       	andi	r24, 0x03	; 3
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	fc 01       	movw	r30, r24
    1216:	e5 58       	subi	r30, 0x85	; 133
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	01 90       	ld	r0, Z+
    121c:	f0 81       	ld	r31, Z
    121e:	e0 2d       	mov	r30, r0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	ea 81       	ldd	r30, Y+2	; 0x02
    1226:	fb 81       	ldd	r31, Y+3	; 0x03
    1228:	80 81       	ld	r24, Z
    122a:	86 95       	lsr	r24
    122c:	86 95       	lsr	r24
    122e:	87 70       	andi	r24, 0x07	; 7
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_pinToggle+0x76>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_pinToggle+0x72>
    1244:	84 27       	eor	r24, r20
    1246:	8c 93       	st	X, r24
	}

	return error_status;
    1248:	89 81       	ldd	r24, Y+1	; 0x01

}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <GPIO_portDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portDirectionInit(const port_id_t port, uint8 direction)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <GPIO_portDirectionInit+0x6>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	8a 83       	std	Y+2, r24	; 0x02
    1264:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	10 f0       	brcs	.+4      	; 0x1274 <GPIO_portDirectionInit+0x1e>
	{
		error_status = E_NOT_OK;
    1270:	19 82       	std	Y+1, r1	; 0x01
    1272:	0d c0       	rjmp	.+26     	; 0x128e <GPIO_portDirectionInit+0x38>
	}
	else
	{
		*(DDR_registers[port]) = direction;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	fc 01       	movw	r30, r24
    1280:	ed 58       	subi	r30, 0x8D	; 141
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	01 90       	ld	r0, Z+
    1286:	f0 81       	ld	r31, Z
    1288:	e0 2d       	mov	r30, r0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	80 83       	st	Z, r24
	}
	return error_status;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <GPIO_portGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portGetDirection(const port_id_t port, uint8 * direction)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <GPIO_portGetDirection+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_portGetDirection+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8a 83       	std	Y+2, r24	; 0x02
    12aa:	7c 83       	std	Y+4, r23	; 0x04
    12ac:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	84 30       	cpi	r24, 0x04	; 4
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <GPIO_portGetDirection+0x20>
	{
		error_status = E_NOT_OK;
    12b8:	19 82       	std	Y+1, r1	; 0x01
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <GPIO_portGetDirection+0x3e>
	}
	else
	{
		*direction = *(DDR_registers[port]);
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	fc 01       	movw	r30, r24
    12c8:	ed 58       	subi	r30, 0x8D	; 141
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	01 90       	ld	r0, Z+
    12ce:	f0 81       	ld	r31, Z
    12d0:	e0 2d       	mov	r30, r0
    12d2:	80 81       	ld	r24, Z
    12d4:	eb 81       	ldd	r30, Y+3	; 0x03
    12d6:	fc 81       	ldd	r31, Y+4	; 0x04
    12d8:	80 83       	st	Z, r24
	}
	return error_status;
    12da:	89 81       	ldd	r24, Y+1	; 0x01

}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <GPIO_portWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portWrite(const port_id_t port, uint8 logic)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <GPIO_portWrite+0x6>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
	/* check if port id is valid */

	if (port > PORT_MAX_NUMBER-1)
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	84 30       	cpi	r24, 0x04	; 4
    1302:	10 f0       	brcs	.+4      	; 0x1308 <GPIO_portWrite+0x1e>
	{
		error_status = E_NOT_OK;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <GPIO_portWrite+0x38>
	}
	else
	{
		*(PORT_registers[port]) = logic;
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	fc 01       	movw	r30, r24
    1314:	e5 58       	subi	r30, 0x85	; 133
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	01 90       	ld	r0, Z+
    131a:	f0 81       	ld	r31, Z
    131c:	e0 2d       	mov	r30, r0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	80 83       	st	Z, r24
	}
	return error_status;
    1322:	89 81       	ldd	r24, Y+1	; 0x01

}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <GPIO_portRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portRead(const port_id_t port, uint8 * logic)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_portRead+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <GPIO_portRead+0x8>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	7c 83       	std	Y+4, r23	; 0x04
    1340:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	10 f0       	brcs	.+4      	; 0x1350 <GPIO_portRead+0x20>
	{
		error_status = E_NOT_OK;
    134c:	19 82       	std	Y+1, r1	; 0x01
    134e:	0f c0       	rjmp	.+30     	; 0x136e <GPIO_portRead+0x3e>
	}
	else
	{
		*logic = *(PORT_registers[port]);
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	fc 01       	movw	r30, r24
    135c:	e5 58       	subi	r30, 0x85	; 133
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	01 90       	ld	r0, Z+
    1362:	f0 81       	ld	r31, Z
    1364:	e0 2d       	mov	r30, r0
    1366:	80 81       	ld	r24, Z
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	80 83       	st	Z, r24
	}
	return error_status;
    136e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <GPIO_portToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portToggle(const port_id_t port)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_portToggle+0x6>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	10 f0       	brcs	.+4      	; 0x1398 <GPIO_portToggle+0x1a>
	{
		error_status = E_NOT_OK;
    1394:	19 82       	std	Y+1, r1	; 0x01
    1396:	18 c0       	rjmp	.+48     	; 0x13c8 <GPIO_portToggle+0x4a>
	}

	else
	{
		/*toggle all port pins*/
		*(PORT_registers[port]) ^= 0xFF;
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	fc 01       	movw	r30, r24
    13a4:	e5 58       	subi	r30, 0x85	; 133
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	a0 81       	ld	r26, Z
    13aa:	b1 81       	ldd	r27, Z+1	; 0x01
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	fc 01       	movw	r30, r24
    13b8:	e5 58       	subi	r30, 0x85	; 133
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	01 90       	ld	r0, Z+
    13be:	f0 81       	ld	r31, Z
    13c0:	e0 2d       	mov	r30, r0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 95       	com	r24
    13c6:	8c 93       	st	X, r24
	}
	return error_status;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <SEVEN_SEG_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType SEVEN_SEG_init(const seven_seg_t *seven_seg)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <SEVEN_SEG_init+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <SEVEN_SEG_init+0x8>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	9c 83       	std	Y+4, r25	; 0x04
    13e2:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;				/* to store the error value to be returned */
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == seven_seg)							/* check for null pointer */
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <SEVEN_SEG_init+0x20>
	{
		error_status = E_NOT_OK;
    13f0:	1a 82       	std	Y+2, r1	; 0x02
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <SEVEN_SEG_init+0x46>
	}
	else
	{
		uint8 counter;
		/*	Initialize all decoder pins as output */
		for (counter = 0; counter < NO_SEGMENT_PINS; counter++)
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	0e c0       	rjmp	.+28     	; 0x1414 <SEVEN_SEG_init+0x40>
		{
			error_status = GPIO_pinDirectionInit(&(seven_seg->segment_pins[counter]), GPIO_OUTPUT);
    13f8:	2b 81       	ldd	r18, Y+3	; 0x03
    13fa:	3c 81       	ldd	r19, Y+4	; 0x04
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    140c:	8a 83       	std	Y+2, r24	; 0x02
	}
	else
	{
		uint8 counter;
		/*	Initialize all decoder pins as output */
		for (counter = 0; counter < NO_SEGMENT_PINS; counter++)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	87 30       	cpi	r24, 0x07	; 7
    1418:	78 f3       	brcs	.-34     	; 0x13f8 <SEVEN_SEG_init+0x24>
			error_status = GPIO_pinDirectionInit(&(seven_seg->segment_pins[counter]), GPIO_OUTPUT);
		}

	}

	return error_status;
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <SEVEN_SEG_write>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType SEVEN_SEG_write(const seven_seg_t *seven_seg, uint8 number)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	6b 97       	sbiw	r28, 0x1b	; 27
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	9b 83       	std	Y+3, r25	; 0x03
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;				/* to store the error value to be returned */
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == seven_seg || number > 9)				/* check for null pointer or invalid number */
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	9b 81       	ldd	r25, Y+3	; 0x03
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	19 f0       	breq	.+6      	; 0x1456 <SEVEN_SEG_write+0x2c>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	8a 30       	cpi	r24, 0x0A	; 10
    1454:	10 f0       	brcs	.+4      	; 0x145a <SEVEN_SEG_write+0x30>
	{
		error_status = E_NOT_OK;
    1456:	19 82       	std	Y+1, r1	; 0x01
    1458:	a6 c1       	rjmp	.+844    	; 0x17a6 <SEVEN_SEG_write+0x37c>
		error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), READ_BIT(number, 2));
		error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), READ_BIT(number, 3));

#else 					/* without decoder */
		/* 1. determine the type of the 7-segment */
		switch(seven_seg->segment_type)
    145a:	ea 81       	ldd	r30, Y+2	; 0x02
    145c:	fb 81       	ldd	r31, Y+3	; 0x03
    145e:	87 81       	ldd	r24, Z+7	; 0x07
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	3b 8f       	std	Y+27, r19	; 0x1b
    1466:	2a 8f       	std	Y+26, r18	; 0x1a
    1468:	8a 8d       	ldd	r24, Y+26	; 0x1a
    146a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	39 f0       	breq	.+14     	; 0x147e <SEVEN_SEG_write+0x54>
    1470:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1472:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1474:	21 30       	cpi	r18, 0x01	; 1
    1476:	31 05       	cpc	r19, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <SEVEN_SEG_write+0x52>
    147a:	ed c0       	rjmp	.+474    	; 0x1656 <SEVEN_SEG_write+0x22c>
    147c:	93 c1       	rjmp	.+806    	; 0x17a4 <SEVEN_SEG_write+0x37a>
		case COMMON_ANODE:
			/* get the bit states required to print the number from the global SEVEN_SEG_INPUT array
			 * since the array is made to deal with common cathode configuration,
			 * then, reverse every bit state before writing it to the common anode 7-segment*/

			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[0]), !READ_BIT(SEVEN_SEG_INPUT[number], 0));
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	9b 81       	ldd	r25, Y+3	; 0x03
    1482:	99 8f       	std	Y+25, r25	; 0x19
    1484:	88 8f       	std	Y+24, r24	; 0x18
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	fc 01       	movw	r30, r24
    148e:	e5 56       	subi	r30, 0x65	; 101
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	90 70       	andi	r25, 0x00	; 0
    149c:	1f 8a       	std	Y+23, r1	; 0x17
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <SEVEN_SEG_write+0x7c>
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	9f 8b       	std	Y+23, r25	; 0x17
    14a6:	88 8d       	ldd	r24, Y+24	; 0x18
    14a8:	99 8d       	ldd	r25, Y+25	; 0x19
    14aa:	6f 89       	ldd	r22, Y+23	; 0x17
    14ac:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    14b0:	98 2f       	mov	r25, r24
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	89 23       	and	r24, r25
    14b6:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[1]), !READ_BIT(SEVEN_SEG_INPUT[number], 1));
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	9b 81       	ldd	r25, Y+3	; 0x03
    14bc:	9c 01       	movw	r18, r24
    14be:	2f 5f       	subi	r18, 0xFF	; 255
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	3e 8b       	std	Y+22, r19	; 0x16
    14c4:	2d 8b       	std	Y+21, r18	; 0x15
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	fc 01       	movw	r30, r24
    14ce:	e5 56       	subi	r30, 0x65	; 101
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	86 95       	lsr	r24
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	90 70       	andi	r25, 0x00	; 0
    14de:	1c 8a       	std	Y+20, r1	; 0x14
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <SEVEN_SEG_write+0xbe>
    14e4:	31 e0       	ldi	r19, 0x01	; 1
    14e6:	3c 8b       	std	Y+20, r19	; 0x14
    14e8:	8d 89       	ldd	r24, Y+21	; 0x15
    14ea:	9e 89       	ldd	r25, Y+22	; 0x16
    14ec:	6c 89       	ldd	r22, Y+20	; 0x14
    14ee:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    14f2:	98 2f       	mov	r25, r24
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	89 23       	and	r24, r25
    14f8:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), !READ_BIT(SEVEN_SEG_INPUT[number], 2));
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	9c 01       	movw	r18, r24
    1500:	2e 5f       	subi	r18, 0xFE	; 254
    1502:	3f 4f       	sbci	r19, 0xFF	; 255
    1504:	3b 8b       	std	Y+19, r19	; 0x13
    1506:	2a 8b       	std	Y+18, r18	; 0x12
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	fc 01       	movw	r30, r24
    1510:	e5 56       	subi	r30, 0x65	; 101
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	86 95       	lsr	r24
    1518:	86 95       	lsr	r24
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	81 70       	andi	r24, 0x01	; 1
    1520:	90 70       	andi	r25, 0x00	; 0
    1522:	19 8a       	std	Y+17, r1	; 0x11
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	11 f4       	brne	.+4      	; 0x152c <SEVEN_SEG_write+0x102>
    1528:	31 e0       	ldi	r19, 0x01	; 1
    152a:	39 8b       	std	Y+17, r19	; 0x11
    152c:	8a 89       	ldd	r24, Y+18	; 0x12
    152e:	9b 89       	ldd	r25, Y+19	; 0x13
    1530:	69 89       	ldd	r22, Y+17	; 0x11
    1532:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1536:	98 2f       	mov	r25, r24
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	89 23       	and	r24, r25
    153c:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), !READ_BIT(SEVEN_SEG_INPUT[number], 3));
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	9c 01       	movw	r18, r24
    1544:	2d 5f       	subi	r18, 0xFD	; 253
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	38 8b       	std	Y+16, r19	; 0x10
    154a:	2f 87       	std	Y+15, r18	; 0x0f
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	fc 01       	movw	r30, r24
    1554:	e5 56       	subi	r30, 0x65	; 101
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	86 95       	lsr	r24
    155c:	86 95       	lsr	r24
    155e:	86 95       	lsr	r24
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	90 70       	andi	r25, 0x00	; 0
    1568:	1e 86       	std	Y+14, r1	; 0x0e
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	11 f4       	brne	.+4      	; 0x1572 <SEVEN_SEG_write+0x148>
    156e:	31 e0       	ldi	r19, 0x01	; 1
    1570:	3e 87       	std	Y+14, r19	; 0x0e
    1572:	8f 85       	ldd	r24, Y+15	; 0x0f
    1574:	98 89       	ldd	r25, Y+16	; 0x10
    1576:	6e 85       	ldd	r22, Y+14	; 0x0e
    1578:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    157c:	98 2f       	mov	r25, r24
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	89 23       	and	r24, r25
    1582:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[4]), !READ_BIT(SEVEN_SEG_INPUT[number], 4));
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	9c 01       	movw	r18, r24
    158a:	2c 5f       	subi	r18, 0xFC	; 252
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	3d 87       	std	Y+13, r19	; 0x0d
    1590:	2c 87       	std	Y+12, r18	; 0x0c
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	fc 01       	movw	r30, r24
    159a:	e5 56       	subi	r30, 0x65	; 101
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 81       	ld	r24, Z
    15a0:	82 95       	swap	r24
    15a2:	8f 70       	andi	r24, 0x0F	; 15
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	81 70       	andi	r24, 0x01	; 1
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	1b 86       	std	Y+11, r1	; 0x0b
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <SEVEN_SEG_write+0x18c>
    15b2:	31 e0       	ldi	r19, 0x01	; 1
    15b4:	3b 87       	std	Y+11, r19	; 0x0b
    15b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    15ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    15bc:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    15c0:	98 2f       	mov	r25, r24
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	89 23       	and	r24, r25
    15c6:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[5]), !READ_BIT(SEVEN_SEG_INPUT[number], 5));
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	9c 01       	movw	r18, r24
    15ce:	2b 5f       	subi	r18, 0xFB	; 251
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	3a 87       	std	Y+10, r19	; 0x0a
    15d4:	29 87       	std	Y+9, r18	; 0x09
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	fc 01       	movw	r30, r24
    15de:	e5 56       	subi	r30, 0x65	; 101
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	82 95       	swap	r24
    15e6:	86 95       	lsr	r24
    15e8:	87 70       	andi	r24, 0x07	; 7
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	90 70       	andi	r25, 0x00	; 0
    15f2:	18 86       	std	Y+8, r1	; 0x08
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	11 f4       	brne	.+4      	; 0x15fc <SEVEN_SEG_write+0x1d2>
    15f8:	31 e0       	ldi	r19, 0x01	; 1
    15fa:	38 87       	std	Y+8, r19	; 0x08
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	68 85       	ldd	r22, Y+8	; 0x08
    1602:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1606:	98 2f       	mov	r25, r24
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	89 23       	and	r24, r25
    160c:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[6]), !READ_BIT(SEVEN_SEG_INPUT[number], 6));
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	9c 01       	movw	r18, r24
    1614:	2a 5f       	subi	r18, 0xFA	; 250
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	3f 83       	std	Y+7, r19	; 0x07
    161a:	2e 83       	std	Y+6, r18	; 0x06
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	fc 01       	movw	r30, r24
    1624:	e5 56       	subi	r30, 0x65	; 101
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 81       	ld	r24, Z
    162a:	82 95       	swap	r24
    162c:	86 95       	lsr	r24
    162e:	86 95       	lsr	r24
    1630:	83 70       	andi	r24, 0x03	; 3
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	81 70       	andi	r24, 0x01	; 1
    1638:	90 70       	andi	r25, 0x00	; 0
    163a:	1d 82       	std	Y+5, r1	; 0x05
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	11 f4       	brne	.+4      	; 0x1644 <SEVEN_SEG_write+0x21a>
    1640:	31 e0       	ldi	r19, 0x01	; 1
    1642:	3d 83       	std	Y+5, r19	; 0x05
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	6d 81       	ldd	r22, Y+5	; 0x05
    164a:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    164e:	99 81       	ldd	r25, Y+1	; 0x01
    1650:	89 23       	and	r24, r25
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	a8 c0       	rjmp	.+336    	; 0x17a6 <SEVEN_SEG_write+0x37c>

		case COMMON_CATHODE:
			/* get the bit states required to print the number from the global SEVEN_SEG_INPUT array
			 * write every pin state of array element  on its relevant pin*/

			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[0]), READ_BIT(SEVEN_SEG_INPUT[number], 0));
    1656:	4a 81       	ldd	r20, Y+2	; 0x02
    1658:	5b 81       	ldd	r21, Y+3	; 0x03
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	fc 01       	movw	r30, r24
    1662:	e5 56       	subi	r30, 0x65	; 101
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	21 70       	andi	r18, 0x01	; 1
    166c:	ca 01       	movw	r24, r20
    166e:	62 2f       	mov	r22, r18
    1670:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1674:	98 2f       	mov	r25, r24
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	89 23       	and	r24, r25
    167a:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[1]), READ_BIT(SEVEN_SEG_INPUT[number], 1));
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	ac 01       	movw	r20, r24
    1682:	4f 5f       	subi	r20, 0xFF	; 255
    1684:	5f 4f       	sbci	r21, 0xFF	; 255
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	fc 01       	movw	r30, r24
    168e:	e5 56       	subi	r30, 0x65	; 101
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	86 95       	lsr	r24
    1696:	28 2f       	mov	r18, r24
    1698:	21 70       	andi	r18, 0x01	; 1
    169a:	ca 01       	movw	r24, r20
    169c:	62 2f       	mov	r22, r18
    169e:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    16a2:	98 2f       	mov	r25, r24
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	89 23       	and	r24, r25
    16a8:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), READ_BIT(SEVEN_SEG_INPUT[number], 2));
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	9b 81       	ldd	r25, Y+3	; 0x03
    16ae:	ac 01       	movw	r20, r24
    16b0:	4e 5f       	subi	r20, 0xFE	; 254
    16b2:	5f 4f       	sbci	r21, 0xFF	; 255
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	e5 56       	subi	r30, 0x65	; 101
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	86 95       	lsr	r24
    16c4:	86 95       	lsr	r24
    16c6:	28 2f       	mov	r18, r24
    16c8:	21 70       	andi	r18, 0x01	; 1
    16ca:	ca 01       	movw	r24, r20
    16cc:	62 2f       	mov	r22, r18
    16ce:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    16d2:	98 2f       	mov	r25, r24
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	89 23       	and	r24, r25
    16d8:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), READ_BIT(SEVEN_SEG_INPUT[number], 3));
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	ac 01       	movw	r20, r24
    16e0:	4d 5f       	subi	r20, 0xFD	; 253
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	fc 01       	movw	r30, r24
    16ec:	e5 56       	subi	r30, 0x65	; 101
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	86 95       	lsr	r24
    16f4:	86 95       	lsr	r24
    16f6:	86 95       	lsr	r24
    16f8:	28 2f       	mov	r18, r24
    16fa:	21 70       	andi	r18, 0x01	; 1
    16fc:	ca 01       	movw	r24, r20
    16fe:	62 2f       	mov	r22, r18
    1700:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1704:	98 2f       	mov	r25, r24
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	89 23       	and	r24, r25
    170a:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[4]), READ_BIT(SEVEN_SEG_INPUT[number], 4));
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	ac 01       	movw	r20, r24
    1712:	4c 5f       	subi	r20, 0xFC	; 252
    1714:	5f 4f       	sbci	r21, 0xFF	; 255
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	fc 01       	movw	r30, r24
    171e:	e5 56       	subi	r30, 0x65	; 101
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	82 95       	swap	r24
    1726:	8f 70       	andi	r24, 0x0F	; 15
    1728:	28 2f       	mov	r18, r24
    172a:	21 70       	andi	r18, 0x01	; 1
    172c:	ca 01       	movw	r24, r20
    172e:	62 2f       	mov	r22, r18
    1730:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1734:	98 2f       	mov	r25, r24
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	89 23       	and	r24, r25
    173a:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[5]), READ_BIT(SEVEN_SEG_INPUT[number], 5));
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	9b 81       	ldd	r25, Y+3	; 0x03
    1740:	ac 01       	movw	r20, r24
    1742:	4b 5f       	subi	r20, 0xFB	; 251
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	fc 01       	movw	r30, r24
    174e:	e5 56       	subi	r30, 0x65	; 101
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	82 95       	swap	r24
    1756:	86 95       	lsr	r24
    1758:	87 70       	andi	r24, 0x07	; 7
    175a:	28 2f       	mov	r18, r24
    175c:	21 70       	andi	r18, 0x01	; 1
    175e:	ca 01       	movw	r24, r20
    1760:	62 2f       	mov	r22, r18
    1762:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1766:	98 2f       	mov	r25, r24
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	89 23       	and	r24, r25
    176c:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[6]), READ_BIT(SEVEN_SEG_INPUT[number], 6));
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	ac 01       	movw	r20, r24
    1774:	4a 5f       	subi	r20, 0xFA	; 250
    1776:	5f 4f       	sbci	r21, 0xFF	; 255
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	fc 01       	movw	r30, r24
    1780:	e5 56       	subi	r30, 0x65	; 101
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 81       	ld	r24, Z
    1786:	82 95       	swap	r24
    1788:	86 95       	lsr	r24
    178a:	86 95       	lsr	r24
    178c:	83 70       	andi	r24, 0x03	; 3
    178e:	28 2f       	mov	r18, r24
    1790:	21 70       	andi	r18, 0x01	; 1
    1792:	ca 01       	movw	r24, r20
    1794:	62 2f       	mov	r22, r18
    1796:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    179a:	98 2f       	mov	r25, r24
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	89 23       	and	r24, r25
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <SEVEN_SEG_write+0x37c>
			break;

		default:
			error_status = E_NOT_OK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
		}
#endif
	}


	return error_status;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a8:	6b 96       	adiw	r28, 0x1b	; 27
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <LED_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_init(const led_t *led)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <LED_init+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <LED_init+0x8>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	11 f4       	brne	.+4      	; 0x17da <LED_init+0x20>
	{
		error_status = E_NOT_OK;
    17d6:	19 82       	std	Y+1, r1	; 0x01
    17d8:	36 c0       	rjmp	.+108    	; 0x1846 <LED_init+0x8c>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id,
				.direction = GPIO_OUTPUT, .logic = led->led_initial_state};
    17da:	eb 81       	ldd	r30, Y+3	; 0x03
    17dc:	fc 81       	ldd	r31, Y+4	; 0x04
    17de:	80 81       	ld	r24, Z
    17e0:	28 2f       	mov	r18, r24
    17e2:	23 70       	andi	r18, 0x03	; 3
    17e4:	eb 81       	ldd	r30, Y+3	; 0x03
    17e6:	fc 81       	ldd	r31, Y+4	; 0x04
    17e8:	80 81       	ld	r24, Z
    17ea:	98 2f       	mov	r25, r24
    17ec:	96 95       	lsr	r25
    17ee:	96 95       	lsr	r25
    17f0:	97 70       	andi	r25, 0x07	; 7
    17f2:	eb 81       	ldd	r30, Y+3	; 0x03
    17f4:	fc 81       	ldd	r31, Y+4	; 0x04
    17f6:	80 81       	ld	r24, Z
    17f8:	38 2f       	mov	r19, r24
    17fa:	32 95       	swap	r19
    17fc:	36 95       	lsr	r19
    17fe:	37 70       	andi	r19, 0x07	; 7
    1800:	31 70       	andi	r19, 0x01	; 1
    1802:	1a 82       	std	Y+2, r1	; 0x02
    1804:	23 70       	andi	r18, 0x03	; 3
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	8c 7f       	andi	r24, 0xFC	; 252
    180a:	82 2b       	or	r24, r18
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	89 2f       	mov	r24, r25
    1810:	87 70       	andi	r24, 0x07	; 7
    1812:	98 2f       	mov	r25, r24
    1814:	99 0f       	add	r25, r25
    1816:	99 0f       	add	r25, r25
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	83 7e       	andi	r24, 0xE3	; 227
    181c:	89 2b       	or	r24, r25
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	80 62       	ori	r24, 0x20	; 32
    1824:	8a 83       	std	Y+2, r24	; 0x02
    1826:	83 2f       	mov	r24, r19
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	98 2f       	mov	r25, r24
    182c:	92 95       	swap	r25
    182e:	99 0f       	add	r25, r25
    1830:	99 0f       	add	r25, r25
    1832:	90 7c       	andi	r25, 0xC0	; 192
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	8f 7b       	andi	r24, 0xBF	; 191
    1838:	89 2b       	or	r24, r25
    183a:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&led_pin);
    183c:	ce 01       	movw	r24, r28
    183e:	02 96       	adiw	r24, 0x02	; 2
    1840:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_pinInit>
    1844:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <LED_on>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_on(const led_t *led)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <LED_on+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <LED_on+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	11 f4       	brne	.+4      	; 0x1876 <LED_on+0x20>
	{
		error_status = E_NOT_OK;
    1872:	19 82       	std	Y+1, r1	; 0x01
    1874:	21 c0       	rjmp	.+66     	; 0x18b8 <LED_on+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1876:	eb 81       	ldd	r30, Y+3	; 0x03
    1878:	fc 81       	ldd	r31, Y+4	; 0x04
    187a:	80 81       	ld	r24, Z
    187c:	28 2f       	mov	r18, r24
    187e:	23 70       	andi	r18, 0x03	; 3
    1880:	eb 81       	ldd	r30, Y+3	; 0x03
    1882:	fc 81       	ldd	r31, Y+4	; 0x04
    1884:	80 81       	ld	r24, Z
    1886:	98 2f       	mov	r25, r24
    1888:	96 95       	lsr	r25
    188a:	96 95       	lsr	r25
    188c:	97 70       	andi	r25, 0x07	; 7
    188e:	1a 82       	std	Y+2, r1	; 0x02
    1890:	23 70       	andi	r18, 0x03	; 3
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	8c 7f       	andi	r24, 0xFC	; 252
    1896:	82 2b       	or	r24, r18
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	89 2f       	mov	r24, r25
    189c:	87 70       	andi	r24, 0x07	; 7
    189e:	98 2f       	mov	r25, r24
    18a0:	99 0f       	add	r25, r25
    18a2:	99 0f       	add	r25, r25
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	83 7e       	andi	r24, 0xE3	; 227
    18a8:	89 2b       	or	r24, r25
    18aa:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_HIGH);
    18ac:	ce 01       	movw	r24, r28
    18ae:	02 96       	adiw	r24, 0x02	; 2
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    18b6:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <LED_off>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_off(const led_t *led)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <LED_off+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <LED_off+0x8>
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <LED_off+0x20>
	{
		error_status = E_NOT_OK;
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	21 c0       	rjmp	.+66     	; 0x192a <LED_off+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    18e8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ea:	fc 81       	ldd	r31, Y+4	; 0x04
    18ec:	80 81       	ld	r24, Z
    18ee:	28 2f       	mov	r18, r24
    18f0:	23 70       	andi	r18, 0x03	; 3
    18f2:	eb 81       	ldd	r30, Y+3	; 0x03
    18f4:	fc 81       	ldd	r31, Y+4	; 0x04
    18f6:	80 81       	ld	r24, Z
    18f8:	98 2f       	mov	r25, r24
    18fa:	96 95       	lsr	r25
    18fc:	96 95       	lsr	r25
    18fe:	97 70       	andi	r25, 0x07	; 7
    1900:	1a 82       	std	Y+2, r1	; 0x02
    1902:	23 70       	andi	r18, 0x03	; 3
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	8c 7f       	andi	r24, 0xFC	; 252
    1908:	82 2b       	or	r24, r18
    190a:	8a 83       	std	Y+2, r24	; 0x02
    190c:	89 2f       	mov	r24, r25
    190e:	87 70       	andi	r24, 0x07	; 7
    1910:	98 2f       	mov	r25, r24
    1912:	99 0f       	add	r25, r25
    1914:	99 0f       	add	r25, r25
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	83 7e       	andi	r24, 0xE3	; 227
    191a:	89 2b       	or	r24, r25
    191c:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_LOW);
    191e:	ce 01       	movw	r24, r28
    1920:	02 96       	adiw	r24, 0x02	; 2
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1928:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <LED_toggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_toggle(const led_t *led)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <LED_toggle+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <LED_toggle+0x8>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	11 f4       	brne	.+4      	; 0x195a <LED_toggle+0x20>
	{
		error_status = E_NOT_OK;
    1956:	19 82       	std	Y+1, r1	; 0x01
    1958:	20 c0       	rjmp	.+64     	; 0x199a <LED_toggle+0x60>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	80 81       	ld	r24, Z
    1960:	28 2f       	mov	r18, r24
    1962:	23 70       	andi	r18, 0x03	; 3
    1964:	eb 81       	ldd	r30, Y+3	; 0x03
    1966:	fc 81       	ldd	r31, Y+4	; 0x04
    1968:	80 81       	ld	r24, Z
    196a:	98 2f       	mov	r25, r24
    196c:	96 95       	lsr	r25
    196e:	96 95       	lsr	r25
    1970:	97 70       	andi	r25, 0x07	; 7
    1972:	1a 82       	std	Y+2, r1	; 0x02
    1974:	23 70       	andi	r18, 0x03	; 3
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	8c 7f       	andi	r24, 0xFC	; 252
    197a:	82 2b       	or	r24, r18
    197c:	8a 83       	std	Y+2, r24	; 0x02
    197e:	89 2f       	mov	r24, r25
    1980:	87 70       	andi	r24, 0x07	; 7
    1982:	98 2f       	mov	r25, r24
    1984:	99 0f       	add	r25, r25
    1986:	99 0f       	add	r25, r25
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	83 7e       	andi	r24, 0xE3	; 227
    198c:	89 2b       	or	r24, r25
    198e:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinToggle(&led_pin);
    1990:	ce 01       	movw	r24, r28
    1992:	02 96       	adiw	r24, 0x02	; 2
    1994:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_pinToggle>
    1998:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    199a:	89 81       	ldd	r24, Y+1	; 0x01
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <LCD_4bit_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_init(const lcd_4bit_t *lcd)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	e8 97       	sbiw	r28, 0x38	; 56
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	98 af       	std	Y+56, r25	; 0x38
    19c0:	8f ab       	std	Y+55, r24	; 0x37
	STD_ReturnType error_status = E_OK;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	8e ab       	std	Y+54, r24	; 0x36
	if(NULL == lcd)
    19c6:	8f a9       	ldd	r24, Y+55	; 0x37
    19c8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <LCD_4bit_init+0x28>
	{
		error_status = E_NOT_OK;
    19ce:	1e aa       	std	Y+54, r1	; 0x36
    19d0:	13 c2       	rjmp	.+1062   	; 0x1df8 <LCD_4bit_init+0x44e>
	}
	else
	{
		uint8 data_pin_counter = 0; /* To loop through the 4 data pins */
    19d2:	1d aa       	std	Y+53, r1	; 0x35
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
    19d4:	8f a9       	ldd	r24, Y+55	; 0x37
    19d6:	98 ad       	ldd	r25, Y+56	; 0x38
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    19de:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */
    19e0:	8f a9       	ldd	r24, Y+55	; 0x37
    19e2:	98 ad       	ldd	r25, Y+56	; 0x38
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    19ec:	98 2f       	mov	r25, r24
    19ee:	8e a9       	ldd	r24, Y+54	; 0x36
    19f0:	89 23       	and	r24, r25
    19f2:	8e ab       	std	Y+54, r24	; 0x36
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <LCD_4bit_init+0x74>

		for(; data_pin_counter < 4; data_pin_counter++)
		{
			error_status &= GPIO_pinDirectionInit(&(lcd->data_pin[data_pin_counter]), GPIO_OUTPUT);
    19f6:	8f a9       	ldd	r24, Y+55	; 0x37
    19f8:	98 ad       	ldd	r25, Y+56	; 0x38
    19fa:	9c 01       	movw	r18, r24
    19fc:	2e 5f       	subi	r18, 0xFE	; 254
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	8d a9       	ldd	r24, Y+53	; 0x35
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    1a10:	98 2f       	mov	r25, r24
    1a12:	8e a9       	ldd	r24, Y+54	; 0x36
    1a14:	89 23       	and	r24, r25
    1a16:	8e ab       	std	Y+54, r24	; 0x36
	{
		uint8 data_pin_counter = 0; /* To loop through the 4 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */

		for(; data_pin_counter < 4; data_pin_counter++)
    1a18:	8d a9       	ldd	r24, Y+53	; 0x35
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	8d ab       	std	Y+53, r24	; 0x35
    1a1e:	8d a9       	ldd	r24, Y+53	; 0x35
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	48 f3       	brcs	.-46     	; 0x19f6 <LCD_4bit_init+0x4c>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a0 ea       	ldi	r26, 0xA0	; 160
    1a2a:	b1 e4       	ldi	r27, 0x41	; 65
    1a2c:	89 ab       	std	Y+49, r24	; 0x31
    1a2e:	9a ab       	std	Y+50, r25	; 0x32
    1a30:	ab ab       	std	Y+51, r26	; 0x33
    1a32:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	69 a9       	ldd	r22, Y+49	; 0x31
    1a36:	7a a9       	ldd	r23, Y+50	; 0x32
    1a38:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a e7       	ldi	r20, 0x7A	; 122
    1a42:	55 e4       	ldi	r21, 0x45	; 69
    1a44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8d a7       	std	Y+45, r24	; 0x2d
    1a4e:	9e a7       	std	Y+46, r25	; 0x2e
    1a50:	af a7       	std	Y+47, r26	; 0x2f
    1a52:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1a54:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a56:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <LCD_4bit_init+0xcc>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c a7       	std	Y+44, r25	; 0x2c
    1a72:	8b a7       	std	Y+43, r24	; 0x2b
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <LCD_4bit_init+0x14a>
	else if (__tmp > 65535)
    1a76:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a78:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <LCD_4bit_init+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a90:	7a a9       	ldd	r23, Y+50	; 0x32
    1a92:	8b a9       	ldd	r24, Y+51	; 0x33
    1a94:	9c a9       	ldd	r25, Y+52	; 0x34
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9c a7       	std	Y+44, r25	; 0x2c
    1ab4:	8b a7       	std	Y+43, r24	; 0x2b
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <LCD_4bit_init+0x12c>
    1ab8:	80 e9       	ldi	r24, 0x90	; 144
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	9a a7       	std	Y+42, r25	; 0x2a
    1abe:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_4bit_init+0x11a>
    1ac8:	9a a7       	std	Y+42, r25	; 0x2a
    1aca:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ace:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9c a7       	std	Y+44, r25	; 0x2c
    1ad4:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <LCD_4bit_init+0x10e>
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <LCD_4bit_init+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ae2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9c a7       	std	Y+44, r25	; 0x2c
    1af2:	8b a7       	std	Y+43, r24	; 0x2b
    1af4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af8:	98 a7       	std	Y+40, r25	; 0x28
    1afa:	8f a3       	std	Y+39, r24	; 0x27
    1afc:	8f a1       	ldd	r24, Y+39	; 0x27
    1afe:	98 a5       	ldd	r25, Y+40	; 0x28
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_4bit_init+0x156>
    1b04:	98 a7       	std	Y+40, r25	; 0x28
    1b06:	8f a3       	std	Y+39, r24	; 0x27
		}

		/* generate a delay of 20 msec at  startup*/
		_delay_ms(20);

		error_status &= LCD_4bit_sendCommand(lcd, 0x33);	/* required 4-bit mode initialization command */
    1b08:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0c:	63 e3       	ldi	r22, 0x33	; 51
    1b0e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1b12:	98 2f       	mov	r25, r24
    1b14:	8e a9       	ldd	r24, Y+54	; 0x36
    1b16:	89 23       	and	r24, r25
    1b18:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, 0x32);	/* required 4-bit mode initialization command */
    1b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1e:	62 e3       	ldi	r22, 0x32	; 50
    1b20:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1b24:	98 2f       	mov	r25, r24
    1b26:	8e a9       	ldd	r24, Y+54	; 0x36
    1b28:	89 23       	and	r24, r25
    1b2a:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE); /* set 4 bit mode 2 line */
    1b2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b30:	68 e2       	ldi	r22, 0x28	; 40
    1b32:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1b36:	98 2f       	mov	r25, r24
    1b38:	8e a9       	ldd	r24, Y+54	; 0x36
    1b3a:	89 23       	and	r24, r25
    1b3c:	8e ab       	std	Y+54, r24	; 0x36
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 ea       	ldi	r26, 0xA0	; 160
    1b44:	b0 e4       	ldi	r27, 0x40	; 64
    1b46:	8b a3       	std	Y+35, r24	; 0x23
    1b48:	9c a3       	std	Y+36, r25	; 0x24
    1b4a:	ad a3       	std	Y+37, r26	; 0x25
    1b4c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b50:	7c a1       	ldd	r23, Y+36	; 0x24
    1b52:	8d a1       	ldd	r24, Y+37	; 0x25
    1b54:	9e a1       	ldd	r25, Y+38	; 0x26
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a e7       	ldi	r20, 0x7A	; 122
    1b5c:	55 e4       	ldi	r21, 0x45	; 69
    1b5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8f 8f       	std	Y+31, r24	; 0x1f
    1b68:	98 a3       	std	Y+32, r25	; 0x20
    1b6a:	a9 a3       	std	Y+33, r26	; 0x21
    1b6c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b6e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b70:	78 a1       	ldd	r23, Y+32	; 0x20
    1b72:	89 a1       	ldd	r24, Y+33	; 0x21
    1b74:	9a a1       	ldd	r25, Y+34	; 0x22
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <LCD_4bit_init+0x1e6>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <LCD_4bit_init+0x264>
	else if (__tmp > 65535)
    1b90:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b92:	78 a1       	ldd	r23, Y+32	; 0x20
    1b94:	89 a1       	ldd	r24, Y+33	; 0x21
    1b96:	9a a1       	ldd	r25, Y+34	; 0x22
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <LCD_4bit_init+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    1baa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bac:	8d a1       	ldd	r24, Y+37	; 0x25
    1bae:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bce:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LCD_4bit_init+0x246>
    1bd2:	80 e9       	ldi	r24, 0x90	; 144
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	9c 8f       	std	Y+28, r25	; 0x1c
    1bd8:	8b 8f       	std	Y+27, r24	; 0x1b
    1bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_4bit_init+0x234>
    1be2:	9c 8f       	std	Y+28, r25	; 0x1c
    1be4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9e 8f       	std	Y+30, r25	; 0x1e
    1bee:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <LCD_4bit_init+0x228>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <LCD_4bit_init+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bfc:	78 a1       	ldd	r23, Y+32	; 0x20
    1bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1c00:	9a a1       	ldd	r25, Y+34	; 0x22
    1c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c12:	9a 8f       	std	Y+26, r25	; 0x1a
    1c14:	89 8f       	std	Y+25, r24	; 0x19
    1c16:	89 8d       	ldd	r24, Y+25	; 0x19
    1c18:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_4bit_init+0x270>
    1c1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c20:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    1c22:	8f a9       	ldd	r24, Y+55	; 0x37
    1c24:	98 ad       	ldd	r25, Y+56	; 0x38
    1c26:	68 e2       	ldi	r22, 0x28	; 40
    1c28:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	8e a9       	ldd	r24, Y+54	; 0x36
    1c30:	89 23       	and	r24, r25
    1c32:	8e ab       	std	Y+54, r24	; 0x36
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a6 e1       	ldi	r26, 0x16	; 22
    1c3a:	b3 e4       	ldi	r27, 0x43	; 67
    1c3c:	8d 8b       	std	Y+21, r24	; 0x15
    1c3e:	9e 8b       	std	Y+22, r25	; 0x16
    1c40:	af 8b       	std	Y+23, r26	; 0x17
    1c42:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c44:	6d 89       	ldd	r22, Y+21	; 0x15
    1c46:	7e 89       	ldd	r23, Y+22	; 0x16
    1c48:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4c:	2b ea       	ldi	r18, 0xAB	; 171
    1c4e:	3a ea       	ldi	r19, 0xAA	; 170
    1c50:	4a ea       	ldi	r20, 0xAA	; 170
    1c52:	50 e4       	ldi	r21, 0x40	; 64
    1c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	89 8b       	std	Y+17, r24	; 0x11
    1c5e:	9a 8b       	std	Y+18, r25	; 0x12
    1c60:	ab 8b       	std	Y+19, r26	; 0x13
    1c62:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c64:	69 89       	ldd	r22, Y+17	; 0x11
    1c66:	7a 89       	ldd	r23, Y+18	; 0x12
    1c68:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	1c f4       	brge	.+6      	; 0x1c82 <LCD_4bit_init+0x2d8>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	88 8b       	std	Y+16, r24	; 0x10
    1c80:	91 c0       	rjmp	.+290    	; 0x1da4 <LCD_4bit_init+0x3fa>
	else if (__tmp > 255)
    1c82:	69 89       	ldd	r22, Y+17	; 0x11
    1c84:	7a 89       	ldd	r23, Y+18	; 0x12
    1c86:	8b 89       	ldd	r24, Y+19	; 0x13
    1c88:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	53 e4       	ldi	r21, 0x43	; 67
    1c92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <LCD_4bit_init+0x2f2>
    1c9a:	7b c0       	rjmp	.+246    	; 0x1d92 <LCD_4bit_init+0x3e8>
	{
		_delay_ms(__us / 1000.0);
    1c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a e7       	ldi	r20, 0x7A	; 122
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8c 87       	std	Y+12, r24	; 0x0c
    1cb6:	9d 87       	std	Y+13, r25	; 0x0d
    1cb8:	ae 87       	std	Y+14, r26	; 0x0e
    1cba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	55 e4       	ldi	r21, 0x45	; 69
    1ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	88 87       	std	Y+8, r24	; 0x08
    1cd6:	99 87       	std	Y+9, r25	; 0x09
    1cd8:	aa 87       	std	Y+10, r26	; 0x0a
    1cda:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1cdc:	68 85       	ldd	r22, Y+8	; 0x08
    1cde:	79 85       	ldd	r23, Y+9	; 0x09
    1ce0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <LCD_4bit_init+0x354>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9f 83       	std	Y+7, r25	; 0x07
    1cfa:	8e 83       	std	Y+6, r24	; 0x06
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <LCD_4bit_init+0x3d2>
	else if (__tmp > 65535)
    1cfe:	68 85       	ldd	r22, Y+8	; 0x08
    1d00:	79 85       	ldd	r23, Y+9	; 0x09
    1d02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <LCD_4bit_init+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d18:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9f 83       	std	Y+7, r25	; 0x07
    1d3c:	8e 83       	std	Y+6, r24	; 0x06
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <LCD_4bit_init+0x3b4>
    1d40:	80 e9       	ldi	r24, 0x90	; 144
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	9d 83       	std	Y+5, r25	; 0x05
    1d46:	8c 83       	std	Y+4, r24	; 0x04
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_4bit_init+0x3a2>
    1d50:	9d 83       	std	Y+5, r25	; 0x05
    1d52:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8e 81       	ldd	r24, Y+6	; 0x06
    1d56:	9f 81       	ldd	r25, Y+7	; 0x07
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9f 83       	std	Y+7, r25	; 0x07
    1d5c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d60:	9f 81       	ldd	r25, Y+7	; 0x07
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <LCD_4bit_init+0x396>
    1d66:	24 c0       	rjmp	.+72     	; 0x1db0 <LCD_4bit_init+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	68 85       	ldd	r22, Y+8	; 0x08
    1d6a:	79 85       	ldd	r23, Y+9	; 0x09
    1d6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9f 83       	std	Y+7, r25	; 0x07
    1d7a:	8e 83       	std	Y+6, r24	; 0x06
    1d7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d80:	9b 83       	std	Y+3, r25	; 0x03
    1d82:	8a 83       	std	Y+2, r24	; 0x02
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_4bit_init+0x3de>
    1d8c:	9b 83       	std	Y+3, r25	; 0x03
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <LCD_4bit_init+0x406>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d92:	69 89       	ldd	r22, Y+17	; 0x11
    1d94:	7a 89       	ldd	r23, Y+18	; 0x12
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	88 8b       	std	Y+16, r24	; 0x10
    1da4:	88 89       	ldd	r24, Y+16	; 0x10
    1da6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	8a 95       	dec	r24
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_4bit_init+0x400>
    1dae:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    1db0:	8f a9       	ldd	r24, Y+55	; 0x37
    1db2:	98 ad       	ldd	r25, Y+56	; 0x38
    1db4:	68 e2       	ldi	r22, 0x28	; 40
    1db6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1dba:	98 2f       	mov	r25, r24
    1dbc:	8e a9       	ldd	r24, Y+54	; 0x36
    1dbe:	89 23       	and	r24, r25
    1dc0:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_4bit_sendCommand(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
    1dc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc6:	6c e0       	ldi	r22, 0x0C	; 12
    1dc8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1dcc:	98 2f       	mov	r25, r24
    1dce:	8e a9       	ldd	r24, Y+54	; 0x36
    1dd0:	89 23       	and	r24, r25
    1dd2:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_ENTRY_MODE);
    1dd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd8:	66 e0       	ldi	r22, 0x06	; 6
    1dda:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1dde:	98 2f       	mov	r25, r24
    1de0:	8e a9       	ldd	r24, Y+54	; 0x36
    1de2:	89 23       	and	r24, r25
    1de4:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_CLEAR);
    1de6:	8f a9       	ldd	r24, Y+55	; 0x37
    1de8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    1df0:	98 2f       	mov	r25, r24
    1df2:	8e a9       	ldd	r24, Y+54	; 0x36
    1df4:	89 23       	and	r24, r25
    1df6:	8e ab       	std	Y+54, r24	; 0x36

	}
	return error_status;
    1df8:	8e a9       	ldd	r24, Y+54	; 0x36
}
    1dfa:	e8 96       	adiw	r28, 0x38	; 56
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <LCD_4bit_sendCommand>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCommand(const lcd_4bit_t *lcd, uint8 command)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	62 97       	sbiw	r28, 0x12	; 18
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	99 8b       	std	Y+17, r25	; 0x11
    1e22:	88 8b       	std	Y+16, r24	; 0x10
    1e24:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    1e2a:	88 89       	ldd	r24, Y+16	; 0x10
    1e2c:	99 89       	ldd	r25, Y+17	; 0x11
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <LCD_4bit_sendCommand+0x2a>
	{
		error_status = E_NOT_OK;
    1e32:	1f 86       	std	Y+15, r1	; 0x0f
    1e34:	a1 c0       	rjmp	.+322    	; 0x1f78 <LCD_4bit_sendCommand+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
    1e36:	88 89       	ldd	r24, Y+16	; 0x10
    1e38:	99 89       	ldd	r25, Y+17	; 0x11
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1e40:	98 2f       	mov	r25, r24
    1e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e44:	89 23       	and	r24, r25
    1e46:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (command >> 4));	/* Send the higher command nibble first */
    1e48:	8a 89       	ldd	r24, Y+18	; 0x12
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	22 95       	swap	r18
    1e4e:	2f 70       	andi	r18, 0x0F	; 15
    1e50:	88 89       	ldd	r24, Y+16	; 0x10
    1e52:	99 89       	ldd	r25, Y+17	; 0x11
    1e54:	62 2f       	mov	r22, r18
    1e56:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_send4Bits>
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5e:	89 23       	and	r24, r25
    1e60:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    1e62:	88 89       	ldd	r24, Y+16	; 0x10
    1e64:	99 89       	ldd	r25, Y+17	; 0x11
    1e66:	0e 94 01 19 	call	0x3202	; 0x3202 <LCD_4bit_genEnablePulse>
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6e:	89 23       	and	r24, r25
    1e70:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, command);			/* Send the lower command nibble */
    1e72:	88 89       	ldd	r24, Y+16	; 0x10
    1e74:	99 89       	ldd	r25, Y+17	; 0x11
    1e76:	6a 89       	ldd	r22, Y+18	; 0x12
    1e78:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_send4Bits>
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e80:	89 23       	and	r24, r25
    1e82:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    1e84:	88 89       	ldd	r24, Y+16	; 0x10
    1e86:	99 89       	ldd	r25, Y+17	; 0x11
    1e88:	0e 94 01 19 	call	0x3202	; 0x3202 <LCD_4bit_genEnablePulse>
    1e8c:	98 2f       	mov	r25, r24
    1e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e90:	89 23       	and	r24, r25
    1e92:	8f 87       	std	Y+15, r24	; 0x0f
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e4       	ldi	r27, 0x40	; 64
    1e9c:	8b 87       	std	Y+11, r24	; 0x0b
    1e9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ea0:	ad 87       	std	Y+13, r26	; 0x0d
    1ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	55 e4       	ldi	r21, 0x45	; 69
    1eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8f 83       	std	Y+7, r24	; 0x07
    1ebe:	98 87       	std	Y+8, r25	; 0x08
    1ec0:	a9 87       	std	Y+9, r26	; 0x09
    1ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <LCD_4bit_sendCommand+0xda>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <LCD_4bit_sendCommand+0x158>
	else if (__tmp > 65535)
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <LCD_4bit_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <LCD_4bit_sendCommand+0x13a>
    1f28:	80 e9       	ldi	r24, 0x90	; 144
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_4bit_sendCommand+0x128>
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <LCD_4bit_sendCommand+0x11c>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <LCD_4bit_sendCommand+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_4bit_sendCommand+0x164>
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);
	}
	return error_status;
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1f7a:	62 96       	adiw	r28, 0x12	; 18
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <LCD_4bit_sendChar>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendChar(const lcd_4bit_t *lcd, uint8 _char)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	62 97       	sbiw	r28, 0x12	; 18
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	99 8b       	std	Y+17, r25	; 0x11
    1fa2:	88 8b       	std	Y+16, r24	; 0x10
    1fa4:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    1faa:	88 89       	ldd	r24, Y+16	; 0x10
    1fac:	99 89       	ldd	r25, Y+17	; 0x11
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <LCD_4bit_sendChar+0x2a>
	{
		error_status = E_NOT_OK;
    1fb2:	1f 86       	std	Y+15, r1	; 0x0f
    1fb4:	a1 c0       	rjmp	.+322    	; 0x20f8 <LCD_4bit_sendChar+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    1fb6:	88 89       	ldd	r24, Y+16	; 0x10
    1fb8:	99 89       	ldd	r25, Y+17	; 0x11
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	89 23       	and	r24, r25
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    1fc8:	8a 89       	ldd	r24, Y+18	; 0x12
    1fca:	28 2f       	mov	r18, r24
    1fcc:	22 95       	swap	r18
    1fce:	2f 70       	andi	r18, 0x0F	; 15
    1fd0:	88 89       	ldd	r24, Y+16	; 0x10
    1fd2:	99 89       	ldd	r25, Y+17	; 0x11
    1fd4:	62 2f       	mov	r22, r18
    1fd6:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_send4Bits>
    1fda:	98 2f       	mov	r25, r24
    1fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fde:	89 23       	and	r24, r25
    1fe0:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    1fe2:	88 89       	ldd	r24, Y+16	; 0x10
    1fe4:	99 89       	ldd	r25, Y+17	; 0x11
    1fe6:	0e 94 01 19 	call	0x3202	; 0x3202 <LCD_4bit_genEnablePulse>
    1fea:	98 2f       	mov	r25, r24
    1fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fee:	89 23       	and	r24, r25
    1ff0:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    1ff2:	88 89       	ldd	r24, Y+16	; 0x10
    1ff4:	99 89       	ldd	r25, Y+17	; 0x11
    1ff6:	6a 89       	ldd	r22, Y+18	; 0x12
    1ff8:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_send4Bits>
    1ffc:	98 2f       	mov	r25, r24
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	89 23       	and	r24, r25
    2002:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2004:	88 89       	ldd	r24, Y+16	; 0x10
    2006:	99 89       	ldd	r25, Y+17	; 0x11
    2008:	0e 94 01 19 	call	0x3202	; 0x3202 <LCD_4bit_genEnablePulse>
    200c:	98 2f       	mov	r25, r24
    200e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2010:	89 23       	and	r24, r25
    2012:	8f 87       	std	Y+15, r24	; 0x0f
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e0       	ldi	r26, 0x00	; 0
    201a:	b0 e4       	ldi	r27, 0x40	; 64
    201c:	8b 87       	std	Y+11, r24	; 0x0b
    201e:	9c 87       	std	Y+12, r25	; 0x0c
    2020:	ad 87       	std	Y+13, r26	; 0x0d
    2022:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2024:	6b 85       	ldd	r22, Y+11	; 0x0b
    2026:	7c 85       	ldd	r23, Y+12	; 0x0c
    2028:	8d 85       	ldd	r24, Y+13	; 0x0d
    202a:	9e 85       	ldd	r25, Y+14	; 0x0e
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	4a e7       	ldi	r20, 0x7A	; 122
    2032:	55 e4       	ldi	r21, 0x45	; 69
    2034:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	8f 83       	std	Y+7, r24	; 0x07
    203e:	98 87       	std	Y+8, r25	; 0x08
    2040:	a9 87       	std	Y+9, r26	; 0x09
    2042:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2044:	6f 81       	ldd	r22, Y+7	; 0x07
    2046:	78 85       	ldd	r23, Y+8	; 0x08
    2048:	89 85       	ldd	r24, Y+9	; 0x09
    204a:	9a 85       	ldd	r25, Y+10	; 0x0a
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2058:	88 23       	and	r24, r24
    205a:	2c f4       	brge	.+10     	; 0x2066 <LCD_4bit_sendChar+0xda>
		__ticks = 1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9e 83       	std	Y+6, r25	; 0x06
    2062:	8d 83       	std	Y+5, r24	; 0x05
    2064:	3f c0       	rjmp	.+126    	; 0x20e4 <LCD_4bit_sendChar+0x158>
	else if (__tmp > 65535)
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	3f ef       	ldi	r19, 0xFF	; 255
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	57 e4       	ldi	r21, 0x47	; 71
    2076:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    207a:	18 16       	cp	r1, r24
    207c:	4c f5       	brge	.+82     	; 0x20d0 <LCD_4bit_sendChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2080:	7c 85       	ldd	r23, Y+12	; 0x0c
    2082:	8d 85       	ldd	r24, Y+13	; 0x0d
    2084:	9e 85       	ldd	r25, Y+14	; 0x0e
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <LCD_4bit_sendChar+0x13a>
    20a8:	80 e9       	ldi	r24, 0x90	; 144
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	9c 83       	std	Y+4, r25	; 0x04
    20ae:	8b 83       	std	Y+3, r24	; 0x03
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_4bit_sendChar+0x128>
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	8d 81       	ldd	r24, Y+5	; 0x05
    20c8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <LCD_4bit_sendChar+0x11c>
    20ce:	14 c0       	rjmp	.+40     	; 0x20f8 <LCD_4bit_sendChar+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	6f 81       	ldd	r22, Y+7	; 0x07
    20d2:	78 85       	ldd	r23, Y+8	; 0x08
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_4bit_sendChar+0x164>
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);

	}

	return error_status;
    20f8:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    20fa:	62 96       	adiw	r28, 0x12	; 18
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <LCD_4bit_sendCharAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCharAtPosition(const lcd_4bit_t *lcd, uint8 row, uint8 col, uint8 _char)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	64 97       	sbiw	r28, 0x14	; 20
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	99 8b       	std	Y+17, r25	; 0x11
    2122:	88 8b       	std	Y+16, r24	; 0x10
    2124:	6a 8b       	std	Y+18, r22	; 0x12
    2126:	4b 8b       	std	Y+19, r20	; 0x13
    2128:	2c 8b       	std	Y+20, r18	; 0x14
	STD_ReturnType error_status = E_OK;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    212e:	88 89       	ldd	r24, Y+16	; 0x10
    2130:	99 89       	ldd	r25, Y+17	; 0x11
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	11 f4       	brne	.+4      	; 0x213a <LCD_4bit_sendCharAtPosition+0x2e>
	{
		error_status = E_NOT_OK;
    2136:	1f 86       	std	Y+15, r1	; 0x0f
    2138:	a7 c0       	rjmp	.+334    	; 0x2288 <LCD_4bit_sendCharAtPosition+0x17c>
	}
	else
	{

		/* set cursor to the required position */
		LCD_4bit_setCursorLocation(lcd, row, col);
    213a:	88 89       	ldd	r24, Y+16	; 0x10
    213c:	99 89       	ldd	r25, Y+17	; 0x11
    213e:	6a 89       	ldd	r22, Y+18	; 0x12
    2140:	4b 89       	ldd	r20, Y+19	; 0x13
    2142:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <LCD_4bit_setCursorLocation>

		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    2146:	88 89       	ldd	r24, Y+16	; 0x10
    2148:	99 89       	ldd	r25, Y+17	; 0x11
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    2150:	98 2f       	mov	r25, r24
    2152:	8f 85       	ldd	r24, Y+15	; 0x0f
    2154:	89 23       	and	r24, r25
    2156:	8f 87       	std	Y+15, r24	; 0x0f


		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    2158:	8c 89       	ldd	r24, Y+20	; 0x14
    215a:	28 2f       	mov	r18, r24
    215c:	22 95       	swap	r18
    215e:	2f 70       	andi	r18, 0x0F	; 15
    2160:	88 89       	ldd	r24, Y+16	; 0x10
    2162:	99 89       	ldd	r25, Y+17	; 0x11
    2164:	62 2f       	mov	r22, r18
    2166:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_send4Bits>
    216a:	98 2f       	mov	r25, r24
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	89 23       	and	r24, r25
    2170:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2172:	88 89       	ldd	r24, Y+16	; 0x10
    2174:	99 89       	ldd	r25, Y+17	; 0x11
    2176:	0e 94 01 19 	call	0x3202	; 0x3202 <LCD_4bit_genEnablePulse>
    217a:	98 2f       	mov	r25, r24
    217c:	8f 85       	ldd	r24, Y+15	; 0x0f
    217e:	89 23       	and	r24, r25
    2180:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    2182:	88 89       	ldd	r24, Y+16	; 0x10
    2184:	99 89       	ldd	r25, Y+17	; 0x11
    2186:	6c 89       	ldd	r22, Y+20	; 0x14
    2188:	0e 94 ae 18 	call	0x315c	; 0x315c <LCD_send4Bits>
    218c:	98 2f       	mov	r25, r24
    218e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2190:	89 23       	and	r24, r25
    2192:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2194:	88 89       	ldd	r24, Y+16	; 0x10
    2196:	99 89       	ldd	r25, Y+17	; 0x11
    2198:	0e 94 01 19 	call	0x3202	; 0x3202 <LCD_4bit_genEnablePulse>
    219c:	98 2f       	mov	r25, r24
    219e:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a0:	89 23       	and	r24, r25
    21a2:	8f 87       	std	Y+15, r24	; 0x0f
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a0 e0       	ldi	r26, 0x00	; 0
    21aa:	b0 e4       	ldi	r27, 0x40	; 64
    21ac:	8b 87       	std	Y+11, r24	; 0x0b
    21ae:	9c 87       	std	Y+12, r25	; 0x0c
    21b0:	ad 87       	std	Y+13, r26	; 0x0d
    21b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a e7       	ldi	r20, 0x7A	; 122
    21c2:	55 e4       	ldi	r21, 0x45	; 69
    21c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8f 83       	std	Y+7, r24	; 0x07
    21ce:	98 87       	std	Y+8, r25	; 0x08
    21d0:	a9 87       	std	Y+9, r26	; 0x09
    21d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <LCD_4bit_sendCharAtPosition+0xea>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	8d 83       	std	Y+5, r24	; 0x05
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <LCD_4bit_sendCharAtPosition+0x168>
	else if (__tmp > 65535)
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	4f e7       	ldi	r20, 0x7F	; 127
    2204:	57 e4       	ldi	r21, 0x47	; 71
    2206:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    220a:	18 16       	cp	r1, r24
    220c:	4c f5       	brge	.+82     	; 0x2260 <LCD_4bit_sendCharAtPosition+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_4bit_sendCharAtPosition+0x14a>
    2238:	80 e9       	ldi	r24, 0x90	; 144
    223a:	91 e0       	ldi	r25, 0x01	; 1
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_4bit_sendCharAtPosition+0x138>
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f7       	brne	.-38     	; 0x2238 <LCD_4bit_sendCharAtPosition+0x12c>
    225e:	14 c0       	rjmp	.+40     	; 0x2288 <LCD_4bit_sendCharAtPosition+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2260:	6f 81       	ldd	r22, Y+7	; 0x07
    2262:	78 85       	ldd	r23, Y+8	; 0x08
    2264:	89 85       	ldd	r24, Y+9	; 0x09
    2266:	9a 85       	ldd	r25, Y+10	; 0x0a
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_4bit_sendCharAtPosition+0x174>
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);

	}

	return error_status;
    2288:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    228a:	64 96       	adiw	r28, 0x14	; 20
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <LCD_4bit_sendString>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendString(const lcd_4bit_t *lcd, uint8 * str)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <LCD_4bit_sendString+0x6>
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <LCD_4bit_sendString+0x8>
    22a4:	0f 92       	push	r0
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	9b 83       	std	Y+3, r25	; 0x03
    22ac:	8a 83       	std	Y+2, r24	; 0x02
    22ae:	7d 83       	std	Y+5, r23	; 0x05
    22b0:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	21 f0       	breq	.+8      	; 0x22c6 <LCD_4bit_sendString+0x2a>
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	9d 81       	ldd	r25, Y+5	; 0x05
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	79 f4       	brne	.+30     	; 0x22e4 <LCD_4bit_sendString+0x48>
	{
		error_status = E_NOT_OK;
    22c6:	19 82       	std	Y+1, r1	; 0x01
    22c8:	12 c0       	rjmp	.+36     	; 0x22ee <LCD_4bit_sendString+0x52>
	}
	else
	{
		while(*str)
		{
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
    22ca:	ec 81       	ldd	r30, Y+4	; 0x04
    22cc:	fd 81       	ldd	r31, Y+5	; 0x05
    22ce:	20 81       	ld	r18, Z
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	9d 81       	ldd	r25, Y+5	; 0x05
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	9d 83       	std	Y+5, r25	; 0x05
    22d8:	8c 83       	std	Y+4, r24	; 0x04
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	62 2f       	mov	r22, r18
    22e0:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_4bit_sendChar>
	{
		error_status = E_NOT_OK;
	}
	else
	{
		while(*str)
    22e4:	ec 81       	ldd	r30, Y+4	; 0x04
    22e6:	fd 81       	ldd	r31, Y+5	; 0x05
    22e8:	80 81       	ld	r24, Z
    22ea:	88 23       	and	r24, r24
    22ec:	71 f7       	brne	.-36     	; 0x22ca <LCD_4bit_sendString+0x2e>
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <LCD_4bit_sendStringAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendStringAtPosition(const lcd_4bit_t *lcd, uint8 row, uint8 col, uint8 * str )
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	27 97       	sbiw	r28, 0x07	; 7
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	9b 83       	std	Y+3, r25	; 0x03
    2316:	8a 83       	std	Y+2, r24	; 0x02
    2318:	6c 83       	std	Y+4, r22	; 0x04
    231a:	4d 83       	std	Y+5, r20	; 0x05
    231c:	3f 83       	std	Y+7, r19	; 0x07
    231e:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnType error_status = E_OK;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	21 f0       	breq	.+8      	; 0x2334 <LCD_4bit_sendStringAtPosition+0x34>
    232c:	8e 81       	ldd	r24, Y+6	; 0x06
    232e:	9f 81       	ldd	r25, Y+7	; 0x07
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	11 f4       	brne	.+4      	; 0x2338 <LCD_4bit_sendStringAtPosition+0x38>
	{
		error_status = E_NOT_OK;
    2334:	19 82       	std	Y+1, r1	; 0x01
    2336:	1d c0       	rjmp	.+58     	; 0x2372 <LCD_4bit_sendStringAtPosition+0x72>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_4bit_setCursorLocation(lcd, row, col);
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	6c 81       	ldd	r22, Y+4	; 0x04
    233e:	4d 81       	ldd	r20, Y+5	; 0x05
    2340:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <LCD_4bit_setCursorLocation>
    2344:	98 2f       	mov	r25, r24
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	89 23       	and	r24, r25
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	0d c0       	rjmp	.+26     	; 0x2368 <LCD_4bit_sendStringAtPosition+0x68>
		while(*str)
		{
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
    234e:	ee 81       	ldd	r30, Y+6	; 0x06
    2350:	ff 81       	ldd	r31, Y+7	; 0x07
    2352:	20 81       	ld	r18, Z
    2354:	8e 81       	ldd	r24, Y+6	; 0x06
    2356:	9f 81       	ldd	r25, Y+7	; 0x07
    2358:	01 96       	adiw	r24, 0x01	; 1
    235a:	9f 83       	std	Y+7, r25	; 0x07
    235c:	8e 83       	std	Y+6, r24	; 0x06
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	62 2f       	mov	r22, r18
    2364:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_4bit_sendChar>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_4bit_setCursorLocation(lcd, row, col);
		while(*str)
    2368:	ee 81       	ldd	r30, Y+6	; 0x06
    236a:	ff 81       	ldd	r31, Y+7	; 0x07
    236c:	80 81       	ld	r24, Z
    236e:	88 23       	and	r24, r24
    2370:	71 f7       	brne	.-36     	; 0x234e <LCD_4bit_sendStringAtPosition+0x4e>
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
}
    2374:	27 96       	adiw	r28, 0x07	; 7
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <LCD_4bit_sendCustomCharAtPosition>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCustomCharAtPosition(const lcd_4bit_t *lcd, uint8 * char_arr, uint8 row,\
		uint8 col, uint8 mem_position)
{
    2386:	0f 93       	push	r16
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	29 97       	sbiw	r28, 0x09	; 9
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	7e 83       	std	Y+6, r23	; 0x06
    23a2:	6d 83       	std	Y+5, r22	; 0x05
    23a4:	4f 83       	std	Y+7, r20	; 0x07
    23a6:	28 87       	std	Y+8, r18	; 0x08
    23a8:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnType error_status = E_OK;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd)
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	11 f4       	brne	.+4      	; 0x23ba <LCD_4bit_sendCustomCharAtPosition+0x34>
	{
		error_status = E_NOT_OK;
    23b6:	1a 82       	std	Y+2, r1	; 0x02
    23b8:	36 c0       	rjmp	.+108    	; 0x2426 <LCD_4bit_sendCustomCharAtPosition+0xa0>
	}
	else
	{
		uint8 new_char_counter;
		/* make AC point to the CGRAM memory position point to where the character will be stored */
		error_status = LCD_4bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	88 2f       	mov	r24, r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	08 96       	adiw	r24, 0x08	; 8
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	28 2f       	mov	r18, r24
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	62 2f       	mov	r22, r18
    23d6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    23da:	8a 83       	std	Y+2, r24	; 0x02

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    23dc:	19 82       	std	Y+1, r1	; 0x01
    23de:	15 c0       	rjmp	.+42     	; 0x240a <LCD_4bit_sendCustomCharAtPosition+0x84>
		{
			error_status &= LCD_4bit_sendChar(lcd, char_arr[new_char_counter]);
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	fc 01       	movw	r30, r24
    23ec:	e2 0f       	add	r30, r18
    23ee:	f3 1f       	adc	r31, r19
    23f0:	20 81       	ld	r18, Z
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	62 2f       	mov	r22, r18
    23f8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_4bit_sendChar>
    23fc:	98 2f       	mov	r25, r24
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	89 23       	and	r24, r25
    2402:	8a 83       	std	Y+2, r24	; 0x02
		error_status = LCD_4bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	8f 5f       	subi	r24, 0xFF	; 255
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	88 30       	cpi	r24, 0x08	; 8
    240e:	40 f3       	brcs	.-48     	; 0x23e0 <LCD_4bit_sendCustomCharAtPosition+0x5a>
		{
			error_status &= LCD_4bit_sendChar(lcd, char_arr[new_char_counter]);
		}
		/* return to DDRAM and send the new char */
		error_status &= LCD_4bit_sendCharAtPosition(lcd, row, col, mem_position);
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	6f 81       	ldd	r22, Y+7	; 0x07
    2416:	48 85       	ldd	r20, Y+8	; 0x08
    2418:	29 85       	ldd	r18, Y+9	; 0x09
    241a:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_4bit_sendCharAtPosition>
    241e:	98 2f       	mov	r25, r24
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	89 23       	and	r24, r25
    2424:	8a 83       	std	Y+2, r24	; 0x02
	}

	return error_status;
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2428:	29 96       	adiw	r28, 0x09	; 9
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	0f 91       	pop	r16
    243a:	08 95       	ret

0000243c <LCD_4bit_sendNum>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendNum(const lcd_4bit_t *lcd, uint32 num)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	63 97       	sbiw	r28, 0x13	; 19
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	9f 87       	std	Y+15, r25	; 0x0f
    2452:	8e 87       	std	Y+14, r24	; 0x0e
    2454:	48 8b       	std	Y+16, r20	; 0x10
    2456:	59 8b       	std	Y+17, r21	; 0x11
    2458:	6a 8b       	std	Y+18, r22	; 0x12
    245a:	7b 8b       	std	Y+19, r23	; 0x13
	STD_ReturnType error_status = E_OK;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2460:	8e 85       	ldd	r24, Y+14	; 0x0e
    2462:	9f 85       	ldd	r25, Y+15	; 0x0f
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	11 f4       	brne	.+4      	; 0x246c <LCD_4bit_sendNum+0x30>
	{
		error_status = E_NOT_OK;
    2468:	19 82       	std	Y+1, r1	; 0x01
    246a:	19 c0       	rjmp	.+50     	; 0x249e <LCD_4bit_sendNum+0x62>
	}
	else
	{
		uint8 str[12];											/* to store the converted number */
		error_status  = numToStr(num, str);						/* call the function to convert the number */
    246c:	88 89       	ldd	r24, Y+16	; 0x10
    246e:	99 89       	ldd	r25, Y+17	; 0x11
    2470:	aa 89       	ldd	r26, Y+18	; 0x12
    2472:	bb 89       	ldd	r27, Y+19	; 0x13
    2474:	9e 01       	movw	r18, r28
    2476:	2e 5f       	subi	r18, 0xFE	; 254
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	a9 01       	movw	r20, r18
    2480:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <numToStr>
    2484:	89 83       	std	Y+1, r24	; 0x01
		error_status &= LCD_4bit_sendString(lcd, str);			/* send the string to the LCD */
    2486:	8e 85       	ldd	r24, Y+14	; 0x0e
    2488:	9f 85       	ldd	r25, Y+15	; 0x0f
    248a:	9e 01       	movw	r18, r28
    248c:	2e 5f       	subi	r18, 0xFE	; 254
    248e:	3f 4f       	sbci	r19, 0xFF	; 255
    2490:	b9 01       	movw	r22, r18
    2492:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_4bit_sendString>
    2496:	98 2f       	mov	r25, r24
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	89 23       	and	r24, r25
    249c:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a0:	63 96       	adiw	r28, 0x13	; 19
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <LCD_8bit_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_init(const lcd_8bit_t *lcd)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	e8 97       	sbiw	r28, 0x38	; 56
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	98 af       	std	Y+56, r25	; 0x38
    24c8:	8f ab       	std	Y+55, r24	; 0x37
	STD_ReturnType error_status = E_OK;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	8e ab       	std	Y+54, r24	; 0x36
	if(NULL == lcd)
    24ce:	8f a9       	ldd	r24, Y+55	; 0x37
    24d0:	98 ad       	ldd	r25, Y+56	; 0x38
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	11 f4       	brne	.+4      	; 0x24da <LCD_8bit_init+0x28>
	{
		error_status = E_NOT_OK;
    24d6:	1e aa       	std	Y+54, r1	; 0x36
    24d8:	01 c2       	rjmp	.+1026   	; 0x28dc <LCD_8bit_init+0x42a>
	}
	else
	{
		uint8 data_pin_counter; 										/* To loop through the 8 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
    24da:	8f a9       	ldd	r24, Y+55	; 0x37
    24dc:	98 ad       	ldd	r25, Y+56	; 0x38
    24de:	61 e0       	ldi	r22, 0x01	; 1
    24e0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    24e4:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */
    24e6:	8f a9       	ldd	r24, Y+55	; 0x37
    24e8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    24f2:	98 2f       	mov	r25, r24
    24f4:	8e a9       	ldd	r24, Y+54	; 0x36
    24f6:	89 23       	and	r24, r25
    24f8:	8e ab       	std	Y+54, r24	; 0x36

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    24fa:	1d aa       	std	Y+53, r1	; 0x35
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <LCD_8bit_init+0x74>
		{
			/* make all 8 data pins output pins */
			error_status &= GPIO_pinDirectionInit(&(lcd->data_pin[data_pin_counter]), GPIO_OUTPUT);
    24fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2500:	98 ad       	ldd	r25, Y+56	; 0x38
    2502:	9c 01       	movw	r18, r24
    2504:	2e 5f       	subi	r18, 0xFE	; 254
    2506:	3f 4f       	sbci	r19, 0xFF	; 255
    2508:	8d a9       	ldd	r24, Y+53	; 0x35
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	82 0f       	add	r24, r18
    2510:	93 1f       	adc	r25, r19
    2512:	61 e0       	ldi	r22, 0x01	; 1
    2514:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    2518:	98 2f       	mov	r25, r24
    251a:	8e a9       	ldd	r24, Y+54	; 0x36
    251c:	89 23       	and	r24, r25
    251e:	8e ab       	std	Y+54, r24	; 0x36
	{
		uint8 data_pin_counter; 										/* To loop through the 8 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2520:	8d a9       	ldd	r24, Y+53	; 0x35
    2522:	8f 5f       	subi	r24, 0xFF	; 255
    2524:	8d ab       	std	Y+53, r24	; 0x35
    2526:	8d a9       	ldd	r24, Y+53	; 0x35
    2528:	88 30       	cpi	r24, 0x08	; 8
    252a:	48 f3       	brcs	.-46     	; 0x24fe <LCD_8bit_init+0x4c>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a0 ea       	ldi	r26, 0xA0	; 160
    2532:	b1 e4       	ldi	r27, 0x41	; 65
    2534:	89 ab       	std	Y+49, r24	; 0x31
    2536:	9a ab       	std	Y+50, r25	; 0x32
    2538:	ab ab       	std	Y+51, r26	; 0x33
    253a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	69 a9       	ldd	r22, Y+49	; 0x31
    253e:	7a a9       	ldd	r23, Y+50	; 0x32
    2540:	8b a9       	ldd	r24, Y+51	; 0x33
    2542:	9c a9       	ldd	r25, Y+52	; 0x34
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a e7       	ldi	r20, 0x7A	; 122
    254a:	55 e4       	ldi	r21, 0x45	; 69
    254c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8d a7       	std	Y+45, r24	; 0x2d
    2556:	9e a7       	std	Y+46, r25	; 0x2e
    2558:	af a7       	std	Y+47, r26	; 0x2f
    255a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    255c:	6d a5       	ldd	r22, Y+45	; 0x2d
    255e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2560:	8f a5       	ldd	r24, Y+47	; 0x2f
    2562:	98 a9       	ldd	r25, Y+48	; 0x30
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <LCD_8bit_init+0xcc>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9c a7       	std	Y+44, r25	; 0x2c
    257a:	8b a7       	std	Y+43, r24	; 0x2b
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <LCD_8bit_init+0x14a>
	else if (__tmp > 65535)
    257e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2580:	7e a5       	ldd	r23, Y+46	; 0x2e
    2582:	8f a5       	ldd	r24, Y+47	; 0x2f
    2584:	98 a9       	ldd	r25, Y+48	; 0x30
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <LCD_8bit_init+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	69 a9       	ldd	r22, Y+49	; 0x31
    2598:	7a a9       	ldd	r23, Y+50	; 0x32
    259a:	8b a9       	ldd	r24, Y+51	; 0x33
    259c:	9c a9       	ldd	r25, Y+52	; 0x34
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9c a7       	std	Y+44, r25	; 0x2c
    25bc:	8b a7       	std	Y+43, r24	; 0x2b
    25be:	0f c0       	rjmp	.+30     	; 0x25de <LCD_8bit_init+0x12c>
    25c0:	80 e9       	ldi	r24, 0x90	; 144
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	9a a7       	std	Y+42, r25	; 0x2a
    25c6:	89 a7       	std	Y+41, r24	; 0x29
    25c8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_8bit_init+0x11a>
    25d0:	9a a7       	std	Y+42, r25	; 0x2a
    25d2:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9c a7       	std	Y+44, r25	; 0x2c
    25dc:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <LCD_8bit_init+0x10e>
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <LCD_8bit_init+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    25ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    25ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ee:	98 a9       	ldd	r25, Y+48	; 0x30
    25f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9c a7       	std	Y+44, r25	; 0x2c
    25fa:	8b a7       	std	Y+43, r24	; 0x2b
    25fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2600:	98 a7       	std	Y+40, r25	; 0x28
    2602:	8f a3       	std	Y+39, r24	; 0x27
    2604:	8f a1       	ldd	r24, Y+39	; 0x27
    2606:	98 a5       	ldd	r25, Y+40	; 0x28
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_8bit_init+0x156>
    260c:	98 a7       	std	Y+40, r25	; 0x28
    260e:	8f a3       	std	Y+39, r24	; 0x27
		}

		/* generate a delay of 20 msec at  startup*/
		_delay_ms(20);

		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE); /* set 8 bit mode 2 line */
    2610:	8f a9       	ldd	r24, Y+55	; 0x37
    2612:	98 ad       	ldd	r25, Y+56	; 0x38
    2614:	68 e3       	ldi	r22, 0x38	; 56
    2616:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    261a:	98 2f       	mov	r25, r24
    261c:	8e a9       	ldd	r24, Y+54	; 0x36
    261e:	89 23       	and	r24, r25
    2620:	8e ab       	std	Y+54, r24	; 0x36
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a0 ea       	ldi	r26, 0xA0	; 160
    2628:	b0 e4       	ldi	r27, 0x40	; 64
    262a:	8b a3       	std	Y+35, r24	; 0x23
    262c:	9c a3       	std	Y+36, r25	; 0x24
    262e:	ad a3       	std	Y+37, r26	; 0x25
    2630:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	6b a1       	ldd	r22, Y+35	; 0x23
    2634:	7c a1       	ldd	r23, Y+36	; 0x24
    2636:	8d a1       	ldd	r24, Y+37	; 0x25
    2638:	9e a1       	ldd	r25, Y+38	; 0x26
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	55 e4       	ldi	r21, 0x45	; 69
    2642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8f 8f       	std	Y+31, r24	; 0x1f
    264c:	98 a3       	std	Y+32, r25	; 0x20
    264e:	a9 a3       	std	Y+33, r26	; 0x21
    2650:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2652:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2654:	78 a1       	ldd	r23, Y+32	; 0x20
    2656:	89 a1       	ldd	r24, Y+33	; 0x21
    2658:	9a a1       	ldd	r25, Y+34	; 0x22
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <LCD_8bit_init+0x1c2>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9e 8f       	std	Y+30, r25	; 0x1e
    2670:	8d 8f       	std	Y+29, r24	; 0x1d
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <LCD_8bit_init+0x240>
	else if (__tmp > 65535)
    2674:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2676:	78 a1       	ldd	r23, Y+32	; 0x20
    2678:	89 a1       	ldd	r24, Y+33	; 0x21
    267a:	9a a1       	ldd	r25, Y+34	; 0x22
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <LCD_8bit_init+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	6b a1       	ldd	r22, Y+35	; 0x23
    268e:	7c a1       	ldd	r23, Y+36	; 0x24
    2690:	8d a1       	ldd	r24, Y+37	; 0x25
    2692:	9e a1       	ldd	r25, Y+38	; 0x26
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9e 8f       	std	Y+30, r25	; 0x1e
    26b2:	8d 8f       	std	Y+29, r24	; 0x1d
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <LCD_8bit_init+0x222>
    26b6:	80 e9       	ldi	r24, 0x90	; 144
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	9c 8f       	std	Y+28, r25	; 0x1c
    26bc:	8b 8f       	std	Y+27, r24	; 0x1b
    26be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_8bit_init+0x210>
    26c6:	9c 8f       	std	Y+28, r25	; 0x1c
    26c8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9e 8f       	std	Y+30, r25	; 0x1e
    26d2:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <LCD_8bit_init+0x204>
    26dc:	14 c0       	rjmp	.+40     	; 0x2706 <LCD_8bit_init+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26e0:	78 a1       	ldd	r23, Y+32	; 0x20
    26e2:	89 a1       	ldd	r24, Y+33	; 0x21
    26e4:	9a a1       	ldd	r25, Y+34	; 0x22
    26e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9e 8f       	std	Y+30, r25	; 0x1e
    26f0:	8d 8f       	std	Y+29, r24	; 0x1d
    26f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26f6:	9a 8f       	std	Y+26, r25	; 0x1a
    26f8:	89 8f       	std	Y+25, r24	; 0x19
    26fa:	89 8d       	ldd	r24, Y+25	; 0x19
    26fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_8bit_init+0x24c>
    2702:	9a 8f       	std	Y+26, r25	; 0x1a
    2704:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE);
    2706:	8f a9       	ldd	r24, Y+55	; 0x37
    2708:	98 ad       	ldd	r25, Y+56	; 0x38
    270a:	68 e3       	ldi	r22, 0x38	; 56
    270c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    2710:	98 2f       	mov	r25, r24
    2712:	8e a9       	ldd	r24, Y+54	; 0x36
    2714:	89 23       	and	r24, r25
    2716:	8e ab       	std	Y+54, r24	; 0x36
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a6 e1       	ldi	r26, 0x16	; 22
    271e:	b3 e4       	ldi	r27, 0x43	; 67
    2720:	8d 8b       	std	Y+21, r24	; 0x15
    2722:	9e 8b       	std	Y+22, r25	; 0x16
    2724:	af 8b       	std	Y+23, r26	; 0x17
    2726:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	2b ea       	ldi	r18, 0xAB	; 171
    2732:	3a ea       	ldi	r19, 0xAA	; 170
    2734:	4a ea       	ldi	r20, 0xAA	; 170
    2736:	50 e4       	ldi	r21, 0x40	; 64
    2738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	89 8b       	std	Y+17, r24	; 0x11
    2742:	9a 8b       	std	Y+18, r25	; 0x12
    2744:	ab 8b       	std	Y+19, r26	; 0x13
    2746:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2748:	69 89       	ldd	r22, Y+17	; 0x11
    274a:	7a 89       	ldd	r23, Y+18	; 0x12
    274c:	8b 89       	ldd	r24, Y+19	; 0x13
    274e:	9c 89       	ldd	r25, Y+20	; 0x14
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	1c f4       	brge	.+6      	; 0x2766 <LCD_8bit_init+0x2b4>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	88 8b       	std	Y+16, r24	; 0x10
    2764:	91 c0       	rjmp	.+290    	; 0x2888 <LCD_8bit_init+0x3d6>
	else if (__tmp > 255)
    2766:	69 89       	ldd	r22, Y+17	; 0x11
    2768:	7a 89       	ldd	r23, Y+18	; 0x12
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	53 e4       	ldi	r21, 0x43	; 67
    2776:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	0c f0       	brlt	.+2      	; 0x2780 <LCD_8bit_init+0x2ce>
    277e:	7b c0       	rjmp	.+246    	; 0x2876 <LCD_8bit_init+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a e7       	ldi	r20, 0x7A	; 122
    278e:	54 e4       	ldi	r21, 0x44	; 68
    2790:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	8c 87       	std	Y+12, r24	; 0x0c
    279a:	9d 87       	std	Y+13, r25	; 0x0d
    279c:	ae 87       	std	Y+14, r26	; 0x0e
    279e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    27a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    27a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4a e7       	ldi	r20, 0x7A	; 122
    27ae:	55 e4       	ldi	r21, 0x45	; 69
    27b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	88 87       	std	Y+8, r24	; 0x08
    27ba:	99 87       	std	Y+9, r25	; 0x09
    27bc:	aa 87       	std	Y+10, r26	; 0x0a
    27be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27c0:	68 85       	ldd	r22, Y+8	; 0x08
    27c2:	79 85       	ldd	r23, Y+9	; 0x09
    27c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e8       	ldi	r20, 0x80	; 128
    27ce:	5f e3       	ldi	r21, 0x3F	; 63
    27d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	2c f4       	brge	.+10     	; 0x27e2 <LCD_8bit_init+0x330>
		__ticks = 1;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9f 83       	std	Y+7, r25	; 0x07
    27de:	8e 83       	std	Y+6, r24	; 0x06
    27e0:	3f c0       	rjmp	.+126    	; 0x2860 <LCD_8bit_init+0x3ae>
	else if (__tmp > 65535)
    27e2:	68 85       	ldd	r22, Y+8	; 0x08
    27e4:	79 85       	ldd	r23, Y+9	; 0x09
    27e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	3f ef       	ldi	r19, 0xFF	; 255
    27ee:	4f e7       	ldi	r20, 0x7F	; 127
    27f0:	57 e4       	ldi	r21, 0x47	; 71
    27f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27f6:	18 16       	cp	r1, r24
    27f8:	4c f5       	brge	.+82     	; 0x284c <LCD_8bit_init+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    27fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    27fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2800:	9f 85       	ldd	r25, Y+15	; 0x0f
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e2       	ldi	r20, 0x20	; 32
    2808:	51 e4       	ldi	r21, 0x41	; 65
    280a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9f 83       	std	Y+7, r25	; 0x07
    2820:	8e 83       	std	Y+6, r24	; 0x06
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <LCD_8bit_init+0x390>
    2824:	80 e9       	ldi	r24, 0x90	; 144
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	9d 83       	std	Y+5, r25	; 0x05
    282a:	8c 83       	std	Y+4, r24	; 0x04
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	9d 81       	ldd	r25, Y+5	; 0x05
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_8bit_init+0x37e>
    2834:	9d 83       	std	Y+5, r25	; 0x05
    2836:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2838:	8e 81       	ldd	r24, Y+6	; 0x06
    283a:	9f 81       	ldd	r25, Y+7	; 0x07
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	9f 83       	std	Y+7, r25	; 0x07
    2840:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2842:	8e 81       	ldd	r24, Y+6	; 0x06
    2844:	9f 81       	ldd	r25, Y+7	; 0x07
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	69 f7       	brne	.-38     	; 0x2824 <LCD_8bit_init+0x372>
    284a:	24 c0       	rjmp	.+72     	; 0x2894 <LCD_8bit_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284c:	68 85       	ldd	r22, Y+8	; 0x08
    284e:	79 85       	ldd	r23, Y+9	; 0x09
    2850:	8a 85       	ldd	r24, Y+10	; 0x0a
    2852:	9b 85       	ldd	r25, Y+11	; 0x0b
    2854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9f 83       	std	Y+7, r25	; 0x07
    285e:	8e 83       	std	Y+6, r24	; 0x06
    2860:	8e 81       	ldd	r24, Y+6	; 0x06
    2862:	9f 81       	ldd	r25, Y+7	; 0x07
    2864:	9b 83       	std	Y+3, r25	; 0x03
    2866:	8a 83       	std	Y+2, r24	; 0x02
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <LCD_8bit_init+0x3ba>
    2870:	9b 83       	std	Y+3, r25	; 0x03
    2872:	8a 83       	std	Y+2, r24	; 0x02
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <LCD_8bit_init+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2876:	69 89       	ldd	r22, Y+17	; 0x11
    2878:	7a 89       	ldd	r23, Y+18	; 0x12
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	9c 89       	ldd	r25, Y+20	; 0x14
    287e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	88 8b       	std	Y+16, r24	; 0x10
    2888:	88 89       	ldd	r24, Y+16	; 0x10
    288a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	8a 95       	dec	r24
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_8bit_init+0x3dc>
    2892:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE);
    2894:	8f a9       	ldd	r24, Y+55	; 0x37
    2896:	98 ad       	ldd	r25, Y+56	; 0x38
    2898:	68 e3       	ldi	r22, 0x38	; 56
    289a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    289e:	98 2f       	mov	r25, r24
    28a0:	8e a9       	ldd	r24, Y+54	; 0x36
    28a2:	89 23       	and	r24, r25
    28a4:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_8bit_sendCommand(lcd, _LCD_CLEAR);			  /* clear LCD */
    28a6:	8f a9       	ldd	r24, Y+55	; 0x37
    28a8:	98 ad       	ldd	r25, Y+56	; 0x38
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    28b0:	98 2f       	mov	r25, r24
    28b2:	8e a9       	ldd	r24, Y+54	; 0x36
    28b4:	89 23       	and	r24, r25
    28b6:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_ENTRY_MODE);		  /* increment cursor mode */
    28b8:	8f a9       	ldd	r24, Y+55	; 0x37
    28ba:	98 ad       	ldd	r25, Y+56	; 0x38
    28bc:	66 e0       	ldi	r22, 0x06	; 6
    28be:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    28c2:	98 2f       	mov	r25, r24
    28c4:	8e a9       	ldd	r24, Y+54	; 0x36
    28c6:	89 23       	and	r24, r25
    28c8:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
    28ca:	8f a9       	ldd	r24, Y+55	; 0x37
    28cc:	98 ad       	ldd	r25, Y+56	; 0x38
    28ce:	6c e0       	ldi	r22, 0x0C	; 12
    28d0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    28d4:	98 2f       	mov	r25, r24
    28d6:	8e a9       	ldd	r24, Y+54	; 0x36
    28d8:	89 23       	and	r24, r25
    28da:	8e ab       	std	Y+54, r24	; 0x36
	}

	return error_status;
    28dc:	8e a9       	ldd	r24, Y+54	; 0x36
}
    28de:	e8 96       	adiw	r28, 0x38	; 56
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <LCD_8bit_sendCommand>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCommand(const lcd_8bit_t *lcd, uint8 command)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	63 97       	sbiw	r28, 0x13	; 19
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	9a 8b       	std	Y+18, r25	; 0x12
    2906:	89 8b       	std	Y+17, r24	; 0x11
    2908:	6b 8b       	std	Y+19, r22	; 0x13
	STD_ReturnType error_status = E_OK;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	88 8b       	std	Y+16, r24	; 0x10
	if(NULL == lcd)
    290e:	89 89       	ldd	r24, Y+17	; 0x11
    2910:	9a 89       	ldd	r25, Y+18	; 0x12
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	11 f4       	brne	.+4      	; 0x291a <LCD_8bit_sendCommand+0x2a>
	{
		error_status = E_NOT_OK;
    2916:	18 8a       	std	Y+16, r1	; 0x10
    2918:	a9 c0       	rjmp	.+338    	; 0x2a6c <LCD_8bit_sendCommand+0x17c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	9a 89       	ldd	r25, Y+18	; 0x12
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    2924:	98 2f       	mov	r25, r24
    2926:	88 89       	ldd	r24, Y+16	; 0x10
    2928:	89 23       	and	r24, r25
    292a:	88 8b       	std	Y+16, r24	; 0x10
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    292c:	1f 86       	std	Y+15, r1	; 0x0f
    292e:	25 c0       	rjmp	.+74     	; 0x297a <LCD_8bit_sendCommand+0x8a>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(command, data_pin_counter));
    2930:	89 89       	ldd	r24, Y+17	; 0x11
    2932:	9a 89       	ldd	r25, Y+18	; 0x12
    2934:	9c 01       	movw	r18, r24
    2936:	2e 5f       	subi	r18, 0xFE	; 254
    2938:	3f 4f       	sbci	r19, 0xFF	; 255
    293a:	8f 85       	ldd	r24, Y+15	; 0x0f
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a9 01       	movw	r20, r18
    2942:	48 0f       	add	r20, r24
    2944:	59 1f       	adc	r21, r25
    2946:	8b 89       	ldd	r24, Y+19	; 0x13
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	8f 85       	ldd	r24, Y+15	; 0x0f
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	b9 01       	movw	r22, r18
    2954:	02 c0       	rjmp	.+4      	; 0x295a <LCD_8bit_sendCommand+0x6a>
    2956:	75 95       	asr	r23
    2958:	67 95       	ror	r22
    295a:	8a 95       	dec	r24
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <LCD_8bit_sendCommand+0x66>
    295e:	cb 01       	movw	r24, r22
    2960:	28 2f       	mov	r18, r24
    2962:	21 70       	andi	r18, 0x01	; 1
    2964:	ca 01       	movw	r24, r20
    2966:	62 2f       	mov	r22, r18
    2968:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    296c:	98 2f       	mov	r25, r24
    296e:	88 89       	ldd	r24, Y+16	; 0x10
    2970:	89 23       	and	r24, r25
    2972:	88 8b       	std	Y+16, r24	; 0x10
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2974:	8f 85       	ldd	r24, Y+15	; 0x0f
    2976:	8f 5f       	subi	r24, 0xFF	; 255
    2978:	8f 87       	std	Y+15, r24	; 0x0f
    297a:	8f 85       	ldd	r24, Y+15	; 0x0f
    297c:	88 30       	cpi	r24, 0x08	; 8
    297e:	c0 f2       	brcs	.-80     	; 0x2930 <LCD_8bit_sendCommand+0x40>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(command, data_pin_counter));
		}
		LCD_8bit_genEnablePulse(lcd);
    2980:	89 89       	ldd	r24, Y+17	; 0x11
    2982:	9a 89       	ldd	r25, Y+18	; 0x12
    2984:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_8bit_genEnablePulse>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a0 e0       	ldi	r26, 0x00	; 0
    298e:	b0 e4       	ldi	r27, 0x40	; 64
    2990:	8b 87       	std	Y+11, r24	; 0x0b
    2992:	9c 87       	std	Y+12, r25	; 0x0c
    2994:	ad 87       	std	Y+13, r26	; 0x0d
    2996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	6b 85       	ldd	r22, Y+11	; 0x0b
    299a:	7c 85       	ldd	r23, Y+12	; 0x0c
    299c:	8d 85       	ldd	r24, Y+13	; 0x0d
    299e:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	4a e7       	ldi	r20, 0x7A	; 122
    29a6:	55 e4       	ldi	r21, 0x45	; 69
    29a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	8f 83       	std	Y+7, r24	; 0x07
    29b2:	98 87       	std	Y+8, r25	; 0x08
    29b4:	a9 87       	std	Y+9, r26	; 0x09
    29b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e8       	ldi	r20, 0x80	; 128
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	2c f4       	brge	.+10     	; 0x29da <LCD_8bit_sendCommand+0xea>
		__ticks = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
    29d8:	3f c0       	rjmp	.+126    	; 0x2a58 <LCD_8bit_sendCommand+0x168>
	else if (__tmp > 65535)
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	3f ef       	ldi	r19, 0xFF	; 255
    29e6:	4f e7       	ldi	r20, 0x7F	; 127
    29e8:	57 e4       	ldi	r21, 0x47	; 71
    29ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29ee:	18 16       	cp	r1, r24
    29f0:	4c f5       	brge	.+82     	; 0x2a44 <LCD_8bit_sendCommand+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e2       	ldi	r20, 0x20	; 32
    2a00:	51 e4       	ldi	r21, 0x41	; 65
    2a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9e 83       	std	Y+6, r25	; 0x06
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    2a1a:	0f c0       	rjmp	.+30     	; 0x2a3a <LCD_8bit_sendCommand+0x14a>
    2a1c:	80 e9       	ldi	r24, 0x90	; 144
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	9c 83       	std	Y+4, r25	; 0x04
    2a22:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	9c 81       	ldd	r25, Y+4	; 0x04
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_8bit_sendCommand+0x138>
    2a2c:	9c 83       	std	Y+4, r25	; 0x04
    2a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	9e 83       	std	Y+6, r25	; 0x06
    2a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	69 f7       	brne	.-38     	; 0x2a1c <LCD_8bit_sendCommand+0x12c>
    2a42:	14 c0       	rjmp	.+40     	; 0x2a6c <LCD_8bit_sendCommand+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a44:	6f 81       	ldd	r22, Y+7	; 0x07
    2a46:	78 85       	ldd	r23, Y+8	; 0x08
    2a48:	89 85       	ldd	r24, Y+9	; 0x09
    2a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <LCD_8bit_sendCommand+0x174>
    2a68:	9a 83       	std	Y+2, r25	; 0x02
    2a6a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}

	return error_status;
    2a6c:	88 89       	ldd	r24, Y+16	; 0x10
}
    2a6e:	63 96       	adiw	r28, 0x13	; 19
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <LCD_8bit_sendChar>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendChar(const lcd_8bit_t *lcd, uint8 _char)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	63 97       	sbiw	r28, 0x13	; 19
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	9a 8b       	std	Y+18, r25	; 0x12
    2a96:	89 8b       	std	Y+17, r24	; 0x11
    2a98:	6b 8b       	std	Y+19, r22	; 0x13
	STD_ReturnType error_status = E_OK;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	88 8b       	std	Y+16, r24	; 0x10
	if(NULL == lcd)
    2a9e:	89 89       	ldd	r24, Y+17	; 0x11
    2aa0:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	11 f4       	brne	.+4      	; 0x2aaa <LCD_8bit_sendChar+0x2a>
	{
		error_status = E_NOT_OK;
    2aa6:	18 8a       	std	Y+16, r1	; 0x10
    2aa8:	a9 c0       	rjmp	.+338    	; 0x2bfc <LCD_8bit_sendChar+0x17c>
	}
	else
	{
		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    2aaa:	89 89       	ldd	r24, Y+17	; 0x11
    2aac:	9a 89       	ldd	r25, Y+18	; 0x12
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    2ab4:	98 2f       	mov	r25, r24
    2ab6:	88 89       	ldd	r24, Y+16	; 0x10
    2ab8:	89 23       	and	r24, r25
    2aba:	88 8b       	std	Y+16, r24	; 0x10
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2abc:	1f 86       	std	Y+15, r1	; 0x0f
    2abe:	25 c0       	rjmp	.+74     	; 0x2b0a <LCD_8bit_sendChar+0x8a>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(_char, data_pin_counter));
    2ac0:	89 89       	ldd	r24, Y+17	; 0x11
    2ac2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac4:	9c 01       	movw	r18, r24
    2ac6:	2e 5f       	subi	r18, 0xFE	; 254
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	48 0f       	add	r20, r24
    2ad4:	59 1f       	adc	r21, r25
    2ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad8:	28 2f       	mov	r18, r24
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	b9 01       	movw	r22, r18
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <LCD_8bit_sendChar+0x6a>
    2ae6:	75 95       	asr	r23
    2ae8:	67 95       	ror	r22
    2aea:	8a 95       	dec	r24
    2aec:	e2 f7       	brpl	.-8      	; 0x2ae6 <LCD_8bit_sendChar+0x66>
    2aee:	cb 01       	movw	r24, r22
    2af0:	28 2f       	mov	r18, r24
    2af2:	21 70       	andi	r18, 0x01	; 1
    2af4:	ca 01       	movw	r24, r20
    2af6:	62 2f       	mov	r22, r18
    2af8:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    2afc:	98 2f       	mov	r25, r24
    2afe:	88 89       	ldd	r24, Y+16	; 0x10
    2b00:	89 23       	and	r24, r25
    2b02:	88 8b       	std	Y+16, r24	; 0x10
	{
		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	8f 87       	std	Y+15, r24	; 0x0f
    2b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0c:	88 30       	cpi	r24, 0x08	; 8
    2b0e:	c0 f2       	brcs	.-80     	; 0x2ac0 <LCD_8bit_sendChar+0x40>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(_char, data_pin_counter));
		}
		LCD_8bit_genEnablePulse(lcd);
    2b10:	89 89       	ldd	r24, Y+17	; 0x11
    2b12:	9a 89       	ldd	r25, Y+18	; 0x12
    2b14:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <LCD_8bit_genEnablePulse>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a0 e0       	ldi	r26, 0x00	; 0
    2b1e:	b0 e4       	ldi	r27, 0x40	; 64
    2b20:	8b 87       	std	Y+11, r24	; 0x0b
    2b22:	9c 87       	std	Y+12, r25	; 0x0c
    2b24:	ad 87       	std	Y+13, r26	; 0x0d
    2b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	55 e4       	ldi	r21, 0x45	; 69
    2b38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8f 83       	std	Y+7, r24	; 0x07
    2b42:	98 87       	std	Y+8, r25	; 0x08
    2b44:	a9 87       	std	Y+9, r26	; 0x09
    2b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <LCD_8bit_sendChar+0xea>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <LCD_8bit_sendChar+0x168>
	else if (__tmp > 65535)
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <LCD_8bit_sendChar+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <LCD_8bit_sendChar+0x14a>
    2bac:	80 e9       	ldi	r24, 0x90	; 144
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_8bit_sendChar+0x138>
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <LCD_8bit_sendChar+0x12c>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <LCD_8bit_sendChar+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd6:	78 85       	ldd	r23, Y+8	; 0x08
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_8bit_sendChar+0x174>
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}

	return error_status;
    2bfc:	88 89       	ldd	r24, Y+16	; 0x10
}
    2bfe:	63 96       	adiw	r28, 0x13	; 19
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <LCD_8bit_sendCharAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCharAtPosition(const lcd_8bit_t *lcd, uint8 row, uint8 col, uint8 _char)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	64 97       	sbiw	r28, 0x14	; 20
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	99 8b       	std	Y+17, r25	; 0x11
    2c26:	88 8b       	std	Y+16, r24	; 0x10
    2c28:	6a 8b       	std	Y+18, r22	; 0x12
    2c2a:	4b 8b       	std	Y+19, r20	; 0x13
    2c2c:	2c 8b       	std	Y+20, r18	; 0x14
	STD_ReturnType error_status = E_OK;
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    2c32:	88 89       	ldd	r24, Y+16	; 0x10
    2c34:	99 89       	ldd	r25, Y+17	; 0x11
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	11 f4       	brne	.+4      	; 0x2c3e <LCD_8bit_sendCharAtPosition+0x2e>
	{
		error_status = E_NOT_OK;
    2c3a:	1f 86       	std	Y+15, r1	; 0x0f
    2c3c:	8a c0       	rjmp	.+276    	; 0x2d52 <LCD_8bit_sendCharAtPosition+0x142>
	}
	else
	{
		/* set cursor to the required position */
		LCD_8bit_setCursorLocation(lcd, row, col);
    2c3e:	88 89       	ldd	r24, Y+16	; 0x10
    2c40:	99 89       	ldd	r25, Y+17	; 0x11
    2c42:	6a 89       	ldd	r22, Y+18	; 0x12
    2c44:	4b 89       	ldd	r20, Y+19	; 0x13
    2c46:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_8bit_setCursorLocation>

		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    2c4a:	88 89       	ldd	r24, Y+16	; 0x10
    2c4c:	99 89       	ldd	r25, Y+17	; 0x11
    2c4e:	61 e0       	ldi	r22, 0x01	; 1
    2c50:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    2c54:	98 2f       	mov	r25, r24
    2c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c58:	89 23       	and	r24, r25
    2c5a:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_8bit_sendChar(lcd, _char);
    2c5c:	88 89       	ldd	r24, Y+16	; 0x10
    2c5e:	99 89       	ldd	r25, Y+17	; 0x11
    2c60:	6c 89       	ldd	r22, Y+20	; 0x14
    2c62:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_8bit_sendChar>
    2c66:	98 2f       	mov	r25, r24
    2c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6a:	89 23       	and	r24, r25
    2c6c:	8f 87       	std	Y+15, r24	; 0x0f
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a0 e0       	ldi	r26, 0x00	; 0
    2c74:	b0 e4       	ldi	r27, 0x40	; 64
    2c76:	8b 87       	std	Y+11, r24	; 0x0b
    2c78:	9c 87       	std	Y+12, r25	; 0x0c
    2c7a:	ad 87       	std	Y+13, r26	; 0x0d
    2c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a e7       	ldi	r20, 0x7A	; 122
    2c8c:	55 e4       	ldi	r21, 0x45	; 69
    2c8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8f 83       	std	Y+7, r24	; 0x07
    2c98:	98 87       	std	Y+8, r25	; 0x08
    2c9a:	a9 87       	std	Y+9, r26	; 0x09
    2c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e8       	ldi	r20, 0x80	; 128
    2cac:	5f e3       	ldi	r21, 0x3F	; 63
    2cae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cb2:	88 23       	and	r24, r24
    2cb4:	2c f4       	brge	.+10     	; 0x2cc0 <LCD_8bit_sendCharAtPosition+0xb0>
		__ticks = 1;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	3f c0       	rjmp	.+126    	; 0x2d3e <LCD_8bit_sendCharAtPosition+0x12e>
	else if (__tmp > 65535)
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	3f ef       	ldi	r19, 0xFF	; 255
    2ccc:	4f e7       	ldi	r20, 0x7F	; 127
    2cce:	57 e4       	ldi	r21, 0x47	; 71
    2cd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cd4:	18 16       	cp	r1, r24
    2cd6:	4c f5       	brge	.+82     	; 0x2d2a <LCD_8bit_sendCharAtPosition+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e2       	ldi	r20, 0x20	; 32
    2ce6:	51 e4       	ldi	r21, 0x41	; 65
    2ce8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <LCD_8bit_sendCharAtPosition+0x110>
    2d02:	80 e9       	ldi	r24, 0x90	; 144
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_8bit_sendCharAtPosition+0xfe>
    2d12:	9c 83       	std	Y+4, r25	; 0x04
    2d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	9e 83       	std	Y+6, r25	; 0x06
    2d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	69 f7       	brne	.-38     	; 0x2d02 <LCD_8bit_sendCharAtPosition+0xf2>
    2d28:	14 c0       	rjmp	.+40     	; 0x2d52 <LCD_8bit_sendCharAtPosition+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2c:	78 85       	ldd	r23, Y+8	; 0x08
    2d2e:	89 85       	ldd	r24, Y+9	; 0x09
    2d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d40:	9e 81       	ldd	r25, Y+6	; 0x06
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_8bit_sendCharAtPosition+0x13a>
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);
	}

	return error_status;
    2d52:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2d54:	64 96       	adiw	r28, 0x14	; 20
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <LCD_8bit_sendString>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendString(const lcd_8bit_t *lcd, uint8 * str)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <LCD_8bit_sendString+0x6>
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <LCD_8bit_sendString+0x8>
    2d6e:	0f 92       	push	r0
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	9b 83       	std	Y+3, r25	; 0x03
    2d76:	8a 83       	std	Y+2, r24	; 0x02
    2d78:	7d 83       	std	Y+5, r23	; 0x05
    2d7a:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	21 f0       	breq	.+8      	; 0x2d90 <LCD_8bit_sendString+0x2a>
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	79 f4       	brne	.+30     	; 0x2dae <LCD_8bit_sendString+0x48>
	{
		error_status = E_NOT_OK;
    2d90:	19 82       	std	Y+1, r1	; 0x01
    2d92:	12 c0       	rjmp	.+36     	; 0x2db8 <LCD_8bit_sendString+0x52>
	}
	else
	{
		while(*str)
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
    2d94:	ec 81       	ldd	r30, Y+4	; 0x04
    2d96:	fd 81       	ldd	r31, Y+5	; 0x05
    2d98:	20 81       	ld	r18, Z
    2d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9e:	01 96       	adiw	r24, 0x01	; 1
    2da0:	9d 83       	std	Y+5, r25	; 0x05
    2da2:	8c 83       	std	Y+4, r24	; 0x04
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	9b 81       	ldd	r25, Y+3	; 0x03
    2da8:	62 2f       	mov	r22, r18
    2daa:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_8bit_sendChar>
	{
		error_status = E_NOT_OK;
	}
	else
	{
		while(*str)
    2dae:	ec 81       	ldd	r30, Y+4	; 0x04
    2db0:	fd 81       	ldd	r31, Y+5	; 0x05
    2db2:	80 81       	ld	r24, Z
    2db4:	88 23       	and	r24, r24
    2db6:	71 f7       	brne	.-36     	; 0x2d94 <LCD_8bit_sendString+0x2e>
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}
	}

	return error_status;
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <LCD_8bit_sendStringAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendStringAtPosition(const lcd_8bit_t *lcd, uint8 row, uint8 col, uint8 * str )
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	27 97       	sbiw	r28, 0x07	; 7
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	9b 83       	std	Y+3, r25	; 0x03
    2de0:	8a 83       	std	Y+2, r24	; 0x02
    2de2:	6c 83       	std	Y+4, r22	; 0x04
    2de4:	4d 83       	std	Y+5, r20	; 0x05
    2de6:	3f 83       	std	Y+7, r19	; 0x07
    2de8:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnType error_status = E_OK;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	9b 81       	ldd	r25, Y+3	; 0x03
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	21 f0       	breq	.+8      	; 0x2dfe <LCD_8bit_sendStringAtPosition+0x34>
    2df6:	8e 81       	ldd	r24, Y+6	; 0x06
    2df8:	9f 81       	ldd	r25, Y+7	; 0x07
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	11 f4       	brne	.+4      	; 0x2e02 <LCD_8bit_sendStringAtPosition+0x38>
	{
		error_status = E_NOT_OK;
    2dfe:	19 82       	std	Y+1, r1	; 0x01
    2e00:	1d c0       	rjmp	.+58     	; 0x2e3c <LCD_8bit_sendStringAtPosition+0x72>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_8bit_setCursorLocation(lcd, row, col);
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	6c 81       	ldd	r22, Y+4	; 0x04
    2e08:	4d 81       	ldd	r20, Y+5	; 0x05
    2e0a:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_8bit_setCursorLocation>
    2e0e:	98 2f       	mov	r25, r24
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	89 23       	and	r24, r25
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	0d c0       	rjmp	.+26     	; 0x2e32 <LCD_8bit_sendStringAtPosition+0x68>
		while(*str)
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
    2e18:	ee 81       	ldd	r30, Y+6	; 0x06
    2e1a:	ff 81       	ldd	r31, Y+7	; 0x07
    2e1c:	20 81       	ld	r18, Z
    2e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e20:	9f 81       	ldd	r25, Y+7	; 0x07
    2e22:	01 96       	adiw	r24, 0x01	; 1
    2e24:	9f 83       	std	Y+7, r25	; 0x07
    2e26:	8e 83       	std	Y+6, r24	; 0x06
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2c:	62 2f       	mov	r22, r18
    2e2e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_8bit_sendChar>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_8bit_setCursorLocation(lcd, row, col);
		while(*str)
    2e32:	ee 81       	ldd	r30, Y+6	; 0x06
    2e34:	ff 81       	ldd	r31, Y+7	; 0x07
    2e36:	80 81       	ld	r24, Z
    2e38:	88 23       	and	r24, r24
    2e3a:	71 f7       	brne	.-36     	; 0x2e18 <LCD_8bit_sendStringAtPosition+0x4e>
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e3e:	27 96       	adiw	r28, 0x07	; 7
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <LCD_8bit_sendCustomCharAtPosition>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCustomCharAtPosition(const lcd_8bit_t *lcd, uint8 * char_arr, uint8 row,\
													uint8 col, uint8 mem_position)
{
    2e50:	0f 93       	push	r16
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	29 97       	sbiw	r28, 0x09	; 9
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	9c 83       	std	Y+4, r25	; 0x04
    2e68:	8b 83       	std	Y+3, r24	; 0x03
    2e6a:	7e 83       	std	Y+6, r23	; 0x06
    2e6c:	6d 83       	std	Y+5, r22	; 0x05
    2e6e:	4f 83       	std	Y+7, r20	; 0x07
    2e70:	28 87       	std	Y+8, r18	; 0x08
    2e72:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnType error_status = E_OK;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd)
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	11 f4       	brne	.+4      	; 0x2e84 <LCD_8bit_sendCustomCharAtPosition+0x34>
	{
		error_status = E_NOT_OK;
    2e80:	1a 82       	std	Y+2, r1	; 0x02
    2e82:	36 c0       	rjmp	.+108    	; 0x2ef0 <LCD_8bit_sendCustomCharAtPosition+0xa0>
	}
	else
	{
		uint8 new_char_counter;
		/* make AC point to the CGRAM memory position point to where the character will be stored */
		error_status = LCD_8bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	08 96       	adiw	r24, 0x08	; 8
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	28 2f       	mov	r18, r24
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	62 2f       	mov	r22, r18
    2ea0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    2ea4:	8a 83       	std	Y+2, r24	; 0x02

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    2ea6:	19 82       	std	Y+1, r1	; 0x01
    2ea8:	15 c0       	rjmp	.+42     	; 0x2ed4 <LCD_8bit_sendCustomCharAtPosition+0x84>
		{
			error_status &= LCD_8bit_sendChar(lcd, char_arr[new_char_counter]);
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	e2 0f       	add	r30, r18
    2eb8:	f3 1f       	adc	r31, r19
    2eba:	20 81       	ld	r18, Z
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec0:	62 2f       	mov	r22, r18
    2ec2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <LCD_8bit_sendChar>
    2ec6:	98 2f       	mov	r25, r24
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	89 23       	and	r24, r25
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
		error_status = LCD_8bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	8f 5f       	subi	r24, 0xFF	; 255
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	88 30       	cpi	r24, 0x08	; 8
    2ed8:	40 f3       	brcs	.-48     	; 0x2eaa <LCD_8bit_sendCustomCharAtPosition+0x5a>
		{
			error_status &= LCD_8bit_sendChar(lcd, char_arr[new_char_counter]);
		}
		/* return to DDRAM and send the new char */
		error_status &= LCD_8bit_sendCharAtPosition(lcd, row, col, mem_position);
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ede:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee0:	48 85       	ldd	r20, Y+8	; 0x08
    2ee2:	29 85       	ldd	r18, Y+9	; 0x09
    2ee4:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_8bit_sendCharAtPosition>
    2ee8:	98 2f       	mov	r25, r24
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	89 23       	and	r24, r25
    2eee:	8a 83       	std	Y+2, r24	; 0x02

	}

	return error_status;
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ef2:	29 96       	adiw	r28, 0x09	; 9
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	0f 91       	pop	r16
    2f04:	08 95       	ret

00002f06 <LCD_8bit_sendNum>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendNum(const lcd_8bit_t *lcd, uint32 num)
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	63 97       	sbiw	r28, 0x13	; 19
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	9f 87       	std	Y+15, r25	; 0x0f
    2f1c:	8e 87       	std	Y+14, r24	; 0x0e
    2f1e:	48 8b       	std	Y+16, r20	; 0x10
    2f20:	59 8b       	std	Y+17, r21	; 0x11
    2f22:	6a 8b       	std	Y+18, r22	; 0x12
    2f24:	7b 8b       	std	Y+19, r23	; 0x13
	STD_ReturnType error_status = E_OK;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2f2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	11 f4       	brne	.+4      	; 0x2f36 <LCD_8bit_sendNum+0x30>
	{
		error_status = E_NOT_OK;
    2f32:	19 82       	std	Y+1, r1	; 0x01
    2f34:	19 c0       	rjmp	.+50     	; 0x2f68 <LCD_8bit_sendNum+0x62>
	}
	else
	{
		uint8 str[12];											/* to store the converted number */
		error_status  = numToStr(num, str);						/* call the function to convert the number */
    2f36:	88 89       	ldd	r24, Y+16	; 0x10
    2f38:	99 89       	ldd	r25, Y+17	; 0x11
    2f3a:	aa 89       	ldd	r26, Y+18	; 0x12
    2f3c:	bb 89       	ldd	r27, Y+19	; 0x13
    2f3e:	9e 01       	movw	r18, r28
    2f40:	2e 5f       	subi	r18, 0xFE	; 254
    2f42:	3f 4f       	sbci	r19, 0xFF	; 255
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	a9 01       	movw	r20, r18
    2f4a:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <numToStr>
    2f4e:	89 83       	std	Y+1, r24	; 0x01
		error_status &= LCD_8bit_sendString(lcd, str);			/* send the string to the LCD */
    2f50:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f52:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f54:	9e 01       	movw	r18, r28
    2f56:	2e 5f       	subi	r18, 0xFE	; 254
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	b9 01       	movw	r22, r18
    2f5c:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_8bit_sendString>
    2f60:	98 2f       	mov	r25, r24
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	89 23       	and	r24, r25
    2f66:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6a:	63 96       	adiw	r28, 0x13	; 19
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	08 95       	ret

00002f7c <LCD_4bit_setCursorLocation>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_setCursorLocation(const lcd_4bit_t *lcd, uint8 row, uint8 col)
{
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	27 97       	sbiw	r28, 0x07	; 7
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	9b 83       	std	Y+3, r25	; 0x03
    2f92:	8a 83       	std	Y+2, r24	; 0x02
    2f94:	6c 83       	std	Y+4, r22	; 0x04
    2f96:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnType error_status = E_OK;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	11 f4       	brne	.+4      	; 0x2fa8 <LCD_4bit_setCursorLocation+0x2c>
	{
		error_status = E_NOT_OK;
    2fa4:	19 82       	std	Y+1, r1	; 0x01
    2fa6:	58 c0       	rjmp	.+176    	; 0x3058 <LCD_4bit_setCursorLocation+0xdc>
	}
	else
	{
		col--;
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	81 50       	subi	r24, 0x01	; 1
    2fac:	8d 83       	std	Y+5, r24	; 0x05
		/* check row value */
		switch(row)
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	28 2f       	mov	r18, r24
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	3f 83       	std	Y+7, r19	; 0x07
    2fb6:	2e 83       	std	Y+6, r18	; 0x06
    2fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fba:	9f 81       	ldd	r25, Y+7	; 0x07
    2fbc:	82 30       	cpi	r24, 0x02	; 2
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	19 f1       	breq	.+70     	; 0x3008 <LCD_4bit_setCursorLocation+0x8c>
    2fc2:	2e 81       	ldd	r18, Y+6	; 0x06
    2fc4:	3f 81       	ldd	r19, Y+7	; 0x07
    2fc6:	23 30       	cpi	r18, 0x03	; 3
    2fc8:	31 05       	cpc	r19, r1
    2fca:	34 f4       	brge	.+12     	; 0x2fd8 <LCD_4bit_setCursorLocation+0x5c>
    2fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fce:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd0:	81 30       	cpi	r24, 0x01	; 1
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	61 f0       	breq	.+24     	; 0x2fee <LCD_4bit_setCursorLocation+0x72>
    2fd6:	3f c0       	rjmp	.+126    	; 0x3056 <LCD_4bit_setCursorLocation+0xda>
    2fd8:	2e 81       	ldd	r18, Y+6	; 0x06
    2fda:	3f 81       	ldd	r19, Y+7	; 0x07
    2fdc:	23 30       	cpi	r18, 0x03	; 3
    2fde:	31 05       	cpc	r19, r1
    2fe0:	01 f1       	breq	.+64     	; 0x3022 <LCD_4bit_setCursorLocation+0xa6>
    2fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe6:	84 30       	cpi	r24, 0x04	; 4
    2fe8:	91 05       	cpc	r25, r1
    2fea:	41 f1       	breq	.+80     	; 0x303c <LCD_4bit_setCursorLocation+0xc0>
    2fec:	34 c0       	rjmp	.+104    	; 0x3056 <LCD_4bit_setCursorLocation+0xda>
		{
		case ROW1:
			/* address format is 1 A6 A5 A4 A3 A2 A1 A0,
			 * so, we add 0x80 to the base address of every row */

			error_status &= LCD_4bit_sendCommand(lcd, (0x80 + col)); /* first row start address is 0x00 */
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	20 58       	subi	r18, 0x80	; 128
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff8:	62 2f       	mov	r22, r18
    2ffa:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    2ffe:	98 2f       	mov	r25, r24
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	89 23       	and	r24, r25
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	28 c0       	rjmp	.+80     	; 0x3058 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW2:
			error_status &= LCD_4bit_sendCommand(lcd, (0xC0 + col)); /* second row start address is 0x40 */
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	28 2f       	mov	r18, r24
    300c:	20 54       	subi	r18, 0x40	; 64
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	9b 81       	ldd	r25, Y+3	; 0x03
    3012:	62 2f       	mov	r22, r18
    3014:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    3018:	98 2f       	mov	r25, r24
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	89 23       	and	r24, r25
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	1b c0       	rjmp	.+54     	; 0x3058 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW3:
			error_status &= LCD_4bit_sendCommand(lcd, (0x94 + col)); /* third row start address is 0x14 */
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	28 2f       	mov	r18, r24
    3026:	2c 56       	subi	r18, 0x6C	; 108
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	9b 81       	ldd	r25, Y+3	; 0x03
    302c:	62 2f       	mov	r22, r18
    302e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    3032:	98 2f       	mov	r25, r24
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	89 23       	and	r24, r25
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	0e c0       	rjmp	.+28     	; 0x3058 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW4:
			error_status &= LCD_4bit_sendCommand(lcd, (0xD4 + col)); /* fourth row start address is 0x54 */
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	28 2f       	mov	r18, r24
    3040:	2c 52       	subi	r18, 0x2C	; 44
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	9b 81       	ldd	r25, Y+3	; 0x03
    3046:	62 2f       	mov	r22, r18
    3048:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    304c:	98 2f       	mov	r25, r24
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	89 23       	and	r24, r25
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	01 c0       	rjmp	.+2      	; 0x3058 <LCD_4bit_setCursorLocation+0xdc>
			break;

		default:
			error_status = E_NOT_OK;
    3056:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    3058:	89 81       	ldd	r24, Y+1	; 0x01
}
    305a:	27 96       	adiw	r28, 0x07	; 7
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <LCD_8bit_setCursorLocation>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_setCursorLocation(const lcd_8bit_t *lcd, uint8 row, uint8 col)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	27 97       	sbiw	r28, 0x07	; 7
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	de bf       	out	0x3e, r29	; 62
    307c:	0f be       	out	0x3f, r0	; 63
    307e:	cd bf       	out	0x3d, r28	; 61
    3080:	9b 83       	std	Y+3, r25	; 0x03
    3082:	8a 83       	std	Y+2, r24	; 0x02
    3084:	6c 83       	std	Y+4, r22	; 0x04
    3086:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnType error_status = E_OK;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	9b 81       	ldd	r25, Y+3	; 0x03
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	11 f4       	brne	.+4      	; 0x3098 <LCD_8bit_setCursorLocation+0x2c>
	{
		error_status = E_NOT_OK;
    3094:	19 82       	std	Y+1, r1	; 0x01
    3096:	58 c0       	rjmp	.+176    	; 0x3148 <LCD_8bit_setCursorLocation+0xdc>
	}
	else
	{
		col--;
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
    309a:	81 50       	subi	r24, 0x01	; 1
    309c:	8d 83       	std	Y+5, r24	; 0x05
		/* check row value */
		switch(row)
    309e:	8c 81       	ldd	r24, Y+4	; 0x04
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	3f 83       	std	Y+7, r19	; 0x07
    30a6:	2e 83       	std	Y+6, r18	; 0x06
    30a8:	8e 81       	ldd	r24, Y+6	; 0x06
    30aa:	9f 81       	ldd	r25, Y+7	; 0x07
    30ac:	82 30       	cpi	r24, 0x02	; 2
    30ae:	91 05       	cpc	r25, r1
    30b0:	19 f1       	breq	.+70     	; 0x30f8 <LCD_8bit_setCursorLocation+0x8c>
    30b2:	2e 81       	ldd	r18, Y+6	; 0x06
    30b4:	3f 81       	ldd	r19, Y+7	; 0x07
    30b6:	23 30       	cpi	r18, 0x03	; 3
    30b8:	31 05       	cpc	r19, r1
    30ba:	34 f4       	brge	.+12     	; 0x30c8 <LCD_8bit_setCursorLocation+0x5c>
    30bc:	8e 81       	ldd	r24, Y+6	; 0x06
    30be:	9f 81       	ldd	r25, Y+7	; 0x07
    30c0:	81 30       	cpi	r24, 0x01	; 1
    30c2:	91 05       	cpc	r25, r1
    30c4:	61 f0       	breq	.+24     	; 0x30de <LCD_8bit_setCursorLocation+0x72>
    30c6:	3f c0       	rjmp	.+126    	; 0x3146 <LCD_8bit_setCursorLocation+0xda>
    30c8:	2e 81       	ldd	r18, Y+6	; 0x06
    30ca:	3f 81       	ldd	r19, Y+7	; 0x07
    30cc:	23 30       	cpi	r18, 0x03	; 3
    30ce:	31 05       	cpc	r19, r1
    30d0:	01 f1       	breq	.+64     	; 0x3112 <LCD_8bit_setCursorLocation+0xa6>
    30d2:	8e 81       	ldd	r24, Y+6	; 0x06
    30d4:	9f 81       	ldd	r25, Y+7	; 0x07
    30d6:	84 30       	cpi	r24, 0x04	; 4
    30d8:	91 05       	cpc	r25, r1
    30da:	41 f1       	breq	.+80     	; 0x312c <LCD_8bit_setCursorLocation+0xc0>
    30dc:	34 c0       	rjmp	.+104    	; 0x3146 <LCD_8bit_setCursorLocation+0xda>
		{
		case ROW1:
			error_status &= LCD_8bit_sendCommand(lcd, (0x80 + col)); /* first row start address is 0x00 */
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	28 2f       	mov	r18, r24
    30e2:	20 58       	subi	r18, 0x80	; 128
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	9b 81       	ldd	r25, Y+3	; 0x03
    30e8:	62 2f       	mov	r22, r18
    30ea:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    30ee:	98 2f       	mov	r25, r24
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	89 23       	and	r24, r25
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	28 c0       	rjmp	.+80     	; 0x3148 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW2:
			error_status &= LCD_8bit_sendCommand(lcd, (0xC0 + col)); /* second row start address is 0x40 */
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	28 2f       	mov	r18, r24
    30fc:	20 54       	subi	r18, 0x40	; 64
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	9b 81       	ldd	r25, Y+3	; 0x03
    3102:	62 2f       	mov	r22, r18
    3104:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    3108:	98 2f       	mov	r25, r24
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	89 23       	and	r24, r25
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	1b c0       	rjmp	.+54     	; 0x3148 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW3:
			error_status &= LCD_8bit_sendCommand(lcd, (0x94 + col)); /* third row start address is 0x14 */
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	28 2f       	mov	r18, r24
    3116:	2c 56       	subi	r18, 0x6C	; 108
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	62 2f       	mov	r22, r18
    311e:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    3122:	98 2f       	mov	r25, r24
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	89 23       	and	r24, r25
    3128:	89 83       	std	Y+1, r24	; 0x01
    312a:	0e c0       	rjmp	.+28     	; 0x3148 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW4:
			error_status &= LCD_8bit_sendCommand(lcd, (0xD4 + col)); /* fourth row start address is 0x54 */
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	28 2f       	mov	r18, r24
    3130:	2c 52       	subi	r18, 0x2C	; 44
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	62 2f       	mov	r22, r18
    3138:	0e 94 78 14 	call	0x28f0	; 0x28f0 <LCD_8bit_sendCommand>
    313c:	98 2f       	mov	r25, r24
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	89 23       	and	r24, r25
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	01 c0       	rjmp	.+2      	; 0x3148 <LCD_8bit_setCursorLocation+0xdc>
			break;

		default:
			error_status = E_NOT_OK;
    3146:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    3148:	89 81       	ldd	r24, Y+1	; 0x01
}
    314a:	27 96       	adiw	r28, 0x07	; 7
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <LCD_send4Bits>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_send4Bits(const lcd_4bit_t *lcd, uint8 data_command)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <LCD_send4Bits+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <LCD_send4Bits+0x8>
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	9b 83       	std	Y+3, r25	; 0x03
    316a:	8a 83       	std	Y+2, r24	; 0x02
    316c:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	9b 81       	ldd	r25, Y+3	; 0x03
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	11 f4       	brne	.+4      	; 0x317e <LCD_send4Bits+0x22>
	{
		error_status = E_NOT_OK;
    317a:	19 82       	std	Y+1, r1	; 0x01
    317c:	3a c0       	rjmp	.+116    	; 0x31f2 <LCD_send4Bits+0x96>
	}
	else
	{
		/* write the lower nibble of the passed data_command argument to the data pin of LCD */
		error_status = GPIO_pinWrite(&(lcd->data_pin[0]), READ_BIT(data_command, 0));
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	9b 81       	ldd	r25, Y+3	; 0x03
    3182:	9c 01       	movw	r18, r24
    3184:	2e 5f       	subi	r18, 0xFE	; 254
    3186:	3f 4f       	sbci	r19, 0xFF	; 255
    3188:	8c 81       	ldd	r24, Y+4	; 0x04
    318a:	48 2f       	mov	r20, r24
    318c:	41 70       	andi	r20, 0x01	; 1
    318e:	c9 01       	movw	r24, r18
    3190:	64 2f       	mov	r22, r20
    3192:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    3196:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[1]), READ_BIT(data_command, 1));
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	9b 81       	ldd	r25, Y+3	; 0x03
    319c:	9c 01       	movw	r18, r24
    319e:	2d 5f       	subi	r18, 0xFD	; 253
    31a0:	3f 4f       	sbci	r19, 0xFF	; 255
    31a2:	8c 81       	ldd	r24, Y+4	; 0x04
    31a4:	86 95       	lsr	r24
    31a6:	48 2f       	mov	r20, r24
    31a8:	41 70       	andi	r20, 0x01	; 1
    31aa:	c9 01       	movw	r24, r18
    31ac:	64 2f       	mov	r22, r20
    31ae:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    31b2:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[2]), READ_BIT(data_command, 2));
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	9c 01       	movw	r18, r24
    31ba:	2c 5f       	subi	r18, 0xFC	; 252
    31bc:	3f 4f       	sbci	r19, 0xFF	; 255
    31be:	8c 81       	ldd	r24, Y+4	; 0x04
    31c0:	86 95       	lsr	r24
    31c2:	86 95       	lsr	r24
    31c4:	48 2f       	mov	r20, r24
    31c6:	41 70       	andi	r20, 0x01	; 1
    31c8:	c9 01       	movw	r24, r18
    31ca:	64 2f       	mov	r22, r20
    31cc:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    31d0:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[3]), READ_BIT(data_command, 3));
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	9b 81       	ldd	r25, Y+3	; 0x03
    31d6:	9c 01       	movw	r18, r24
    31d8:	2b 5f       	subi	r18, 0xFB	; 251
    31da:	3f 4f       	sbci	r19, 0xFF	; 255
    31dc:	8c 81       	ldd	r24, Y+4	; 0x04
    31de:	86 95       	lsr	r24
    31e0:	86 95       	lsr	r24
    31e2:	86 95       	lsr	r24
    31e4:	48 2f       	mov	r20, r24
    31e6:	41 70       	andi	r20, 0x01	; 1
    31e8:	c9 01       	movw	r24, r18
    31ea:	64 2f       	mov	r22, r20
    31ec:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    31f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <LCD_4bit_genEnablePulse>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_4bit_genEnablePulse(const lcd_4bit_t *lcd)
{
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	6b 97       	sbiw	r28, 0x1b	; 27
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	9b 8f       	std	Y+27, r25	; 0x1b
    3218:	8a 8f       	std	Y+26, r24	; 0x1a
	STD_ReturnType error_status = E_OK;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd)
    321e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3220:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	11 f4       	brne	.+4      	; 0x322a <LCD_4bit_genEnablePulse+0x28>
	{
		error_status = E_NOT_OK;
    3226:	19 8e       	std	Y+25, r1	; 0x19
    3228:	cc c0       	rjmp	.+408    	; 0x33c2 <LCD_4bit_genEnablePulse+0x1c0>
	}
	else
	{
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_HIGH);
    322a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    322c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    322e:	01 96       	adiw	r24, 0x01	; 1
    3230:	61 e0       	ldi	r22, 0x01	; 1
    3232:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    3236:	89 8f       	std	Y+25, r24	; 0x19
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	a0 e8       	ldi	r26, 0x80	; 128
    323e:	bf e3       	ldi	r27, 0x3F	; 63
    3240:	8d 8b       	std	Y+21, r24	; 0x15
    3242:	9e 8b       	std	Y+22, r25	; 0x16
    3244:	af 8b       	std	Y+23, r26	; 0x17
    3246:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3248:	6d 89       	ldd	r22, Y+21	; 0x15
    324a:	7e 89       	ldd	r23, Y+22	; 0x16
    324c:	8f 89       	ldd	r24, Y+23	; 0x17
    324e:	98 8d       	ldd	r25, Y+24	; 0x18
    3250:	2b ea       	ldi	r18, 0xAB	; 171
    3252:	3a ea       	ldi	r19, 0xAA	; 170
    3254:	4a ea       	ldi	r20, 0xAA	; 170
    3256:	50 e4       	ldi	r21, 0x40	; 64
    3258:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	89 8b       	std	Y+17, r24	; 0x11
    3262:	9a 8b       	std	Y+18, r25	; 0x12
    3264:	ab 8b       	std	Y+19, r26	; 0x13
    3266:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3268:	69 89       	ldd	r22, Y+17	; 0x11
    326a:	7a 89       	ldd	r23, Y+18	; 0x12
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e8       	ldi	r20, 0x80	; 128
    3276:	5f e3       	ldi	r21, 0x3F	; 63
    3278:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    327c:	88 23       	and	r24, r24
    327e:	1c f4       	brge	.+6      	; 0x3286 <LCD_4bit_genEnablePulse+0x84>
		__ticks = 1;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	88 8b       	std	Y+16, r24	; 0x10
    3284:	91 c0       	rjmp	.+290    	; 0x33a8 <LCD_4bit_genEnablePulse+0x1a6>
	else if (__tmp > 255)
    3286:	69 89       	ldd	r22, Y+17	; 0x11
    3288:	7a 89       	ldd	r23, Y+18	; 0x12
    328a:	8b 89       	ldd	r24, Y+19	; 0x13
    328c:	9c 89       	ldd	r25, Y+20	; 0x14
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	4f e7       	ldi	r20, 0x7F	; 127
    3294:	53 e4       	ldi	r21, 0x43	; 67
    3296:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    329a:	18 16       	cp	r1, r24
    329c:	0c f0       	brlt	.+2      	; 0x32a0 <LCD_4bit_genEnablePulse+0x9e>
    329e:	7b c0       	rjmp	.+246    	; 0x3396 <LCD_4bit_genEnablePulse+0x194>
	{
		_delay_ms(__us / 1000.0);
    32a0:	6d 89       	ldd	r22, Y+21	; 0x15
    32a2:	7e 89       	ldd	r23, Y+22	; 0x16
    32a4:	8f 89       	ldd	r24, Y+23	; 0x17
    32a6:	98 8d       	ldd	r25, Y+24	; 0x18
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	4a e7       	ldi	r20, 0x7A	; 122
    32ae:	54 e4       	ldi	r21, 0x44	; 68
    32b0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	8c 87       	std	Y+12, r24	; 0x0c
    32ba:	9d 87       	std	Y+13, r25	; 0x0d
    32bc:	ae 87       	std	Y+14, r26	; 0x0e
    32be:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	4a e7       	ldi	r20, 0x7A	; 122
    32ce:	55 e4       	ldi	r21, 0x45	; 69
    32d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	88 87       	std	Y+8, r24	; 0x08
    32da:	99 87       	std	Y+9, r25	; 0x09
    32dc:	aa 87       	std	Y+10, r26	; 0x0a
    32de:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32e0:	68 85       	ldd	r22, Y+8	; 0x08
    32e2:	79 85       	ldd	r23, Y+9	; 0x09
    32e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e8       	ldi	r20, 0x80	; 128
    32ee:	5f e3       	ldi	r21, 0x3F	; 63
    32f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32f4:	88 23       	and	r24, r24
    32f6:	2c f4       	brge	.+10     	; 0x3302 <LCD_4bit_genEnablePulse+0x100>
		__ticks = 1;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	9f 83       	std	Y+7, r25	; 0x07
    32fe:	8e 83       	std	Y+6, r24	; 0x06
    3300:	3f c0       	rjmp	.+126    	; 0x3380 <LCD_4bit_genEnablePulse+0x17e>
	else if (__tmp > 65535)
    3302:	68 85       	ldd	r22, Y+8	; 0x08
    3304:	79 85       	ldd	r23, Y+9	; 0x09
    3306:	8a 85       	ldd	r24, Y+10	; 0x0a
    3308:	9b 85       	ldd	r25, Y+11	; 0x0b
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	3f ef       	ldi	r19, 0xFF	; 255
    330e:	4f e7       	ldi	r20, 0x7F	; 127
    3310:	57 e4       	ldi	r21, 0x47	; 71
    3312:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3316:	18 16       	cp	r1, r24
    3318:	4c f5       	brge	.+82     	; 0x336c <LCD_4bit_genEnablePulse+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331a:	6c 85       	ldd	r22, Y+12	; 0x0c
    331c:	7d 85       	ldd	r23, Y+13	; 0x0d
    331e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3320:	9f 85       	ldd	r25, Y+15	; 0x0f
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e2       	ldi	r20, 0x20	; 32
    3328:	51 e4       	ldi	r21, 0x41	; 65
    332a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	9f 83       	std	Y+7, r25	; 0x07
    3340:	8e 83       	std	Y+6, r24	; 0x06
    3342:	0f c0       	rjmp	.+30     	; 0x3362 <LCD_4bit_genEnablePulse+0x160>
    3344:	80 e9       	ldi	r24, 0x90	; 144
    3346:	91 e0       	ldi	r25, 0x01	; 1
    3348:	9d 83       	std	Y+5, r25	; 0x05
    334a:	8c 83       	std	Y+4, r24	; 0x04
    334c:	8c 81       	ldd	r24, Y+4	; 0x04
    334e:	9d 81       	ldd	r25, Y+5	; 0x05
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <LCD_4bit_genEnablePulse+0x14e>
    3354:	9d 83       	std	Y+5, r25	; 0x05
    3356:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3358:	8e 81       	ldd	r24, Y+6	; 0x06
    335a:	9f 81       	ldd	r25, Y+7	; 0x07
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	9f 83       	std	Y+7, r25	; 0x07
    3360:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3362:	8e 81       	ldd	r24, Y+6	; 0x06
    3364:	9f 81       	ldd	r25, Y+7	; 0x07
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	69 f7       	brne	.-38     	; 0x3344 <LCD_4bit_genEnablePulse+0x142>
    336a:	24 c0       	rjmp	.+72     	; 0x33b4 <LCD_4bit_genEnablePulse+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336c:	68 85       	ldd	r22, Y+8	; 0x08
    336e:	79 85       	ldd	r23, Y+9	; 0x09
    3370:	8a 85       	ldd	r24, Y+10	; 0x0a
    3372:	9b 85       	ldd	r25, Y+11	; 0x0b
    3374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9f 83       	std	Y+7, r25	; 0x07
    337e:	8e 83       	std	Y+6, r24	; 0x06
    3380:	8e 81       	ldd	r24, Y+6	; 0x06
    3382:	9f 81       	ldd	r25, Y+7	; 0x07
    3384:	9b 83       	std	Y+3, r25	; 0x03
    3386:	8a 83       	std	Y+2, r24	; 0x02
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	9b 81       	ldd	r25, Y+3	; 0x03
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <LCD_4bit_genEnablePulse+0x18a>
    3390:	9b 83       	std	Y+3, r25	; 0x03
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	0f c0       	rjmp	.+30     	; 0x33b4 <LCD_4bit_genEnablePulse+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3396:	69 89       	ldd	r22, Y+17	; 0x11
    3398:	7a 89       	ldd	r23, Y+18	; 0x12
    339a:	8b 89       	ldd	r24, Y+19	; 0x13
    339c:	9c 89       	ldd	r25, Y+20	; 0x14
    339e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	88 8b       	std	Y+16, r24	; 0x10
    33a8:	88 89       	ldd	r24, Y+16	; 0x10
    33aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	8a 95       	dec	r24
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <LCD_4bit_genEnablePulse+0x1ac>
    33b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_LOW);
    33b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    33c0:	89 8f       	std	Y+25, r24	; 0x19

	}
	return error_status;
    33c2:	89 8d       	ldd	r24, Y+25	; 0x19
}
    33c4:	6b 96       	adiw	r28, 0x1b	; 27
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <LCD_8bit_genEnablePulse>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_8bit_genEnablePulse(const lcd_8bit_t *lcd)
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	6b 97       	sbiw	r28, 0x1b	; 27
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	9b 8f       	std	Y+27, r25	; 0x1b
    33ec:	8a 8f       	std	Y+26, r24	; 0x1a
	STD_ReturnType error_status = E_OK;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd)
    33f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	11 f4       	brne	.+4      	; 0x33fe <LCD_8bit_genEnablePulse+0x28>
	{
		error_status = E_NOT_OK;
    33fa:	19 8e       	std	Y+25, r1	; 0x19
    33fc:	cc c0       	rjmp	.+408    	; 0x3596 <LCD_8bit_genEnablePulse+0x1c0>
	}
	else
	{
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_HIGH);
    33fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3400:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3402:	01 96       	adiw	r24, 0x01	; 1
    3404:	61 e0       	ldi	r22, 0x01	; 1
    3406:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    340a:	89 8f       	std	Y+25, r24	; 0x19
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	a0 e8       	ldi	r26, 0x80	; 128
    3412:	bf e3       	ldi	r27, 0x3F	; 63
    3414:	8d 8b       	std	Y+21, r24	; 0x15
    3416:	9e 8b       	std	Y+22, r25	; 0x16
    3418:	af 8b       	std	Y+23, r26	; 0x17
    341a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    341c:	6d 89       	ldd	r22, Y+21	; 0x15
    341e:	7e 89       	ldd	r23, Y+22	; 0x16
    3420:	8f 89       	ldd	r24, Y+23	; 0x17
    3422:	98 8d       	ldd	r25, Y+24	; 0x18
    3424:	2b ea       	ldi	r18, 0xAB	; 171
    3426:	3a ea       	ldi	r19, 0xAA	; 170
    3428:	4a ea       	ldi	r20, 0xAA	; 170
    342a:	50 e4       	ldi	r21, 0x40	; 64
    342c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	89 8b       	std	Y+17, r24	; 0x11
    3436:	9a 8b       	std	Y+18, r25	; 0x12
    3438:	ab 8b       	std	Y+19, r26	; 0x13
    343a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    343c:	69 89       	ldd	r22, Y+17	; 0x11
    343e:	7a 89       	ldd	r23, Y+18	; 0x12
    3440:	8b 89       	ldd	r24, Y+19	; 0x13
    3442:	9c 89       	ldd	r25, Y+20	; 0x14
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e8       	ldi	r20, 0x80	; 128
    344a:	5f e3       	ldi	r21, 0x3F	; 63
    344c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3450:	88 23       	and	r24, r24
    3452:	1c f4       	brge	.+6      	; 0x345a <LCD_8bit_genEnablePulse+0x84>
		__ticks = 1;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	88 8b       	std	Y+16, r24	; 0x10
    3458:	91 c0       	rjmp	.+290    	; 0x357c <LCD_8bit_genEnablePulse+0x1a6>
	else if (__tmp > 255)
    345a:	69 89       	ldd	r22, Y+17	; 0x11
    345c:	7a 89       	ldd	r23, Y+18	; 0x12
    345e:	8b 89       	ldd	r24, Y+19	; 0x13
    3460:	9c 89       	ldd	r25, Y+20	; 0x14
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	4f e7       	ldi	r20, 0x7F	; 127
    3468:	53 e4       	ldi	r21, 0x43	; 67
    346a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    346e:	18 16       	cp	r1, r24
    3470:	0c f0       	brlt	.+2      	; 0x3474 <LCD_8bit_genEnablePulse+0x9e>
    3472:	7b c0       	rjmp	.+246    	; 0x356a <LCD_8bit_genEnablePulse+0x194>
	{
		_delay_ms(__us / 1000.0);
    3474:	6d 89       	ldd	r22, Y+21	; 0x15
    3476:	7e 89       	ldd	r23, Y+22	; 0x16
    3478:	8f 89       	ldd	r24, Y+23	; 0x17
    347a:	98 8d       	ldd	r25, Y+24	; 0x18
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	4a e7       	ldi	r20, 0x7A	; 122
    3482:	54 e4       	ldi	r21, 0x44	; 68
    3484:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	8c 87       	std	Y+12, r24	; 0x0c
    348e:	9d 87       	std	Y+13, r25	; 0x0d
    3490:	ae 87       	std	Y+14, r26	; 0x0e
    3492:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	6c 85       	ldd	r22, Y+12	; 0x0c
    3496:	7d 85       	ldd	r23, Y+13	; 0x0d
    3498:	8e 85       	ldd	r24, Y+14	; 0x0e
    349a:	9f 85       	ldd	r25, Y+15	; 0x0f
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a e7       	ldi	r20, 0x7A	; 122
    34a2:	55 e4       	ldi	r21, 0x45	; 69
    34a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	88 87       	std	Y+8, r24	; 0x08
    34ae:	99 87       	std	Y+9, r25	; 0x09
    34b0:	aa 87       	std	Y+10, r26	; 0x0a
    34b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    34b4:	68 85       	ldd	r22, Y+8	; 0x08
    34b6:	79 85       	ldd	r23, Y+9	; 0x09
    34b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <LCD_8bit_genEnablePulse+0x100>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9f 83       	std	Y+7, r25	; 0x07
    34d2:	8e 83       	std	Y+6, r24	; 0x06
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <LCD_8bit_genEnablePulse+0x17e>
	else if (__tmp > 65535)
    34d6:	68 85       	ldd	r22, Y+8	; 0x08
    34d8:	79 85       	ldd	r23, Y+9	; 0x09
    34da:	8a 85       	ldd	r24, Y+10	; 0x0a
    34dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <LCD_8bit_genEnablePulse+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    34f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    34f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    34f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9f 83       	std	Y+7, r25	; 0x07
    3514:	8e 83       	std	Y+6, r24	; 0x06
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <LCD_8bit_genEnablePulse+0x160>
    3518:	80 e9       	ldi	r24, 0x90	; 144
    351a:	91 e0       	ldi	r25, 0x01	; 1
    351c:	9d 83       	std	Y+5, r25	; 0x05
    351e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3520:	8c 81       	ldd	r24, Y+4	; 0x04
    3522:	9d 81       	ldd	r25, Y+5	; 0x05
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <LCD_8bit_genEnablePulse+0x14e>
    3528:	9d 83       	std	Y+5, r25	; 0x05
    352a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8e 81       	ldd	r24, Y+6	; 0x06
    352e:	9f 81       	ldd	r25, Y+7	; 0x07
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9f 83       	std	Y+7, r25	; 0x07
    3534:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8e 81       	ldd	r24, Y+6	; 0x06
    3538:	9f 81       	ldd	r25, Y+7	; 0x07
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <LCD_8bit_genEnablePulse+0x142>
    353e:	24 c0       	rjmp	.+72     	; 0x3588 <LCD_8bit_genEnablePulse+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	68 85       	ldd	r22, Y+8	; 0x08
    3542:	79 85       	ldd	r23, Y+9	; 0x09
    3544:	8a 85       	ldd	r24, Y+10	; 0x0a
    3546:	9b 85       	ldd	r25, Y+11	; 0x0b
    3548:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9f 83       	std	Y+7, r25	; 0x07
    3552:	8e 83       	std	Y+6, r24	; 0x06
    3554:	8e 81       	ldd	r24, Y+6	; 0x06
    3556:	9f 81       	ldd	r25, Y+7	; 0x07
    3558:	9b 83       	std	Y+3, r25	; 0x03
    355a:	8a 83       	std	Y+2, r24	; 0x02
    355c:	8a 81       	ldd	r24, Y+2	; 0x02
    355e:	9b 81       	ldd	r25, Y+3	; 0x03
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <LCD_8bit_genEnablePulse+0x18a>
    3564:	9b 83       	std	Y+3, r25	; 0x03
    3566:	8a 83       	std	Y+2, r24	; 0x02
    3568:	0f c0       	rjmp	.+30     	; 0x3588 <LCD_8bit_genEnablePulse+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    356a:	69 89       	ldd	r22, Y+17	; 0x11
    356c:	7a 89       	ldd	r23, Y+18	; 0x12
    356e:	8b 89       	ldd	r24, Y+19	; 0x13
    3570:	9c 89       	ldd	r25, Y+20	; 0x14
    3572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	88 8b       	std	Y+16, r24	; 0x10
    357c:	88 89       	ldd	r24, Y+16	; 0x10
    357e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	8a 95       	dec	r24
    3584:	f1 f7       	brne	.-4      	; 0x3582 <LCD_8bit_genEnablePulse+0x1ac>
    3586:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_LOW);
    3588:	8a 8d       	ldd	r24, Y+26	; 0x1a
    358a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	60 e0       	ldi	r22, 0x00	; 0
    3590:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    3594:	89 8f       	std	Y+25, r24	; 0x19
	}
	return error_status;
    3596:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3598:	6b 96       	adiw	r28, 0x1b	; 27
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <numToStr>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType numToStr(const uint32 num, char * str)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	27 97       	sbiw	r28, 0x07	; 7
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	6a 83       	std	Y+2, r22	; 0x02
    35c0:	7b 83       	std	Y+3, r23	; 0x03
    35c2:	8c 83       	std	Y+4, r24	; 0x04
    35c4:	9d 83       	std	Y+5, r25	; 0x05
    35c6:	5f 83       	std	Y+7, r21	; 0x07
    35c8:	4e 83       	std	Y+6, r20	; 0x06
	STD_ReturnType error_status = E_OK;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str)
    35ce:	8e 81       	ldd	r24, Y+6	; 0x06
    35d0:	9f 81       	ldd	r25, Y+7	; 0x07
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	11 f4       	brne	.+4      	; 0x35da <numToStr+0x30>
	{
		error_status = E_NOT_OK;
    35d6:	19 82       	std	Y+1, r1	; 0x01
    35d8:	25 c0       	rjmp	.+74     	; 0x3624 <numToStr+0x7a>
	}
	else
	{
		sprintf(str, "%i", num);
    35da:	8d b7       	in	r24, 0x3d	; 61
    35dc:	9e b7       	in	r25, 0x3e	; 62
    35de:	08 97       	sbiw	r24, 0x08	; 8
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	f8 94       	cli
    35e4:	9e bf       	out	0x3e, r25	; 62
    35e6:	0f be       	out	0x3f, r0	; 63
    35e8:	8d bf       	out	0x3d, r24	; 61
    35ea:	ed b7       	in	r30, 0x3d	; 61
    35ec:	fe b7       	in	r31, 0x3e	; 62
    35ee:	31 96       	adiw	r30, 0x01	; 1
    35f0:	8e 81       	ldd	r24, Y+6	; 0x06
    35f2:	9f 81       	ldd	r25, Y+7	; 0x07
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	80 83       	st	Z, r24
    35f8:	80 e6       	ldi	r24, 0x60	; 96
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	93 83       	std	Z+3, r25	; 0x03
    35fe:	82 83       	std	Z+2, r24	; 0x02
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	9b 81       	ldd	r25, Y+3	; 0x03
    3604:	ac 81       	ldd	r26, Y+4	; 0x04
    3606:	bd 81       	ldd	r27, Y+5	; 0x05
    3608:	84 83       	std	Z+4, r24	; 0x04
    360a:	95 83       	std	Z+5, r25	; 0x05
    360c:	a6 83       	std	Z+6, r26	; 0x06
    360e:	b7 83       	std	Z+7, r27	; 0x07
    3610:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <sprintf>
    3614:	8d b7       	in	r24, 0x3d	; 61
    3616:	9e b7       	in	r25, 0x3e	; 62
    3618:	08 96       	adiw	r24, 0x08	; 8
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	9e bf       	out	0x3e, r25	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	8d bf       	out	0x3d, r24	; 61
	}
	return error_status;
    3624:	89 81       	ldd	r24, Y+1	; 0x01
}
    3626:	27 96       	adiw	r28, 0x07	; 7
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <KEYPAD_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_init(const keypad_t *keypad_obj)
{
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	00 d0       	rcall	.+0      	; 0x363e <KEYPAD_init+0x6>
    363e:	00 d0       	rcall	.+0      	; 0x3640 <KEYPAD_init+0x8>
    3640:	0f 92       	push	r0
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	9d 83       	std	Y+5, r25	; 0x05
    3648:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	8b 83       	std	Y+3, r24	; 0x03

	if(NULL == keypad_obj)				/* check for null pointer */
    364e:	8c 81       	ldd	r24, Y+4	; 0x04
    3650:	9d 81       	ldd	r25, Y+5	; 0x05
    3652:	00 97       	sbiw	r24, 0x00	; 0
    3654:	11 f4       	brne	.+4      	; 0x365a <KEYPAD_init+0x22>
	{
		error_status = E_NOT_OK;
    3656:	1b 82       	std	Y+3, r1	; 0x03
    3658:	31 c0       	rjmp	.+98     	; 0x36bc <KEYPAD_init+0x84>
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    365a:	1a 82       	std	Y+2, r1	; 0x02
    365c:	19 82       	std	Y+1, r1	; 0x01
    365e:	0f c0       	rjmp	.+30     	; 0x367e <KEYPAD_init+0x46>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
    3660:	2c 81       	ldd	r18, Y+4	; 0x04
    3662:	3d 81       	ldd	r19, Y+5	; 0x05
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	82 0f       	add	r24, r18
    366a:	93 1f       	adc	r25, r19
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    3672:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	9a 81       	ldd	r25, Y+2	; 0x02
    3678:	01 96       	adiw	r24, 0x01	; 1
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	9a 81       	ldd	r25, Y+2	; 0x02
    3682:	84 30       	cpi	r24, 0x04	; 4
    3684:	91 05       	cpc	r25, r1
    3686:	64 f3       	brlt	.-40     	; 0x3660 <KEYPAD_init+0x28>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    3688:	1a 82       	std	Y+2, r1	; 0x02
    368a:	19 82       	std	Y+1, r1	; 0x01
    368c:	12 c0       	rjmp	.+36     	; 0x36b2 <KEYPAD_init+0x7a>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
    368e:	8c 81       	ldd	r24, Y+4	; 0x04
    3690:	9d 81       	ldd	r25, Y+5	; 0x05
    3692:	9c 01       	movw	r18, r24
    3694:	2c 5f       	subi	r18, 0xFC	; 252
    3696:	3f 4f       	sbci	r19, 0xFF	; 255
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	9a 81       	ldd	r25, Y+2	; 0x02
    369c:	82 0f       	add	r24, r18
    369e:	93 1f       	adc	r25, r19
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <GPIO_pinDirectionInit>
    36a6:	8b 83       	std	Y+3, r24	; 0x03
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	01 96       	adiw	r24, 0x01	; 1
    36ae:	9a 83       	std	Y+2, r25	; 0x02
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	84 30       	cpi	r24, 0x04	; 4
    36b8:	91 05       	cpc	r25, r1
    36ba:	4c f3       	brlt	.-46     	; 0x368e <KEYPAD_init+0x56>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
		}
	}
	return error_status;
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <KEYPAD_getPressedKey>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_getPressedKey(const keypad_t *keypad_obj, uint8 *value)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	67 97       	sbiw	r28, 0x17	; 23
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	9d 8b       	std	Y+21, r25	; 0x15
    36e4:	8c 8b       	std	Y+20, r24	; 0x14
    36e6:	7f 8b       	std	Y+23, r23	; 0x17
    36e8:	6e 8b       	std	Y+22, r22	; 0x16
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	8a 8b       	std	Y+18, r24	; 0x12

	if(NULL == keypad_obj)
    36ee:	8c 89       	ldd	r24, Y+20	; 0x14
    36f0:	9d 89       	ldd	r25, Y+21	; 0x15
    36f2:	00 97       	sbiw	r24, 0x00	; 0
    36f4:	11 f4       	brne	.+4      	; 0x36fa <KEYPAD_getPressedKey+0x2c>
	{
		error_status = E_NOT_OK;
    36f6:	1a 8a       	std	Y+18, r1	; 0x12
    36f8:	e4 c0       	rjmp	.+456    	; 0x38c2 <KEYPAD_getPressedKey+0x1f4>
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
    36fa:	1f 86       	std	Y+15, r1	; 0x0f
		/* make sure that initially all 4 row pin are low logic */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    36fc:	19 8a       	std	Y+17, r1	; 0x11
    36fe:	0e c0       	rjmp	.+28     	; 0x371c <KEYPAD_getPressedKey+0x4e>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_LOW);
    3700:	2c 89       	ldd	r18, Y+20	; 0x14
    3702:	3d 89       	ldd	r19, Y+21	; 0x15
    3704:	89 89       	ldd	r24, Y+17	; 0x11
    3706:	88 2f       	mov	r24, r24
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	82 0f       	add	r24, r18
    370c:	93 1f       	adc	r25, r19
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    3714:	8a 8b       	std	Y+18, r24	; 0x12
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
		/* make sure that initially all 4 row pin are low logic */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    3716:	89 89       	ldd	r24, Y+17	; 0x11
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	89 8b       	std	Y+17, r24	; 0x11
    371c:	89 89       	ldd	r24, Y+17	; 0x11
    371e:	84 30       	cpi	r24, 0x04	; 4
    3720:	78 f3       	brcs	.-34     	; 0x3700 <KEYPAD_getPressedKey+0x32>
		}

		/* Normally, all columns pin are connected to ground,
		 * if a button is pressed, the relative column pin changes to HIGH.
		 */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    3722:	19 8a       	std	Y+17, r1	; 0x11
    3724:	ca c0       	rjmp	.+404    	; 0x38ba <KEYPAD_getPressedKey+0x1ec>
		{
			/* Change an individual row pin to HIGH logic */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_HIGH);
    3726:	2c 89       	ldd	r18, Y+20	; 0x14
    3728:	3d 89       	ldd	r19, Y+21	; 0x15
    372a:	89 89       	ldd	r24, Y+17	; 0x11
    372c:	88 2f       	mov	r24, r24
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	82 0f       	add	r24, r18
    3732:	93 1f       	adc	r25, r19
    3734:	61 e0       	ldi	r22, 0x01	; 1
    3736:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    373a:	98 2f       	mov	r25, r24
    373c:	8a 89       	ldd	r24, Y+18	; 0x12
    373e:	89 23       	and	r24, r25
    3740:	8a 8b       	std	Y+18, r24	; 0x12
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a0 e0       	ldi	r26, 0x00	; 0
    3748:	b0 e4       	ldi	r27, 0x40	; 64
    374a:	8b 87       	std	Y+11, r24	; 0x0b
    374c:	9c 87       	std	Y+12, r25	; 0x0c
    374e:	ad 87       	std	Y+13, r26	; 0x0d
    3750:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3752:	6b 85       	ldd	r22, Y+11	; 0x0b
    3754:	7c 85       	ldd	r23, Y+12	; 0x0c
    3756:	8d 85       	ldd	r24, Y+13	; 0x0d
    3758:	9e 85       	ldd	r25, Y+14	; 0x0e
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	4a e7       	ldi	r20, 0x7A	; 122
    3760:	55 e4       	ldi	r21, 0x45	; 69
    3762:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8f 83       	std	Y+7, r24	; 0x07
    376c:	98 87       	std	Y+8, r25	; 0x08
    376e:	a9 87       	std	Y+9, r26	; 0x09
    3770:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3772:	6f 81       	ldd	r22, Y+7	; 0x07
    3774:	78 85       	ldd	r23, Y+8	; 0x08
    3776:	89 85       	ldd	r24, Y+9	; 0x09
    3778:	9a 85       	ldd	r25, Y+10	; 0x0a
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e8       	ldi	r20, 0x80	; 128
    3780:	5f e3       	ldi	r21, 0x3F	; 63
    3782:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3786:	88 23       	and	r24, r24
    3788:	2c f4       	brge	.+10     	; 0x3794 <KEYPAD_getPressedKey+0xc6>
		__ticks = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
    3792:	3f c0       	rjmp	.+126    	; 0x3812 <KEYPAD_getPressedKey+0x144>
	else if (__tmp > 65535)
    3794:	6f 81       	ldd	r22, Y+7	; 0x07
    3796:	78 85       	ldd	r23, Y+8	; 0x08
    3798:	89 85       	ldd	r24, Y+9	; 0x09
    379a:	9a 85       	ldd	r25, Y+10	; 0x0a
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	3f ef       	ldi	r19, 0xFF	; 255
    37a0:	4f e7       	ldi	r20, 0x7F	; 127
    37a2:	57 e4       	ldi	r21, 0x47	; 71
    37a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    37a8:	18 16       	cp	r1, r24
    37aa:	4c f5       	brge	.+82     	; 0x37fe <KEYPAD_getPressedKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e2       	ldi	r20, 0x20	; 32
    37ba:	51 e4       	ldi	r21, 0x41	; 65
    37bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <KEYPAD_getPressedKey+0x126>
    37d6:	80 e9       	ldi	r24, 0x90	; 144
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	9c 83       	std	Y+4, r25	; 0x04
    37dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37de:	8b 81       	ldd	r24, Y+3	; 0x03
    37e0:	9c 81       	ldd	r25, Y+4	; 0x04
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <KEYPAD_getPressedKey+0x114>
    37e6:	9c 83       	std	Y+4, r25	; 0x04
    37e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	8d 81       	ldd	r24, Y+5	; 0x05
    37f6:	9e 81       	ldd	r25, Y+6	; 0x06
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <KEYPAD_getPressedKey+0x108>
    37fc:	14 c0       	rjmp	.+40     	; 0x3826 <KEYPAD_getPressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3800:	78 85       	ldd	r23, Y+8	; 0x08
    3802:	89 85       	ldd	r24, Y+9	; 0x09
    3804:	9a 85       	ldd	r25, Y+10	; 0x0a
    3806:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9e 83       	std	Y+6, r25	; 0x06
    3810:	8d 83       	std	Y+5, r24	; 0x05
    3812:	8d 81       	ldd	r24, Y+5	; 0x05
    3814:	9e 81       	ldd	r25, Y+6	; 0x06
    3816:	9a 83       	std	Y+2, r25	; 0x02
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	9a 81       	ldd	r25, Y+2	; 0x02
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <KEYPAD_getPressedKey+0x150>
    3822:	9a 83       	std	Y+2, r25	; 0x02
    3824:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    3826:	18 8a       	std	Y+16, r1	; 0x10
    3828:	31 c0       	rjmp	.+98     	; 0x388c <KEYPAD_getPressedKey+0x1be>
			{
				error_status &= GPIO_pinRead(&(keypad_obj->columns_pins[col_counter]), &state);
    382a:	8c 89       	ldd	r24, Y+20	; 0x14
    382c:	9d 89       	ldd	r25, Y+21	; 0x15
    382e:	9c 01       	movw	r18, r24
    3830:	2c 5f       	subi	r18, 0xFC	; 252
    3832:	3f 4f       	sbci	r19, 0xFF	; 255
    3834:	88 89       	ldd	r24, Y+16	; 0x10
    3836:	88 2f       	mov	r24, r24
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	82 0f       	add	r24, r18
    383c:	93 1f       	adc	r25, r19
    383e:	9e 01       	movw	r18, r28
    3840:	2d 5e       	subi	r18, 0xED	; 237
    3842:	3f 4f       	sbci	r19, 0xFF	; 255
    3844:	b9 01       	movw	r22, r18
    3846:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_pinRead>
    384a:	98 2f       	mov	r25, r24
    384c:	8a 89       	ldd	r24, Y+18	; 0x12
    384e:	89 23       	and	r24, r25
    3850:	8a 8b       	std	Y+18, r24	; 0x12

				/* if a columns pin reads HIGH logic, then a specific button has been pressed */
				if(GPIO_HIGH == state)
    3852:	8b 89       	ldd	r24, Y+19	; 0x13
    3854:	81 30       	cpi	r24, 0x01	; 1
    3856:	b9 f4       	brne	.+46     	; 0x3886 <KEYPAD_getPressedKey+0x1b8>
				{
					/* Store the value in the passed argument */
					*value = btn_values[row_counter][col_counter];
    3858:	89 89       	ldd	r24, Y+17	; 0x11
    385a:	48 2f       	mov	r20, r24
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	88 89       	ldd	r24, Y+16	; 0x10
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	ca 01       	movw	r24, r20
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	88 0f       	add	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	82 0f       	add	r24, r18
    3870:	93 1f       	adc	r25, r19
    3872:	fc 01       	movw	r30, r24
    3874:	e5 57       	subi	r30, 0x75	; 117
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 81       	ld	r24, Z
    387a:	ee 89       	ldd	r30, Y+22	; 0x16
    387c:	ff 89       	ldd	r31, Y+23	; 0x17
    387e:	80 83       	st	Z, r24

					/* set the found flag, break to outer loop */
					found_flag = 1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	8f 87       	std	Y+15, r24	; 0x0f
    3884:	06 c0       	rjmp	.+12     	; 0x3892 <KEYPAD_getPressedKey+0x1c4>
			/* Change an individual row pin to HIGH logic */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_HIGH);
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    3886:	88 89       	ldd	r24, Y+16	; 0x10
    3888:	8f 5f       	subi	r24, 0xFF	; 255
    388a:	88 8b       	std	Y+16, r24	; 0x10
    388c:	88 89       	ldd	r24, Y+16	; 0x10
    388e:	84 30       	cpi	r24, 0x04	; 4
    3890:	60 f2       	brcs	.-104    	; 0x382a <KEYPAD_getPressedKey+0x15c>
					break;
				}else{}
			}

			/* Reset the row pin to LOW logic */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), GPIO_LOW);
    3892:	2c 89       	ldd	r18, Y+20	; 0x14
    3894:	3d 89       	ldd	r19, Y+21	; 0x15
    3896:	89 89       	ldd	r24, Y+17	; 0x11
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	82 0f       	add	r24, r18
    389e:	93 1f       	adc	r25, r19
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	0e 94 1a 08 	call	0x1034	; 0x1034 <GPIO_pinWrite>
    38a6:	98 2f       	mov	r25, r24
    38a8:	8a 89       	ldd	r24, Y+18	; 0x12
    38aa:	89 23       	and	r24, r25
    38ac:	8a 8b       	std	Y+18, r24	; 0x12

			/* if a key has been pressed, break to end of function */
			if (1 == found_flag)
    38ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	39 f0       	breq	.+14     	; 0x38c2 <KEYPAD_getPressedKey+0x1f4>
		}

		/* Normally, all columns pin are connected to ground,
		 * if a button is pressed, the relative column pin changes to HIGH.
		 */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    38b4:	89 89       	ldd	r24, Y+17	; 0x11
    38b6:	8f 5f       	subi	r24, 0xFF	; 255
    38b8:	89 8b       	std	Y+17, r24	; 0x11
    38ba:	89 89       	ldd	r24, Y+17	; 0x11
    38bc:	84 30       	cpi	r24, 0x04	; 4
    38be:	08 f4       	brcc	.+2      	; 0x38c2 <KEYPAD_getPressedKey+0x1f4>
    38c0:	32 cf       	rjmp	.-412    	; 0x3726 <KEYPAD_getPressedKey+0x58>
			{
				break;
			}else{}
		}
	}
	return error_status;
    38c2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    38c4:	67 96       	adiw	r28, 0x17	; 23
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <BUTTON_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_init(const button_t *btn)
{
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	00 d0       	rcall	.+0      	; 0x38dc <BUTTON_init+0x6>
    38dc:	00 d0       	rcall	.+0      	; 0x38de <BUTTON_init+0x8>
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	9c 83       	std	Y+4, r25	; 0x04
    38e4:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == btn)
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	9c 81       	ldd	r25, Y+4	; 0x04
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	11 f4       	brne	.+4      	; 0x38f6 <BUTTON_init+0x20>
	{
		error_status = E_NOT_OK;
    38f2:	19 82       	std	Y+1, r1	; 0x01
    38f4:	34 c0       	rjmp	.+104    	; 0x395e <BUTTON_init+0x88>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id,
				.direction = GPIO_INPUT, .logic = btn->internal_pullup_t};
    38f6:	eb 81       	ldd	r30, Y+3	; 0x03
    38f8:	fc 81       	ldd	r31, Y+4	; 0x04
    38fa:	80 81       	ld	r24, Z
    38fc:	28 2f       	mov	r18, r24
    38fe:	23 70       	andi	r18, 0x03	; 3
    3900:	eb 81       	ldd	r30, Y+3	; 0x03
    3902:	fc 81       	ldd	r31, Y+4	; 0x04
    3904:	80 81       	ld	r24, Z
    3906:	98 2f       	mov	r25, r24
    3908:	96 95       	lsr	r25
    390a:	96 95       	lsr	r25
    390c:	97 70       	andi	r25, 0x07	; 7
    390e:	eb 81       	ldd	r30, Y+3	; 0x03
    3910:	fc 81       	ldd	r31, Y+4	; 0x04
    3912:	80 81       	ld	r24, Z
    3914:	38 2f       	mov	r19, r24
    3916:	32 95       	swap	r19
    3918:	36 95       	lsr	r19
    391a:	36 95       	lsr	r19
    391c:	33 70       	andi	r19, 0x03	; 3
    391e:	31 70       	andi	r19, 0x01	; 1
    3920:	1a 82       	std	Y+2, r1	; 0x02
    3922:	23 70       	andi	r18, 0x03	; 3
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	8c 7f       	andi	r24, 0xFC	; 252
    3928:	82 2b       	or	r24, r18
    392a:	8a 83       	std	Y+2, r24	; 0x02
    392c:	89 2f       	mov	r24, r25
    392e:	87 70       	andi	r24, 0x07	; 7
    3930:	98 2f       	mov	r25, r24
    3932:	99 0f       	add	r25, r25
    3934:	99 0f       	add	r25, r25
    3936:	8a 81       	ldd	r24, Y+2	; 0x02
    3938:	83 7e       	andi	r24, 0xE3	; 227
    393a:	89 2b       	or	r24, r25
    393c:	8a 83       	std	Y+2, r24	; 0x02
    393e:	83 2f       	mov	r24, r19
    3940:	81 70       	andi	r24, 0x01	; 1
    3942:	98 2f       	mov	r25, r24
    3944:	92 95       	swap	r25
    3946:	99 0f       	add	r25, r25
    3948:	99 0f       	add	r25, r25
    394a:	90 7c       	andi	r25, 0xC0	; 192
    394c:	8a 81       	ldd	r24, Y+2	; 0x02
    394e:	8f 7b       	andi	r24, 0xBF	; 191
    3950:	89 2b       	or	r24, r25
    3952:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&btn_pin);
    3954:	ce 01       	movw	r24, r28
    3956:	02 96       	adiw	r24, 0x02	; 2
    3958:	0e 94 47 06 	call	0xc8e	; 0xc8e <GPIO_pinInit>
    395c:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    395e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <BUTTON_read>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_read(const button_t *btn, uint8 *btn_state)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	2b 97       	sbiw	r28, 0x0b	; 11
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	de bf       	out	0x3e, r29	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	cd bf       	out	0x3d, r28	; 61
    3982:	9d 83       	std	Y+5, r25	; 0x05
    3984:	8c 83       	std	Y+4, r24	; 0x04
    3986:	7f 83       	std	Y+7, r23	; 0x07
    3988:	6e 83       	std	Y+6, r22	; 0x06
	STD_ReturnType error_status = E_OK;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_logic_t btn_pin_status;
	if(NULL == btn)
    398e:	8c 81       	ldd	r24, Y+4	; 0x04
    3990:	9d 81       	ldd	r25, Y+5	; 0x05
    3992:	00 97       	sbiw	r24, 0x00	; 0
    3994:	11 f4       	brne	.+4      	; 0x399a <BUTTON_read+0x2c>
	{
		error_status = E_NOT_OK;
    3996:	19 82       	std	Y+1, r1	; 0x01
    3998:	51 c0       	rjmp	.+162    	; 0x3a3c <BUTTON_read+0xce>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id};
    399a:	ec 81       	ldd	r30, Y+4	; 0x04
    399c:	fd 81       	ldd	r31, Y+5	; 0x05
    399e:	80 81       	ld	r24, Z
    39a0:	28 2f       	mov	r18, r24
    39a2:	23 70       	andi	r18, 0x03	; 3
    39a4:	ec 81       	ldd	r30, Y+4	; 0x04
    39a6:	fd 81       	ldd	r31, Y+5	; 0x05
    39a8:	80 81       	ld	r24, Z
    39aa:	98 2f       	mov	r25, r24
    39ac:	96 95       	lsr	r25
    39ae:	96 95       	lsr	r25
    39b0:	97 70       	andi	r25, 0x07	; 7
    39b2:	1b 82       	std	Y+3, r1	; 0x03
    39b4:	23 70       	andi	r18, 0x03	; 3
    39b6:	8b 81       	ldd	r24, Y+3	; 0x03
    39b8:	8c 7f       	andi	r24, 0xFC	; 252
    39ba:	82 2b       	or	r24, r18
    39bc:	8b 83       	std	Y+3, r24	; 0x03
    39be:	89 2f       	mov	r24, r25
    39c0:	87 70       	andi	r24, 0x07	; 7
    39c2:	98 2f       	mov	r25, r24
    39c4:	99 0f       	add	r25, r25
    39c6:	99 0f       	add	r25, r25
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	83 7e       	andi	r24, 0xE3	; 227
    39cc:	89 2b       	or	r24, r25
    39ce:	8b 83       	std	Y+3, r24	; 0x03
		error_status = GPIO_pinRead(&btn_pin, &btn_pin_status);
    39d0:	ce 01       	movw	r24, r28
    39d2:	03 96       	adiw	r24, 0x03	; 3
    39d4:	9e 01       	movw	r18, r28
    39d6:	2e 5f       	subi	r18, 0xFE	; 254
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	b9 01       	movw	r22, r18
    39dc:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_pinRead>
    39e0:	89 83       	std	Y+1, r24	; 0x01
		switch(btn->button_active_t)
    39e2:	ec 81       	ldd	r30, Y+4	; 0x04
    39e4:	fd 81       	ldd	r31, Y+5	; 0x05
    39e6:	80 81       	ld	r24, Z
    39e8:	82 95       	swap	r24
    39ea:	86 95       	lsr	r24
    39ec:	87 70       	andi	r24, 0x07	; 7
    39ee:	81 70       	andi	r24, 0x01	; 1
    39f0:	28 2f       	mov	r18, r24
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	3a 87       	std	Y+10, r19	; 0x0a
    39f6:	29 87       	std	Y+9, r18	; 0x09
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	31 f0       	breq	.+12     	; 0x3a0c <BUTTON_read+0x9e>
    3a00:	29 85       	ldd	r18, Y+9	; 0x09
    3a02:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a04:	21 30       	cpi	r18, 0x01	; 1
    3a06:	31 05       	cpc	r19, r1
    3a08:	61 f0       	breq	.+24     	; 0x3a22 <BUTTON_read+0xb4>
    3a0a:	17 c0       	rjmp	.+46     	; 0x3a3a <BUTTON_read+0xcc>
		{
		case BUTTON_ACTIVE_HIGH:

			(*btn_state) = btn_pin_status == GPIO_HIGH ? BUTTON_PRESSED : BUTTON_RELEASED;
    3a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0e:	18 86       	std	Y+8, r1	; 0x08
    3a10:	81 30       	cpi	r24, 0x01	; 1
    3a12:	11 f0       	breq	.+4      	; 0x3a18 <BUTTON_read+0xaa>
    3a14:	31 e0       	ldi	r19, 0x01	; 1
    3a16:	38 87       	std	Y+8, r19	; 0x08
    3a18:	ee 81       	ldd	r30, Y+6	; 0x06
    3a1a:	ff 81       	ldd	r31, Y+7	; 0x07
    3a1c:	88 85       	ldd	r24, Y+8	; 0x08
    3a1e:	80 83       	st	Z, r24
    3a20:	0d c0       	rjmp	.+26     	; 0x3a3c <BUTTON_read+0xce>
			break;

		case BUTTON_ACTIVE_LOW:

			(*btn_state) = btn_pin_status == GPIO_LOW ? BUTTON_PRESSED : BUTTON_RELEASED;
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	8b 87       	std	Y+11, r24	; 0x0b
    3a26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a28:	99 23       	and	r25, r25
    3a2a:	11 f0       	breq	.+4      	; 0x3a30 <BUTTON_read+0xc2>
    3a2c:	21 e0       	ldi	r18, 0x01	; 1
    3a2e:	2b 87       	std	Y+11, r18	; 0x0b
    3a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a32:	ee 81       	ldd	r30, Y+6	; 0x06
    3a34:	ff 81       	ldd	r31, Y+7	; 0x07
    3a36:	80 83       	st	Z, r24
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <BUTTON_read+0xce>
			break;

		default:
			error_status = E_NOT_OK;
    3a3a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a3e:	2b 96       	adiw	r28, 0x0b	; 11
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	cf 91       	pop	r28
    3a4c:	df 91       	pop	r29
    3a4e:	08 95       	ret

00003a50 <main>:
#include "ECUAL_layer/KEYPAD_driver/keypad.h"
#include "ECUAL_layer/SEVEN_SEG_driver/seven_seg.h"
#include "ECUAL_layer/LCD_driver/lcd.h"

int main()
{
    3a50:	df 93       	push	r29
    3a52:	cf 93       	push	r28
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	65 97       	sbiw	r28, 0x15	; 21
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	f8 94       	cli
    3a5e:	de bf       	out	0x3e, r29	; 62
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	cd bf       	out	0x3d, r28	; 61
				.data_pin[2].port_id = PORTA_ID,
				.data_pin[2].pin_id = PIN_5,
				.data_pin[3].port_id = PORTA_ID,
				.data_pin[3].pin_id = PIN_6,

		};
    3a64:	86 e0       	ldi	r24, 0x06	; 6
    3a66:	fe 01       	movw	r30, r28
    3a68:	70 96       	adiw	r30, 0x10	; 16
    3a6a:	df 01       	movw	r26, r30
    3a6c:	98 2f       	mov	r25, r24
    3a6e:	1d 92       	st	X+, r1
    3a70:	9a 95       	dec	r25
    3a72:	e9 f7       	brne	.-6      	; 0x3a6e <main+0x1e>
    3a74:	88 89       	ldd	r24, Y+16	; 0x10
    3a76:	83 7e       	andi	r24, 0xE3	; 227
    3a78:	84 60       	ori	r24, 0x04	; 4
    3a7a:	88 8b       	std	Y+16, r24	; 0x10
    3a7c:	89 89       	ldd	r24, Y+17	; 0x11
    3a7e:	83 7e       	andi	r24, 0xE3	; 227
    3a80:	88 60       	ori	r24, 0x08	; 8
    3a82:	89 8b       	std	Y+17, r24	; 0x11
    3a84:	8a 89       	ldd	r24, Y+18	; 0x12
    3a86:	83 7e       	andi	r24, 0xE3	; 227
    3a88:	8c 60       	ori	r24, 0x0C	; 12
    3a8a:	8a 8b       	std	Y+18, r24	; 0x12
    3a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8e:	83 7e       	andi	r24, 0xE3	; 227
    3a90:	80 61       	ori	r24, 0x10	; 16
    3a92:	8b 8b       	std	Y+19, r24	; 0x13
    3a94:	8c 89       	ldd	r24, Y+20	; 0x14
    3a96:	83 7e       	andi	r24, 0xE3	; 227
    3a98:	84 61       	ori	r24, 0x14	; 20
    3a9a:	8c 8b       	std	Y+20, r24	; 0x14
    3a9c:	8d 89       	ldd	r24, Y+21	; 0x15
    3a9e:	83 7e       	andi	r24, 0xE3	; 227
    3aa0:	88 61       	ori	r24, 0x18	; 24
    3aa2:	8d 8b       	std	Y+21, r24	; 0x15

	//LCD_8bit_init(&lcd1);
	LCD_4bit_init(&kit_lcd);
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	40 96       	adiw	r24, 0x10	; 16
    3aa8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <LCD_4bit_init>

	uint8 counter;
	while(1)
	{
		//LCD_8bit_sendStringAtPosition(&lcd1, 1, 1, "Counter: ");
		LCD_4bit_sendStringAtPosition(&kit_lcd, 1, 1, "Loading");
    3aac:	ce 01       	movw	r24, r28
    3aae:	40 96       	adiw	r24, 0x10	; 16
    3ab0:	23 e6       	ldi	r18, 0x63	; 99
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	41 e0       	ldi	r20, 0x01	; 1
    3ab8:	0e 94 80 11 	call	0x2300	; 0x2300 <LCD_4bit_sendStringAtPosition>
		for (counter = 0; counter < 10; counter++)
    3abc:	1f 86       	std	Y+15, r1	; 0x0f
    3abe:	7a c0       	rjmp	.+244    	; 0x3bb4 <main+0x164>
		{
			//LCD_8bit_setCursorLocation(&lcd1, 0, 9);
			//LCD_8bit_sendNum(&lcd1, counter);
			LCD_4bit_sendChar(&kit_lcd, '.');
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	40 96       	adiw	r24, 0x10	; 16
    3ac4:	6e e2       	ldi	r22, 0x2E	; 46
    3ac6:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_4bit_sendChar>
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	aa e7       	ldi	r26, 0x7A	; 122
    3ad0:	b3 e4       	ldi	r27, 0x43	; 67
    3ad2:	8b 87       	std	Y+11, r24	; 0x0b
    3ad4:	9c 87       	std	Y+12, r25	; 0x0c
    3ad6:	ad 87       	std	Y+13, r26	; 0x0d
    3ad8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    3adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a e7       	ldi	r20, 0x7A	; 122
    3ae8:	55 e4       	ldi	r21, 0x45	; 69
    3aea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	8f 83       	std	Y+7, r24	; 0x07
    3af4:	98 87       	std	Y+8, r25	; 0x08
    3af6:	a9 87       	std	Y+9, r26	; 0x09
    3af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3afa:	6f 81       	ldd	r22, Y+7	; 0x07
    3afc:	78 85       	ldd	r23, Y+8	; 0x08
    3afe:	89 85       	ldd	r24, Y+9	; 0x09
    3b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	2c f4       	brge	.+10     	; 0x3b1c <main+0xcc>
		__ticks = 1;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	3f c0       	rjmp	.+126    	; 0x3b9a <main+0x14a>
	else if (__tmp > 65535)
    3b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1e:	78 85       	ldd	r23, Y+8	; 0x08
    3b20:	89 85       	ldd	r24, Y+9	; 0x09
    3b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	3f ef       	ldi	r19, 0xFF	; 255
    3b28:	4f e7       	ldi	r20, 0x7F	; 127
    3b2a:	57 e4       	ldi	r21, 0x47	; 71
    3b2c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b30:	18 16       	cp	r1, r24
    3b32:	4c f5       	brge	.+82     	; 0x3b86 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e2       	ldi	r20, 0x20	; 32
    3b42:	51 e4       	ldi	r21, 0x41	; 65
    3b44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
    3b5c:	0f c0       	rjmp	.+30     	; 0x3b7c <main+0x12c>
    3b5e:	80 e9       	ldi	r24, 0x90	; 144
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	9c 83       	std	Y+4, r25	; 0x04
    3b64:	8b 83       	std	Y+3, r24	; 0x03
    3b66:	8b 81       	ldd	r24, Y+3	; 0x03
    3b68:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <main+0x11a>
    3b6e:	9c 83       	std	Y+4, r25	; 0x04
    3b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	9e 83       	std	Y+6, r25	; 0x06
    3b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	69 f7       	brne	.-38     	; 0x3b5e <main+0x10e>
    3b84:	14 c0       	rjmp	.+40     	; 0x3bae <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b86:	6f 81       	ldd	r22, Y+7	; 0x07
    3b88:	78 85       	ldd	r23, Y+8	; 0x08
    3b8a:	89 85       	ldd	r24, Y+9	; 0x09
    3b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	9e 83       	std	Y+6, r25	; 0x06
    3b98:	8d 83       	std	Y+5, r24	; 0x05
    3b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9e:	9a 83       	std	Y+2, r25	; 0x02
    3ba0:	89 83       	std	Y+1, r24	; 0x01
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <main+0x156>
    3baa:	9a 83       	std	Y+2, r25	; 0x02
    3bac:	89 83       	std	Y+1, r24	; 0x01
	uint8 counter;
	while(1)
	{
		//LCD_8bit_sendStringAtPosition(&lcd1, 1, 1, "Counter: ");
		LCD_4bit_sendStringAtPosition(&kit_lcd, 1, 1, "Loading");
		for (counter = 0; counter < 10; counter++)
    3bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb0:	8f 5f       	subi	r24, 0xFF	; 255
    3bb2:	8f 87       	std	Y+15, r24	; 0x0f
    3bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb6:	8a 30       	cpi	r24, 0x0A	; 10
    3bb8:	08 f4       	brcc	.+2      	; 0x3bbc <main+0x16c>
    3bba:	82 cf       	rjmp	.-252    	; 0x3ac0 <main+0x70>

			_delay_ms(250);
		}
		//LCD_8bit_sendCommand(&lcd1, 0x01);

		LCD_4bit_sendCommand(&kit_lcd, 0x01);
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	40 96       	adiw	r24, 0x10	; 16
    3bc0:	61 e0       	ldi	r22, 0x01	; 1
    3bc2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_4bit_sendCommand>
    3bc6:	72 cf       	rjmp	.-284    	; 0x3aac <main+0x5c>

00003bc8 <__prologue_saves__>:
    3bc8:	2f 92       	push	r2
    3bca:	3f 92       	push	r3
    3bcc:	4f 92       	push	r4
    3bce:	5f 92       	push	r5
    3bd0:	6f 92       	push	r6
    3bd2:	7f 92       	push	r7
    3bd4:	8f 92       	push	r8
    3bd6:	9f 92       	push	r9
    3bd8:	af 92       	push	r10
    3bda:	bf 92       	push	r11
    3bdc:	cf 92       	push	r12
    3bde:	df 92       	push	r13
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
    3bf0:	ca 1b       	sub	r28, r26
    3bf2:	db 0b       	sbc	r29, r27
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	cd bf       	out	0x3d, r28	; 61
    3bfe:	09 94       	ijmp

00003c00 <__epilogue_restores__>:
    3c00:	2a 88       	ldd	r2, Y+18	; 0x12
    3c02:	39 88       	ldd	r3, Y+17	; 0x11
    3c04:	48 88       	ldd	r4, Y+16	; 0x10
    3c06:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c08:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c10:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c12:	b9 84       	ldd	r11, Y+9	; 0x09
    3c14:	c8 84       	ldd	r12, Y+8	; 0x08
    3c16:	df 80       	ldd	r13, Y+7	; 0x07
    3c18:	ee 80       	ldd	r14, Y+6	; 0x06
    3c1a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c1c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c1e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c20:	aa 81       	ldd	r26, Y+2	; 0x02
    3c22:	b9 81       	ldd	r27, Y+1	; 0x01
    3c24:	ce 0f       	add	r28, r30
    3c26:	d1 1d       	adc	r29, r1
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	ed 01       	movw	r28, r26
    3c34:	08 95       	ret

00003c36 <sprintf>:
    3c36:	ae e0       	ldi	r26, 0x0E	; 14
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	e1 e2       	ldi	r30, 0x21	; 33
    3c3c:	fe e1       	ldi	r31, 0x1E	; 30
    3c3e:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__prologue_saves__+0x1c>
    3c42:	0d 89       	ldd	r16, Y+21	; 0x15
    3c44:	1e 89       	ldd	r17, Y+22	; 0x16
    3c46:	86 e0       	ldi	r24, 0x06	; 6
    3c48:	8c 83       	std	Y+4, r24	; 0x04
    3c4a:	1a 83       	std	Y+2, r17	; 0x02
    3c4c:	09 83       	std	Y+1, r16	; 0x01
    3c4e:	8f ef       	ldi	r24, 0xFF	; 255
    3c50:	9f e7       	ldi	r25, 0x7F	; 127
    3c52:	9e 83       	std	Y+6, r25	; 0x06
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	9e 01       	movw	r18, r28
    3c58:	27 5e       	subi	r18, 0xE7	; 231
    3c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5c:	ce 01       	movw	r24, r28
    3c5e:	01 96       	adiw	r24, 0x01	; 1
    3c60:	6f 89       	ldd	r22, Y+23	; 0x17
    3c62:	78 8d       	ldd	r23, Y+24	; 0x18
    3c64:	a9 01       	movw	r20, r18
    3c66:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <vfprintf>
    3c6a:	2f 81       	ldd	r18, Y+7	; 0x07
    3c6c:	38 85       	ldd	r19, Y+8	; 0x08
    3c6e:	02 0f       	add	r16, r18
    3c70:	13 1f       	adc	r17, r19
    3c72:	f8 01       	movw	r30, r16
    3c74:	10 82       	st	Z, r1
    3c76:	2e 96       	adiw	r28, 0x0e	; 14
    3c78:	e4 e0       	ldi	r30, 0x04	; 4
    3c7a:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__epilogue_restores__+0x1c>

00003c7e <vfprintf>:
    3c7e:	ab e0       	ldi	r26, 0x0B	; 11
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	e5 e4       	ldi	r30, 0x45	; 69
    3c84:	fe e1       	ldi	r31, 0x1E	; 30
    3c86:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__prologue_saves__>
    3c8a:	3c 01       	movw	r6, r24
    3c8c:	2b 01       	movw	r4, r22
    3c8e:	5a 01       	movw	r10, r20
    3c90:	fc 01       	movw	r30, r24
    3c92:	17 82       	std	Z+7, r1	; 0x07
    3c94:	16 82       	std	Z+6, r1	; 0x06
    3c96:	83 81       	ldd	r24, Z+3	; 0x03
    3c98:	81 fd       	sbrc	r24, 1
    3c9a:	03 c0       	rjmp	.+6      	; 0x3ca2 <vfprintf+0x24>
    3c9c:	6f ef       	ldi	r22, 0xFF	; 255
    3c9e:	7f ef       	ldi	r23, 0xFF	; 255
    3ca0:	c6 c1       	rjmp	.+908    	; 0x402e <vfprintf+0x3b0>
    3ca2:	9a e0       	ldi	r25, 0x0A	; 10
    3ca4:	89 2e       	mov	r8, r25
    3ca6:	1e 01       	movw	r2, r28
    3ca8:	08 94       	sec
    3caa:	21 1c       	adc	r2, r1
    3cac:	31 1c       	adc	r3, r1
    3cae:	f3 01       	movw	r30, r6
    3cb0:	23 81       	ldd	r18, Z+3	; 0x03
    3cb2:	f2 01       	movw	r30, r4
    3cb4:	23 fd       	sbrc	r18, 3
    3cb6:	85 91       	lpm	r24, Z+
    3cb8:	23 ff       	sbrs	r18, 3
    3cba:	81 91       	ld	r24, Z+
    3cbc:	2f 01       	movw	r4, r30
    3cbe:	88 23       	and	r24, r24
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <vfprintf+0x46>
    3cc2:	b2 c1       	rjmp	.+868    	; 0x4028 <vfprintf+0x3aa>
    3cc4:	85 32       	cpi	r24, 0x25	; 37
    3cc6:	39 f4       	brne	.+14     	; 0x3cd6 <vfprintf+0x58>
    3cc8:	23 fd       	sbrc	r18, 3
    3cca:	85 91       	lpm	r24, Z+
    3ccc:	23 ff       	sbrs	r18, 3
    3cce:	81 91       	ld	r24, Z+
    3cd0:	2f 01       	movw	r4, r30
    3cd2:	85 32       	cpi	r24, 0x25	; 37
    3cd4:	29 f4       	brne	.+10     	; 0x3ce0 <vfprintf+0x62>
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	b3 01       	movw	r22, r6
    3cda:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    3cde:	e7 cf       	rjmp	.-50     	; 0x3cae <vfprintf+0x30>
    3ce0:	98 2f       	mov	r25, r24
    3ce2:	ff 24       	eor	r15, r15
    3ce4:	ee 24       	eor	r14, r14
    3ce6:	99 24       	eor	r9, r9
    3ce8:	ff e1       	ldi	r31, 0x1F	; 31
    3cea:	ff 15       	cp	r31, r15
    3cec:	d0 f0       	brcs	.+52     	; 0x3d22 <vfprintf+0xa4>
    3cee:	9b 32       	cpi	r25, 0x2B	; 43
    3cf0:	69 f0       	breq	.+26     	; 0x3d0c <vfprintf+0x8e>
    3cf2:	9c 32       	cpi	r25, 0x2C	; 44
    3cf4:	28 f4       	brcc	.+10     	; 0x3d00 <vfprintf+0x82>
    3cf6:	90 32       	cpi	r25, 0x20	; 32
    3cf8:	59 f0       	breq	.+22     	; 0x3d10 <vfprintf+0x92>
    3cfa:	93 32       	cpi	r25, 0x23	; 35
    3cfc:	91 f4       	brne	.+36     	; 0x3d22 <vfprintf+0xa4>
    3cfe:	0e c0       	rjmp	.+28     	; 0x3d1c <vfprintf+0x9e>
    3d00:	9d 32       	cpi	r25, 0x2D	; 45
    3d02:	49 f0       	breq	.+18     	; 0x3d16 <vfprintf+0x98>
    3d04:	90 33       	cpi	r25, 0x30	; 48
    3d06:	69 f4       	brne	.+26     	; 0x3d22 <vfprintf+0xa4>
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	24 c0       	rjmp	.+72     	; 0x3d54 <vfprintf+0xd6>
    3d0c:	52 e0       	ldi	r21, 0x02	; 2
    3d0e:	f5 2a       	or	r15, r21
    3d10:	84 e0       	ldi	r24, 0x04	; 4
    3d12:	f8 2a       	or	r15, r24
    3d14:	28 c0       	rjmp	.+80     	; 0x3d66 <vfprintf+0xe8>
    3d16:	98 e0       	ldi	r25, 0x08	; 8
    3d18:	f9 2a       	or	r15, r25
    3d1a:	25 c0       	rjmp	.+74     	; 0x3d66 <vfprintf+0xe8>
    3d1c:	e0 e1       	ldi	r30, 0x10	; 16
    3d1e:	fe 2a       	or	r15, r30
    3d20:	22 c0       	rjmp	.+68     	; 0x3d66 <vfprintf+0xe8>
    3d22:	f7 fc       	sbrc	r15, 7
    3d24:	29 c0       	rjmp	.+82     	; 0x3d78 <vfprintf+0xfa>
    3d26:	89 2f       	mov	r24, r25
    3d28:	80 53       	subi	r24, 0x30	; 48
    3d2a:	8a 30       	cpi	r24, 0x0A	; 10
    3d2c:	70 f4       	brcc	.+28     	; 0x3d4a <vfprintf+0xcc>
    3d2e:	f6 fe       	sbrs	r15, 6
    3d30:	05 c0       	rjmp	.+10     	; 0x3d3c <vfprintf+0xbe>
    3d32:	98 9c       	mul	r9, r8
    3d34:	90 2c       	mov	r9, r0
    3d36:	11 24       	eor	r1, r1
    3d38:	98 0e       	add	r9, r24
    3d3a:	15 c0       	rjmp	.+42     	; 0x3d66 <vfprintf+0xe8>
    3d3c:	e8 9c       	mul	r14, r8
    3d3e:	e0 2c       	mov	r14, r0
    3d40:	11 24       	eor	r1, r1
    3d42:	e8 0e       	add	r14, r24
    3d44:	f0 e2       	ldi	r31, 0x20	; 32
    3d46:	ff 2a       	or	r15, r31
    3d48:	0e c0       	rjmp	.+28     	; 0x3d66 <vfprintf+0xe8>
    3d4a:	9e 32       	cpi	r25, 0x2E	; 46
    3d4c:	29 f4       	brne	.+10     	; 0x3d58 <vfprintf+0xda>
    3d4e:	f6 fc       	sbrc	r15, 6
    3d50:	6b c1       	rjmp	.+726    	; 0x4028 <vfprintf+0x3aa>
    3d52:	40 e4       	ldi	r20, 0x40	; 64
    3d54:	f4 2a       	or	r15, r20
    3d56:	07 c0       	rjmp	.+14     	; 0x3d66 <vfprintf+0xe8>
    3d58:	9c 36       	cpi	r25, 0x6C	; 108
    3d5a:	19 f4       	brne	.+6      	; 0x3d62 <vfprintf+0xe4>
    3d5c:	50 e8       	ldi	r21, 0x80	; 128
    3d5e:	f5 2a       	or	r15, r21
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <vfprintf+0xe8>
    3d62:	98 36       	cpi	r25, 0x68	; 104
    3d64:	49 f4       	brne	.+18     	; 0x3d78 <vfprintf+0xfa>
    3d66:	f2 01       	movw	r30, r4
    3d68:	23 fd       	sbrc	r18, 3
    3d6a:	95 91       	lpm	r25, Z+
    3d6c:	23 ff       	sbrs	r18, 3
    3d6e:	91 91       	ld	r25, Z+
    3d70:	2f 01       	movw	r4, r30
    3d72:	99 23       	and	r25, r25
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <vfprintf+0xfa>
    3d76:	b8 cf       	rjmp	.-144    	; 0x3ce8 <vfprintf+0x6a>
    3d78:	89 2f       	mov	r24, r25
    3d7a:	85 54       	subi	r24, 0x45	; 69
    3d7c:	83 30       	cpi	r24, 0x03	; 3
    3d7e:	18 f0       	brcs	.+6      	; 0x3d86 <vfprintf+0x108>
    3d80:	80 52       	subi	r24, 0x20	; 32
    3d82:	83 30       	cpi	r24, 0x03	; 3
    3d84:	38 f4       	brcc	.+14     	; 0x3d94 <vfprintf+0x116>
    3d86:	44 e0       	ldi	r20, 0x04	; 4
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	a4 0e       	add	r10, r20
    3d8c:	b5 1e       	adc	r11, r21
    3d8e:	5f e3       	ldi	r21, 0x3F	; 63
    3d90:	59 83       	std	Y+1, r21	; 0x01
    3d92:	0f c0       	rjmp	.+30     	; 0x3db2 <vfprintf+0x134>
    3d94:	93 36       	cpi	r25, 0x63	; 99
    3d96:	31 f0       	breq	.+12     	; 0x3da4 <vfprintf+0x126>
    3d98:	93 37       	cpi	r25, 0x73	; 115
    3d9a:	79 f0       	breq	.+30     	; 0x3dba <vfprintf+0x13c>
    3d9c:	93 35       	cpi	r25, 0x53	; 83
    3d9e:	09 f0       	breq	.+2      	; 0x3da2 <vfprintf+0x124>
    3da0:	56 c0       	rjmp	.+172    	; 0x3e4e <vfprintf+0x1d0>
    3da2:	20 c0       	rjmp	.+64     	; 0x3de4 <vfprintf+0x166>
    3da4:	f5 01       	movw	r30, r10
    3da6:	80 81       	ld	r24, Z
    3da8:	89 83       	std	Y+1, r24	; 0x01
    3daa:	42 e0       	ldi	r20, 0x02	; 2
    3dac:	50 e0       	ldi	r21, 0x00	; 0
    3dae:	a4 0e       	add	r10, r20
    3db0:	b5 1e       	adc	r11, r21
    3db2:	61 01       	movw	r12, r2
    3db4:	01 e0       	ldi	r16, 0x01	; 1
    3db6:	10 e0       	ldi	r17, 0x00	; 0
    3db8:	12 c0       	rjmp	.+36     	; 0x3dde <vfprintf+0x160>
    3dba:	f5 01       	movw	r30, r10
    3dbc:	c0 80       	ld	r12, Z
    3dbe:	d1 80       	ldd	r13, Z+1	; 0x01
    3dc0:	f6 fc       	sbrc	r15, 6
    3dc2:	03 c0       	rjmp	.+6      	; 0x3dca <vfprintf+0x14c>
    3dc4:	6f ef       	ldi	r22, 0xFF	; 255
    3dc6:	7f ef       	ldi	r23, 0xFF	; 255
    3dc8:	02 c0       	rjmp	.+4      	; 0x3dce <vfprintf+0x150>
    3dca:	69 2d       	mov	r22, r9
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	42 e0       	ldi	r20, 0x02	; 2
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	a4 0e       	add	r10, r20
    3dd4:	b5 1e       	adc	r11, r21
    3dd6:	c6 01       	movw	r24, r12
    3dd8:	0e 94 27 20 	call	0x404e	; 0x404e <strnlen>
    3ddc:	8c 01       	movw	r16, r24
    3dde:	5f e7       	ldi	r21, 0x7F	; 127
    3de0:	f5 22       	and	r15, r21
    3de2:	14 c0       	rjmp	.+40     	; 0x3e0c <vfprintf+0x18e>
    3de4:	f5 01       	movw	r30, r10
    3de6:	c0 80       	ld	r12, Z
    3de8:	d1 80       	ldd	r13, Z+1	; 0x01
    3dea:	f6 fc       	sbrc	r15, 6
    3dec:	03 c0       	rjmp	.+6      	; 0x3df4 <vfprintf+0x176>
    3dee:	6f ef       	ldi	r22, 0xFF	; 255
    3df0:	7f ef       	ldi	r23, 0xFF	; 255
    3df2:	02 c0       	rjmp	.+4      	; 0x3df8 <vfprintf+0x17a>
    3df4:	69 2d       	mov	r22, r9
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	42 e0       	ldi	r20, 0x02	; 2
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	a4 0e       	add	r10, r20
    3dfe:	b5 1e       	adc	r11, r21
    3e00:	c6 01       	movw	r24, r12
    3e02:	0e 94 1c 20 	call	0x4038	; 0x4038 <strnlen_P>
    3e06:	8c 01       	movw	r16, r24
    3e08:	50 e8       	ldi	r21, 0x80	; 128
    3e0a:	f5 2a       	or	r15, r21
    3e0c:	f3 fe       	sbrs	r15, 3
    3e0e:	07 c0       	rjmp	.+14     	; 0x3e1e <vfprintf+0x1a0>
    3e10:	1a c0       	rjmp	.+52     	; 0x3e46 <vfprintf+0x1c8>
    3e12:	80 e2       	ldi	r24, 0x20	; 32
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	b3 01       	movw	r22, r6
    3e18:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    3e1c:	ea 94       	dec	r14
    3e1e:	8e 2d       	mov	r24, r14
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	08 17       	cp	r16, r24
    3e24:	19 07       	cpc	r17, r25
    3e26:	a8 f3       	brcs	.-22     	; 0x3e12 <vfprintf+0x194>
    3e28:	0e c0       	rjmp	.+28     	; 0x3e46 <vfprintf+0x1c8>
    3e2a:	f6 01       	movw	r30, r12
    3e2c:	f7 fc       	sbrc	r15, 7
    3e2e:	85 91       	lpm	r24, Z+
    3e30:	f7 fe       	sbrs	r15, 7
    3e32:	81 91       	ld	r24, Z+
    3e34:	6f 01       	movw	r12, r30
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	b3 01       	movw	r22, r6
    3e3a:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    3e3e:	e1 10       	cpse	r14, r1
    3e40:	ea 94       	dec	r14
    3e42:	01 50       	subi	r16, 0x01	; 1
    3e44:	10 40       	sbci	r17, 0x00	; 0
    3e46:	01 15       	cp	r16, r1
    3e48:	11 05       	cpc	r17, r1
    3e4a:	79 f7       	brne	.-34     	; 0x3e2a <vfprintf+0x1ac>
    3e4c:	ea c0       	rjmp	.+468    	; 0x4022 <vfprintf+0x3a4>
    3e4e:	94 36       	cpi	r25, 0x64	; 100
    3e50:	11 f0       	breq	.+4      	; 0x3e56 <vfprintf+0x1d8>
    3e52:	99 36       	cpi	r25, 0x69	; 105
    3e54:	69 f5       	brne	.+90     	; 0x3eb0 <vfprintf+0x232>
    3e56:	f7 fe       	sbrs	r15, 7
    3e58:	08 c0       	rjmp	.+16     	; 0x3e6a <vfprintf+0x1ec>
    3e5a:	f5 01       	movw	r30, r10
    3e5c:	20 81       	ld	r18, Z
    3e5e:	31 81       	ldd	r19, Z+1	; 0x01
    3e60:	42 81       	ldd	r20, Z+2	; 0x02
    3e62:	53 81       	ldd	r21, Z+3	; 0x03
    3e64:	84 e0       	ldi	r24, 0x04	; 4
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0a c0       	rjmp	.+20     	; 0x3e7e <vfprintf+0x200>
    3e6a:	f5 01       	movw	r30, r10
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	9c 01       	movw	r18, r24
    3e72:	44 27       	eor	r20, r20
    3e74:	37 fd       	sbrc	r19, 7
    3e76:	40 95       	com	r20
    3e78:	54 2f       	mov	r21, r20
    3e7a:	82 e0       	ldi	r24, 0x02	; 2
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	a8 0e       	add	r10, r24
    3e80:	b9 1e       	adc	r11, r25
    3e82:	9f e6       	ldi	r25, 0x6F	; 111
    3e84:	f9 22       	and	r15, r25
    3e86:	57 ff       	sbrs	r21, 7
    3e88:	09 c0       	rjmp	.+18     	; 0x3e9c <vfprintf+0x21e>
    3e8a:	50 95       	com	r21
    3e8c:	40 95       	com	r20
    3e8e:	30 95       	com	r19
    3e90:	21 95       	neg	r18
    3e92:	3f 4f       	sbci	r19, 0xFF	; 255
    3e94:	4f 4f       	sbci	r20, 0xFF	; 255
    3e96:	5f 4f       	sbci	r21, 0xFF	; 255
    3e98:	e0 e8       	ldi	r30, 0x80	; 128
    3e9a:	fe 2a       	or	r15, r30
    3e9c:	ca 01       	movw	r24, r20
    3e9e:	b9 01       	movw	r22, r18
    3ea0:	a1 01       	movw	r20, r2
    3ea2:	2a e0       	ldi	r18, 0x0A	; 10
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ultoa_invert>
    3eaa:	d8 2e       	mov	r13, r24
    3eac:	d2 18       	sub	r13, r2
    3eae:	40 c0       	rjmp	.+128    	; 0x3f30 <vfprintf+0x2b2>
    3eb0:	95 37       	cpi	r25, 0x75	; 117
    3eb2:	29 f4       	brne	.+10     	; 0x3ebe <vfprintf+0x240>
    3eb4:	1f 2d       	mov	r17, r15
    3eb6:	1f 7e       	andi	r17, 0xEF	; 239
    3eb8:	2a e0       	ldi	r18, 0x0A	; 10
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	1d c0       	rjmp	.+58     	; 0x3ef8 <vfprintf+0x27a>
    3ebe:	1f 2d       	mov	r17, r15
    3ec0:	19 7f       	andi	r17, 0xF9	; 249
    3ec2:	9f 36       	cpi	r25, 0x6F	; 111
    3ec4:	61 f0       	breq	.+24     	; 0x3ede <vfprintf+0x260>
    3ec6:	90 37       	cpi	r25, 0x70	; 112
    3ec8:	20 f4       	brcc	.+8      	; 0x3ed2 <vfprintf+0x254>
    3eca:	98 35       	cpi	r25, 0x58	; 88
    3ecc:	09 f0       	breq	.+2      	; 0x3ed0 <vfprintf+0x252>
    3ece:	ac c0       	rjmp	.+344    	; 0x4028 <vfprintf+0x3aa>
    3ed0:	0f c0       	rjmp	.+30     	; 0x3ef0 <vfprintf+0x272>
    3ed2:	90 37       	cpi	r25, 0x70	; 112
    3ed4:	39 f0       	breq	.+14     	; 0x3ee4 <vfprintf+0x266>
    3ed6:	98 37       	cpi	r25, 0x78	; 120
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <vfprintf+0x25e>
    3eda:	a6 c0       	rjmp	.+332    	; 0x4028 <vfprintf+0x3aa>
    3edc:	04 c0       	rjmp	.+8      	; 0x3ee6 <vfprintf+0x268>
    3ede:	28 e0       	ldi	r18, 0x08	; 8
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	0a c0       	rjmp	.+20     	; 0x3ef8 <vfprintf+0x27a>
    3ee4:	10 61       	ori	r17, 0x10	; 16
    3ee6:	14 fd       	sbrc	r17, 4
    3ee8:	14 60       	ori	r17, 0x04	; 4
    3eea:	20 e1       	ldi	r18, 0x10	; 16
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	04 c0       	rjmp	.+8      	; 0x3ef8 <vfprintf+0x27a>
    3ef0:	14 fd       	sbrc	r17, 4
    3ef2:	16 60       	ori	r17, 0x06	; 6
    3ef4:	20 e1       	ldi	r18, 0x10	; 16
    3ef6:	32 e0       	ldi	r19, 0x02	; 2
    3ef8:	17 ff       	sbrs	r17, 7
    3efa:	08 c0       	rjmp	.+16     	; 0x3f0c <vfprintf+0x28e>
    3efc:	f5 01       	movw	r30, r10
    3efe:	60 81       	ld	r22, Z
    3f00:	71 81       	ldd	r23, Z+1	; 0x01
    3f02:	82 81       	ldd	r24, Z+2	; 0x02
    3f04:	93 81       	ldd	r25, Z+3	; 0x03
    3f06:	44 e0       	ldi	r20, 0x04	; 4
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	08 c0       	rjmp	.+16     	; 0x3f1c <vfprintf+0x29e>
    3f0c:	f5 01       	movw	r30, r10
    3f0e:	80 81       	ld	r24, Z
    3f10:	91 81       	ldd	r25, Z+1	; 0x01
    3f12:	bc 01       	movw	r22, r24
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	42 e0       	ldi	r20, 0x02	; 2
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	a4 0e       	add	r10, r20
    3f1e:	b5 1e       	adc	r11, r21
    3f20:	a1 01       	movw	r20, r2
    3f22:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ultoa_invert>
    3f26:	d8 2e       	mov	r13, r24
    3f28:	d2 18       	sub	r13, r2
    3f2a:	8f e7       	ldi	r24, 0x7F	; 127
    3f2c:	f8 2e       	mov	r15, r24
    3f2e:	f1 22       	and	r15, r17
    3f30:	f6 fe       	sbrs	r15, 6
    3f32:	0b c0       	rjmp	.+22     	; 0x3f4a <vfprintf+0x2cc>
    3f34:	5e ef       	ldi	r21, 0xFE	; 254
    3f36:	f5 22       	and	r15, r21
    3f38:	d9 14       	cp	r13, r9
    3f3a:	38 f4       	brcc	.+14     	; 0x3f4a <vfprintf+0x2cc>
    3f3c:	f4 fe       	sbrs	r15, 4
    3f3e:	07 c0       	rjmp	.+14     	; 0x3f4e <vfprintf+0x2d0>
    3f40:	f2 fc       	sbrc	r15, 2
    3f42:	05 c0       	rjmp	.+10     	; 0x3f4e <vfprintf+0x2d0>
    3f44:	8f ee       	ldi	r24, 0xEF	; 239
    3f46:	f8 22       	and	r15, r24
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <vfprintf+0x2d0>
    3f4a:	1d 2d       	mov	r17, r13
    3f4c:	01 c0       	rjmp	.+2      	; 0x3f50 <vfprintf+0x2d2>
    3f4e:	19 2d       	mov	r17, r9
    3f50:	f4 fe       	sbrs	r15, 4
    3f52:	0d c0       	rjmp	.+26     	; 0x3f6e <vfprintf+0x2f0>
    3f54:	fe 01       	movw	r30, r28
    3f56:	ed 0d       	add	r30, r13
    3f58:	f1 1d       	adc	r31, r1
    3f5a:	80 81       	ld	r24, Z
    3f5c:	80 33       	cpi	r24, 0x30	; 48
    3f5e:	19 f4       	brne	.+6      	; 0x3f66 <vfprintf+0x2e8>
    3f60:	99 ee       	ldi	r25, 0xE9	; 233
    3f62:	f9 22       	and	r15, r25
    3f64:	08 c0       	rjmp	.+16     	; 0x3f76 <vfprintf+0x2f8>
    3f66:	1f 5f       	subi	r17, 0xFF	; 255
    3f68:	f2 fe       	sbrs	r15, 2
    3f6a:	05 c0       	rjmp	.+10     	; 0x3f76 <vfprintf+0x2f8>
    3f6c:	03 c0       	rjmp	.+6      	; 0x3f74 <vfprintf+0x2f6>
    3f6e:	8f 2d       	mov	r24, r15
    3f70:	86 78       	andi	r24, 0x86	; 134
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <vfprintf+0x2f8>
    3f74:	1f 5f       	subi	r17, 0xFF	; 255
    3f76:	0f 2d       	mov	r16, r15
    3f78:	f3 fc       	sbrc	r15, 3
    3f7a:	14 c0       	rjmp	.+40     	; 0x3fa4 <vfprintf+0x326>
    3f7c:	f0 fe       	sbrs	r15, 0
    3f7e:	0f c0       	rjmp	.+30     	; 0x3f9e <vfprintf+0x320>
    3f80:	1e 15       	cp	r17, r14
    3f82:	10 f0       	brcs	.+4      	; 0x3f88 <vfprintf+0x30a>
    3f84:	9d 2c       	mov	r9, r13
    3f86:	0b c0       	rjmp	.+22     	; 0x3f9e <vfprintf+0x320>
    3f88:	9d 2c       	mov	r9, r13
    3f8a:	9e 0c       	add	r9, r14
    3f8c:	91 1a       	sub	r9, r17
    3f8e:	1e 2d       	mov	r17, r14
    3f90:	06 c0       	rjmp	.+12     	; 0x3f9e <vfprintf+0x320>
    3f92:	80 e2       	ldi	r24, 0x20	; 32
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	b3 01       	movw	r22, r6
    3f98:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    3f9c:	1f 5f       	subi	r17, 0xFF	; 255
    3f9e:	1e 15       	cp	r17, r14
    3fa0:	c0 f3       	brcs	.-16     	; 0x3f92 <vfprintf+0x314>
    3fa2:	04 c0       	rjmp	.+8      	; 0x3fac <vfprintf+0x32e>
    3fa4:	1e 15       	cp	r17, r14
    3fa6:	10 f4       	brcc	.+4      	; 0x3fac <vfprintf+0x32e>
    3fa8:	e1 1a       	sub	r14, r17
    3faa:	01 c0       	rjmp	.+2      	; 0x3fae <vfprintf+0x330>
    3fac:	ee 24       	eor	r14, r14
    3fae:	04 ff       	sbrs	r16, 4
    3fb0:	0f c0       	rjmp	.+30     	; 0x3fd0 <vfprintf+0x352>
    3fb2:	80 e3       	ldi	r24, 0x30	; 48
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	b3 01       	movw	r22, r6
    3fb8:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    3fbc:	02 ff       	sbrs	r16, 2
    3fbe:	1d c0       	rjmp	.+58     	; 0x3ffa <vfprintf+0x37c>
    3fc0:	01 fd       	sbrc	r16, 1
    3fc2:	03 c0       	rjmp	.+6      	; 0x3fca <vfprintf+0x34c>
    3fc4:	88 e7       	ldi	r24, 0x78	; 120
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0e c0       	rjmp	.+28     	; 0x3fe6 <vfprintf+0x368>
    3fca:	88 e5       	ldi	r24, 0x58	; 88
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0b c0       	rjmp	.+22     	; 0x3fe6 <vfprintf+0x368>
    3fd0:	80 2f       	mov	r24, r16
    3fd2:	86 78       	andi	r24, 0x86	; 134
    3fd4:	91 f0       	breq	.+36     	; 0x3ffa <vfprintf+0x37c>
    3fd6:	01 ff       	sbrs	r16, 1
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <vfprintf+0x360>
    3fda:	8b e2       	ldi	r24, 0x2B	; 43
    3fdc:	01 c0       	rjmp	.+2      	; 0x3fe0 <vfprintf+0x362>
    3fde:	80 e2       	ldi	r24, 0x20	; 32
    3fe0:	f7 fc       	sbrc	r15, 7
    3fe2:	8d e2       	ldi	r24, 0x2D	; 45
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	b3 01       	movw	r22, r6
    3fe8:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    3fec:	06 c0       	rjmp	.+12     	; 0x3ffa <vfprintf+0x37c>
    3fee:	80 e3       	ldi	r24, 0x30	; 48
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	b3 01       	movw	r22, r6
    3ff4:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    3ff8:	9a 94       	dec	r9
    3ffa:	d9 14       	cp	r13, r9
    3ffc:	c0 f3       	brcs	.-16     	; 0x3fee <vfprintf+0x370>
    3ffe:	da 94       	dec	r13
    4000:	f1 01       	movw	r30, r2
    4002:	ed 0d       	add	r30, r13
    4004:	f1 1d       	adc	r31, r1
    4006:	80 81       	ld	r24, Z
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	b3 01       	movw	r22, r6
    400c:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    4010:	dd 20       	and	r13, r13
    4012:	a9 f7       	brne	.-22     	; 0x3ffe <vfprintf+0x380>
    4014:	06 c0       	rjmp	.+12     	; 0x4022 <vfprintf+0x3a4>
    4016:	80 e2       	ldi	r24, 0x20	; 32
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	b3 01       	movw	r22, r6
    401c:	0e 94 32 20 	call	0x4064	; 0x4064 <fputc>
    4020:	ea 94       	dec	r14
    4022:	ee 20       	and	r14, r14
    4024:	c1 f7       	brne	.-16     	; 0x4016 <vfprintf+0x398>
    4026:	43 ce       	rjmp	.-890    	; 0x3cae <vfprintf+0x30>
    4028:	f3 01       	movw	r30, r6
    402a:	66 81       	ldd	r22, Z+6	; 0x06
    402c:	77 81       	ldd	r23, Z+7	; 0x07
    402e:	cb 01       	movw	r24, r22
    4030:	2b 96       	adiw	r28, 0x0b	; 11
    4032:	e2 e1       	ldi	r30, 0x12	; 18
    4034:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__epilogue_restores__>

00004038 <strnlen_P>:
    4038:	fc 01       	movw	r30, r24
    403a:	05 90       	lpm	r0, Z+
    403c:	61 50       	subi	r22, 0x01	; 1
    403e:	70 40       	sbci	r23, 0x00	; 0
    4040:	01 10       	cpse	r0, r1
    4042:	d8 f7       	brcc	.-10     	; 0x403a <strnlen_P+0x2>
    4044:	80 95       	com	r24
    4046:	90 95       	com	r25
    4048:	8e 0f       	add	r24, r30
    404a:	9f 1f       	adc	r25, r31
    404c:	08 95       	ret

0000404e <strnlen>:
    404e:	fc 01       	movw	r30, r24
    4050:	61 50       	subi	r22, 0x01	; 1
    4052:	70 40       	sbci	r23, 0x00	; 0
    4054:	01 90       	ld	r0, Z+
    4056:	01 10       	cpse	r0, r1
    4058:	d8 f7       	brcc	.-10     	; 0x4050 <strnlen+0x2>
    405a:	80 95       	com	r24
    405c:	90 95       	com	r25
    405e:	8e 0f       	add	r24, r30
    4060:	9f 1f       	adc	r25, r31
    4062:	08 95       	ret

00004064 <fputc>:
    4064:	0f 93       	push	r16
    4066:	1f 93       	push	r17
    4068:	cf 93       	push	r28
    406a:	df 93       	push	r29
    406c:	8c 01       	movw	r16, r24
    406e:	eb 01       	movw	r28, r22
    4070:	8b 81       	ldd	r24, Y+3	; 0x03
    4072:	81 ff       	sbrs	r24, 1
    4074:	1b c0       	rjmp	.+54     	; 0x40ac <fputc+0x48>
    4076:	82 ff       	sbrs	r24, 2
    4078:	0d c0       	rjmp	.+26     	; 0x4094 <fputc+0x30>
    407a:	2e 81       	ldd	r18, Y+6	; 0x06
    407c:	3f 81       	ldd	r19, Y+7	; 0x07
    407e:	8c 81       	ldd	r24, Y+4	; 0x04
    4080:	9d 81       	ldd	r25, Y+5	; 0x05
    4082:	28 17       	cp	r18, r24
    4084:	39 07       	cpc	r19, r25
    4086:	64 f4       	brge	.+24     	; 0x40a0 <fputc+0x3c>
    4088:	e8 81       	ld	r30, Y
    408a:	f9 81       	ldd	r31, Y+1	; 0x01
    408c:	01 93       	st	Z+, r16
    408e:	f9 83       	std	Y+1, r31	; 0x01
    4090:	e8 83       	st	Y, r30
    4092:	06 c0       	rjmp	.+12     	; 0x40a0 <fputc+0x3c>
    4094:	e8 85       	ldd	r30, Y+8	; 0x08
    4096:	f9 85       	ldd	r31, Y+9	; 0x09
    4098:	80 2f       	mov	r24, r16
    409a:	09 95       	icall
    409c:	89 2b       	or	r24, r25
    409e:	31 f4       	brne	.+12     	; 0x40ac <fputc+0x48>
    40a0:	8e 81       	ldd	r24, Y+6	; 0x06
    40a2:	9f 81       	ldd	r25, Y+7	; 0x07
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	9f 83       	std	Y+7, r25	; 0x07
    40a8:	8e 83       	std	Y+6, r24	; 0x06
    40aa:	02 c0       	rjmp	.+4      	; 0x40b0 <fputc+0x4c>
    40ac:	0f ef       	ldi	r16, 0xFF	; 255
    40ae:	1f ef       	ldi	r17, 0xFF	; 255
    40b0:	c8 01       	movw	r24, r16
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	1f 91       	pop	r17
    40b8:	0f 91       	pop	r16
    40ba:	08 95       	ret

000040bc <__ultoa_invert>:
    40bc:	fa 01       	movw	r30, r20
    40be:	aa 27       	eor	r26, r26
    40c0:	28 30       	cpi	r18, 0x08	; 8
    40c2:	51 f1       	breq	.+84     	; 0x4118 <__ultoa_invert+0x5c>
    40c4:	20 31       	cpi	r18, 0x10	; 16
    40c6:	81 f1       	breq	.+96     	; 0x4128 <__ultoa_invert+0x6c>
    40c8:	e8 94       	clt
    40ca:	6f 93       	push	r22
    40cc:	6e 7f       	andi	r22, 0xFE	; 254
    40ce:	6e 5f       	subi	r22, 0xFE	; 254
    40d0:	7f 4f       	sbci	r23, 0xFF	; 255
    40d2:	8f 4f       	sbci	r24, 0xFF	; 255
    40d4:	9f 4f       	sbci	r25, 0xFF	; 255
    40d6:	af 4f       	sbci	r26, 0xFF	; 255
    40d8:	b1 e0       	ldi	r27, 0x01	; 1
    40da:	3e d0       	rcall	.+124    	; 0x4158 <__ultoa_invert+0x9c>
    40dc:	b4 e0       	ldi	r27, 0x04	; 4
    40de:	3c d0       	rcall	.+120    	; 0x4158 <__ultoa_invert+0x9c>
    40e0:	67 0f       	add	r22, r23
    40e2:	78 1f       	adc	r23, r24
    40e4:	89 1f       	adc	r24, r25
    40e6:	9a 1f       	adc	r25, r26
    40e8:	a1 1d       	adc	r26, r1
    40ea:	68 0f       	add	r22, r24
    40ec:	79 1f       	adc	r23, r25
    40ee:	8a 1f       	adc	r24, r26
    40f0:	91 1d       	adc	r25, r1
    40f2:	a1 1d       	adc	r26, r1
    40f4:	6a 0f       	add	r22, r26
    40f6:	71 1d       	adc	r23, r1
    40f8:	81 1d       	adc	r24, r1
    40fa:	91 1d       	adc	r25, r1
    40fc:	a1 1d       	adc	r26, r1
    40fe:	20 d0       	rcall	.+64     	; 0x4140 <__ultoa_invert+0x84>
    4100:	09 f4       	brne	.+2      	; 0x4104 <__ultoa_invert+0x48>
    4102:	68 94       	set
    4104:	3f 91       	pop	r19
    4106:	2a e0       	ldi	r18, 0x0A	; 10
    4108:	26 9f       	mul	r18, r22
    410a:	11 24       	eor	r1, r1
    410c:	30 19       	sub	r19, r0
    410e:	30 5d       	subi	r19, 0xD0	; 208
    4110:	31 93       	st	Z+, r19
    4112:	de f6       	brtc	.-74     	; 0x40ca <__ultoa_invert+0xe>
    4114:	cf 01       	movw	r24, r30
    4116:	08 95       	ret
    4118:	46 2f       	mov	r20, r22
    411a:	47 70       	andi	r20, 0x07	; 7
    411c:	40 5d       	subi	r20, 0xD0	; 208
    411e:	41 93       	st	Z+, r20
    4120:	b3 e0       	ldi	r27, 0x03	; 3
    4122:	0f d0       	rcall	.+30     	; 0x4142 <__ultoa_invert+0x86>
    4124:	c9 f7       	brne	.-14     	; 0x4118 <__ultoa_invert+0x5c>
    4126:	f6 cf       	rjmp	.-20     	; 0x4114 <__ultoa_invert+0x58>
    4128:	46 2f       	mov	r20, r22
    412a:	4f 70       	andi	r20, 0x0F	; 15
    412c:	40 5d       	subi	r20, 0xD0	; 208
    412e:	4a 33       	cpi	r20, 0x3A	; 58
    4130:	18 f0       	brcs	.+6      	; 0x4138 <__ultoa_invert+0x7c>
    4132:	49 5d       	subi	r20, 0xD9	; 217
    4134:	31 fd       	sbrc	r19, 1
    4136:	40 52       	subi	r20, 0x20	; 32
    4138:	41 93       	st	Z+, r20
    413a:	02 d0       	rcall	.+4      	; 0x4140 <__ultoa_invert+0x84>
    413c:	a9 f7       	brne	.-22     	; 0x4128 <__ultoa_invert+0x6c>
    413e:	ea cf       	rjmp	.-44     	; 0x4114 <__ultoa_invert+0x58>
    4140:	b4 e0       	ldi	r27, 0x04	; 4
    4142:	a6 95       	lsr	r26
    4144:	97 95       	ror	r25
    4146:	87 95       	ror	r24
    4148:	77 95       	ror	r23
    414a:	67 95       	ror	r22
    414c:	ba 95       	dec	r27
    414e:	c9 f7       	brne	.-14     	; 0x4142 <__ultoa_invert+0x86>
    4150:	00 97       	sbiw	r24, 0x00	; 0
    4152:	61 05       	cpc	r22, r1
    4154:	71 05       	cpc	r23, r1
    4156:	08 95       	ret
    4158:	9b 01       	movw	r18, r22
    415a:	ac 01       	movw	r20, r24
    415c:	0a 2e       	mov	r0, r26
    415e:	06 94       	lsr	r0
    4160:	57 95       	ror	r21
    4162:	47 95       	ror	r20
    4164:	37 95       	ror	r19
    4166:	27 95       	ror	r18
    4168:	ba 95       	dec	r27
    416a:	c9 f7       	brne	.-14     	; 0x415e <__ultoa_invert+0xa2>
    416c:	62 0f       	add	r22, r18
    416e:	73 1f       	adc	r23, r19
    4170:	84 1f       	adc	r24, r20
    4172:	95 1f       	adc	r25, r21
    4174:	a0 1d       	adc	r26, r0
    4176:	08 95       	ret

00004178 <_exit>:
    4178:	f8 94       	cli

0000417a <__stop_program>:
    417a:	ff cf       	rjmp	.-2      	; 0x417a <__stop_program>
