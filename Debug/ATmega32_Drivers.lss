
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000446a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000446a  000044fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080009e  0080009e  0000453c  2**0
                  ALLOC
  3 .stab         00004944  00000000  00000000  0000453c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002669  00000000  00000000  00008e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b649  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d81d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fa20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000fce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_1>
       8:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_2>
       c:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <main>
      8a:	0c 94 33 22 	jmp	0x4466	; 0x4466 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <INTERRUPT_EXTI0_setTrigger>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType INTERRUPT_EXTI0_setTrigger(const interrupt_trigger_t trigger)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <INTERRUPT_EXTI0_setTrigger+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <INTERRUPT_EXTI0_setTrigger+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	89 83       	std	Y+1, r24	; 0x01

	/* check required trigger */
	switch(trigger)
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3c 83       	std	Y+4, r19	; 0x04
     cb8:	2b 83       	std	Y+3, r18	; 0x03
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	e9 f0       	breq	.+58     	; 0xcfe <INTERRUPT_EXTI0_setTrigger+0x60>
     cc4:	2b 81       	ldd	r18, Y+3	; 0x03
     cc6:	3c 81       	ldd	r19, Y+4	; 0x04
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <INTERRUPT_EXTI0_setTrigger+0x3a>
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	61 f0       	breq	.+24     	; 0xcee <INTERRUPT_EXTI0_setTrigger+0x50>
     cd6:	2d c0       	rjmp	.+90     	; 0xd32 <INTERRUPT_EXTI0_setTrigger+0x94>
     cd8:	2b 81       	ldd	r18, Y+3	; 0x03
     cda:	3c 81       	ldd	r19, Y+4	; 0x04
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	b9 f0       	breq	.+46     	; 0xd10 <INTERRUPT_EXTI0_setTrigger+0x72>
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	91 05       	cpc	r25, r1
     cea:	d9 f0       	breq	.+54     	; 0xd22 <INTERRUPT_EXTI0_setTrigger+0x84>
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <INTERRUPT_EXTI0_setTrigger+0x94>
	{
	case LOW_LEVEL:
		MCUCR = (MCUCR & 0xFC) | (0x00); 					/* modify ISC01 && ISC00 only to 0,0 */
     cee:	a5 e5       	ldi	r26, 0x55	; 85
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e5 e5       	ldi	r30, 0x55	; 85
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8c 7f       	andi	r24, 0xFC	; 252
     cfa:	8c 93       	st	X, r24
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case ANY_LOGICAL_CHANGE:
		MCUCR = (MCUCR & 0xFC) | (0x01); 					/* modify ISC01 && ISC00 only to 0,1 */
     cfe:	a5 e5       	ldi	r26, 0x55	; 85
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e5       	ldi	r30, 0x55	; 85
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8c 7f       	andi	r24, 0xFC	; 252
     d0a:	81 60       	ori	r24, 0x01	; 1
     d0c:	8c 93       	st	X, r24
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case FALLING_EDGE:
		MCUCR = (MCUCR & 0xFC) | (0x02); 					/* modify ISC01 && ISC00 only to 1,0 */
     d10:	a5 e5       	ldi	r26, 0x55	; 85
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e5       	ldi	r30, 0x55	; 85
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8c 7f       	andi	r24, 0xFC	; 252
     d1c:	82 60       	ori	r24, 0x02	; 2
     d1e:	8c 93       	st	X, r24
     d20:	09 c0       	rjmp	.+18     	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	case RISING_EGDE:
		MCUCR = (MCUCR & 0xFC) | (0x03); 					/* modify ISC01 && ISC00 only to 1,1 */
     d22:	a5 e5       	ldi	r26, 0x55	; 85
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e5 e5       	ldi	r30, 0x55	; 85
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	83 60       	ori	r24, 0x03	; 3
     d2e:	8c 93       	st	X, r24
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <INTERRUPT_EXTI0_setTrigger+0x96>
		break;

	default:
		error_status = E_NOT_OK;
     d32:	19 82       	std	Y+1, r1	; 0x01
	}

	return error_status;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <INTERRUPT_EXTI1_setTrigger>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 *
 */
STD_ReturnType INTERRUPT_EXTI1_setTrigger(const interrupt_trigger_t trigger)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <INTERRUPT_EXTI1_setTrigger+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <INTERRUPT_EXTI1_setTrigger+0x8>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01

		/* check required trigger */
		switch(trigger)
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3c 83       	std	Y+4, r19	; 0x04
     d5e:	2b 83       	std	Y+3, r18	; 0x03
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	91 05       	cpc	r25, r1
     d68:	e9 f0       	breq	.+58     	; 0xda4 <INTERRUPT_EXTI1_setTrigger+0x60>
     d6a:	2b 81       	ldd	r18, Y+3	; 0x03
     d6c:	3c 81       	ldd	r19, Y+4	; 0x04
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	2c f4       	brge	.+10     	; 0xd7e <INTERRUPT_EXTI1_setTrigger+0x3a>
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	61 f0       	breq	.+24     	; 0xd94 <INTERRUPT_EXTI1_setTrigger+0x50>
     d7c:	2d c0       	rjmp	.+90     	; 0xdd8 <INTERRUPT_EXTI1_setTrigger+0x94>
     d7e:	2b 81       	ldd	r18, Y+3	; 0x03
     d80:	3c 81       	ldd	r19, Y+4	; 0x04
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	b9 f0       	breq	.+46     	; 0xdb6 <INTERRUPT_EXTI1_setTrigger+0x72>
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	d9 f0       	breq	.+54     	; 0xdc8 <INTERRUPT_EXTI1_setTrigger+0x84>
     d92:	22 c0       	rjmp	.+68     	; 0xdd8 <INTERRUPT_EXTI1_setTrigger+0x94>
		{
		case LOW_LEVEL:
			MCUCR = (MCUCR & 0xF3) | (0x00); 					/* modify ISC11 && ISC10 only to 0,0 */
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	83 7f       	andi	r24, 0xF3	; 243
     da0:	8c 93       	st	X, r24
     da2:	1b c0       	rjmp	.+54     	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		case ANY_LOGICAL_CHANGE:
			MCUCR = (MCUCR & 0xF3) | (0x04); 					/* modify ISC11 && ISC10 only to 0,1 */
     da4:	a5 e5       	ldi	r26, 0x55	; 85
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e5 e5       	ldi	r30, 0x55	; 85
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	83 7f       	andi	r24, 0xF3	; 243
     db0:	84 60       	ori	r24, 0x04	; 4
     db2:	8c 93       	st	X, r24
     db4:	12 c0       	rjmp	.+36     	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		case FALLING_EDGE:
			MCUCR = (MCUCR & 0xF3) | (0x08); 					/* modify ISC11 && ISC10 only to 1,0 */
     db6:	a5 e5       	ldi	r26, 0x55	; 85
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e5 e5       	ldi	r30, 0x55	; 85
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	83 7f       	andi	r24, 0xF3	; 243
     dc2:	88 60       	ori	r24, 0x08	; 8
     dc4:	8c 93       	st	X, r24
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		case RISING_EGDE:
			MCUCR = (MCUCR & 0xF3) | (0x0C); 					/* modify ISC11 && ISC10 only to 1,1 */
     dc8:	a5 e5       	ldi	r26, 0x55	; 85
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e5       	ldi	r30, 0x55	; 85
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8c 60       	ori	r24, 0x0C	; 12
     dd4:	8c 93       	st	X, r24
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <INTERRUPT_EXTI1_setTrigger+0x96>
			break;

		default:
			error_status = E_NOT_OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
		}

		return error_status;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <INTERRUPT_EXTI2_setTrigger>:
 *
 */


STD_ReturnType INTERRUPT_EXTI2_setTrigger(const interrupt_trigger_t trigger)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <INTERRUPT_EXTI2_setTrigger+0x6>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <INTERRUPT_EXTI2_setTrigger+0x8>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01

		/* check required trigger */
		switch(trigger)
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3c 83       	std	Y+4, r19	; 0x04
     e04:	2b 83       	std	Y+3, r18	; 0x03
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	91 05       	cpc	r25, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <INTERRUPT_EXTI2_setTrigger+0x32>
     e10:	2b 81       	ldd	r18, Y+3	; 0x03
     e12:	3c 81       	ldd	r19, Y+4	; 0x04
     e14:	23 30       	cpi	r18, 0x03	; 3
     e16:	31 05       	cpc	r19, r1
     e18:	49 f0       	breq	.+18     	; 0xe2c <INTERRUPT_EXTI2_setTrigger+0x42>
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <INTERRUPT_EXTI2_setTrigger+0x52>
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR, ISC2);
     e1c:	a4 e5       	ldi	r26, 0x54	; 84
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e4 e5       	ldi	r30, 0x54	; 84
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 7b       	andi	r24, 0xBF	; 191
     e28:	8c 93       	st	X, r24
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <INTERRUPT_EXTI2_setTrigger+0x54>
			break;

		case RISING_EGDE:
			SET_BIT(MCUCSR, ISC2);
     e2c:	a4 e5       	ldi	r26, 0x54	; 84
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e5       	ldi	r30, 0x54	; 84
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	80 64       	ori	r24, 0x40	; 64
     e38:	8c 93       	st	X, r24
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <INTERRUPT_EXTI2_setTrigger+0x54>
			break;

		default:
			error_status = E_NOT_OK;
     e3c:	19 82       	std	Y+1, r1	; 0x01
		}

		return error_status;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <INTERRUPT_EXTI0_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT0_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI0_setCallback(void (* pf_ISR) (void)){
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <INTERRUPT_EXTI0_setCallback+0x6>
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	9b 83       	std	Y+3, r25	; 0x03
     e5c:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	11 f4       	brne	.+4      	; 0xe6e <INTERRUPT_EXTI0_setCallback+0x20>
	{
		error_status = E_NOT_OK;
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <INTERRUPT_EXTI0_setCallback+0x2c>
	}
	else
	{
		pf_EXTI0_callback = pf_ISR;
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	90 93 9f 00 	sts	0x009F, r25
     e76:	80 93 9e 00 	sts	0x009E, r24
	}
	return error_status;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <INTERRUPT_EXTI1_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT1_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI1_setCallback(void (* pf_ISR) (void)){
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <INTERRUPT_EXTI1_setCallback+0x6>
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	9b 83       	std	Y+3, r25	; 0x03
     e96:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	11 f4       	brne	.+4      	; 0xea8 <INTERRUPT_EXTI1_setCallback+0x20>
	{
		error_status = E_NOT_OK;
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <INTERRUPT_EXTI1_setCallback+0x2c>
	}
	else
	{
		pf_EXTI1_callback = pf_ISR;
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	9b 81       	ldd	r25, Y+3	; 0x03
     eac:	90 93 a1 00 	sts	0x00A1, r25
     eb0:	80 93 a0 00 	sts	0x00A0, r24
	}
	return error_status;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <INTERRUPT_EXTI2_setCallback>:
 * @param pf_ISR: pointer to a function that represents ISR(INT2_vect)
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType INTERRUPT_EXTI2_setCallback(void (* pf_ISR) (void)){
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <INTERRUPT_EXTI2_setCallback+0x6>
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9b 83       	std	Y+3, r25	; 0x03
     ed0:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01


	if(NULL == pf_ISR)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	11 f4       	brne	.+4      	; 0xee2 <INTERRUPT_EXTI2_setCallback+0x20>
	{
		error_status = E_NOT_OK;
     ede:	19 82       	std	Y+1, r1	; 0x01
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <INTERRUPT_EXTI2_setCallback+0x2c>
	}
	else
	{
		pf_EXTI2_callback = pf_ISR;
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	90 93 a3 00 	sts	0x00A3, r25
     eea:	80 93 a2 00 	sts	0x00A2, r24
	}
	return error_status;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <__vector_1>:

void INT0_vect(void)
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	pf_EXTI0_callback();
     f26:	e0 91 9e 00 	lds	r30, 0x009E
     f2a:	f0 91 9f 00 	lds	r31, 0x009F
     f2e:	09 95       	icall
}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <__vector_2>:
void INT1_vect(void)
{
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	pf_EXTI1_callback();
     f80:	e0 91 a0 00 	lds	r30, 0x00A0
     f84:	f0 91 a1 00 	lds	r31, 0x00A1
     f88:	09 95       	icall
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <__vector_3>:
void INT2_vect(void)
{
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	pf_EXTI2_callback();
     fda:	e0 91 a2 00 	lds	r30, 0x00A2
     fde:	f0 91 a3 00 	lds	r31, 0x00A3
     fe2:	09 95       	icall
}
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <GPIO_pinInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinInit(const pin_obj_t * pin_obj)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	27 97       	sbiw	r28, 0x07	; 7
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	9b 83       	std	Y+3, r25	; 0x03
    1020:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	11 f4       	brne	.+4      	; 0x1032 <GPIO_pinInit+0x28>
	{
		error_status = E_NOT_OK;
    102e:	19 82       	std	Y+1, r1	; 0x01
    1030:	ea c0       	rjmp	.+468    	; 0x1206 <GPIO_pinInit+0x1fc>
	}
	else
	{
		/* check the required pin direction */
		switch (pin_obj->direction)
    1032:	ea 81       	ldd	r30, Y+2	; 0x02
    1034:	fb 81       	ldd	r31, Y+3	; 0x03
    1036:	80 81       	ld	r24, Z
    1038:	82 95       	swap	r24
    103a:	86 95       	lsr	r24
    103c:	87 70       	andi	r24, 0x07	; 7
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3f 83       	std	Y+7, r19	; 0x07
    1046:	2e 83       	std	Y+6, r18	; 0x06
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	9f 81       	ldd	r25, Y+7	; 0x07
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	31 f0       	breq	.+12     	; 0x105c <GPIO_pinInit+0x52>
    1050:	2e 81       	ldd	r18, Y+6	; 0x06
    1052:	3f 81       	ldd	r19, Y+7	; 0x07
    1054:	21 30       	cpi	r18, 0x01	; 1
    1056:	31 05       	cpc	r19, r1
    1058:	91 f1       	breq	.+100    	; 0x10be <GPIO_pinInit+0xb4>
    105a:	5f c0       	rjmp	.+190    	; 0x111a <GPIO_pinInit+0x110>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    105c:	ea 81       	ldd	r30, Y+2	; 0x02
    105e:	fb 81       	ldd	r31, Y+3	; 0x03
    1060:	80 81       	ld	r24, Z
    1062:	83 70       	andi	r24, 0x03	; 3
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	fc 01       	movw	r30, r24
    106e:	e5 59       	subi	r30, 0x95	; 149
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	a0 81       	ld	r26, Z
    1074:	b1 81       	ldd	r27, Z+1	; 0x01
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	80 81       	ld	r24, Z
    107c:	83 70       	andi	r24, 0x03	; 3
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	fc 01       	movw	r30, r24
    1088:	e5 59       	subi	r30, 0x95	; 149
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	01 90       	ld	r0, Z+
    108e:	f0 81       	ld	r31, Z
    1090:	e0 2d       	mov	r30, r0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	ea 81       	ldd	r30, Y+2	; 0x02
    1098:	fb 81       	ldd	r31, Y+3	; 0x03
    109a:	80 81       	ld	r24, Z
    109c:	86 95       	lsr	r24
    109e:	86 95       	lsr	r24
    10a0:	87 70       	andi	r24, 0x07	; 7
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <GPIO_pinInit+0xa8>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <GPIO_pinInit+0xa4>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	2e c0       	rjmp	.+92     	; 0x111a <GPIO_pinInit+0x110>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    10be:	ea 81       	ldd	r30, Y+2	; 0x02
    10c0:	fb 81       	ldd	r31, Y+3	; 0x03
    10c2:	80 81       	ld	r24, Z
    10c4:	83 70       	andi	r24, 0x03	; 3
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	fc 01       	movw	r30, r24
    10d0:	e5 59       	subi	r30, 0x95	; 149
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	a0 81       	ld	r26, Z
    10d6:	b1 81       	ldd	r27, Z+1	; 0x01
    10d8:	ea 81       	ldd	r30, Y+2	; 0x02
    10da:	fb 81       	ldd	r31, Y+3	; 0x03
    10dc:	80 81       	ld	r24, Z
    10de:	83 70       	andi	r24, 0x03	; 3
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	fc 01       	movw	r30, r24
    10ea:	e5 59       	subi	r30, 0x95	; 149
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	01 90       	ld	r0, Z+
    10f0:	f0 81       	ld	r31, Z
    10f2:	e0 2d       	mov	r30, r0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	ea 81       	ldd	r30, Y+2	; 0x02
    10fa:	fb 81       	ldd	r31, Y+3	; 0x03
    10fc:	80 81       	ld	r24, Z
    10fe:	86 95       	lsr	r24
    1100:	86 95       	lsr	r24
    1102:	87 70       	andi	r24, 0x07	; 7
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <GPIO_pinInit+0x108>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	2a 95       	dec	r18
    1114:	e2 f7       	brpl	.-8      	; 0x110e <GPIO_pinInit+0x104>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}

		/* check the required pin logic */
		switch(pin_obj->logic)
    111a:	ea 81       	ldd	r30, Y+2	; 0x02
    111c:	fb 81       	ldd	r31, Y+3	; 0x03
    111e:	80 81       	ld	r24, Z
    1120:	82 95       	swap	r24
    1122:	86 95       	lsr	r24
    1124:	86 95       	lsr	r24
    1126:	83 70       	andi	r24, 0x03	; 3
    1128:	81 70       	andi	r24, 0x01	; 1
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3d 83       	std	Y+5, r19	; 0x05
    1130:	2c 83       	std	Y+4, r18	; 0x04
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	31 f0       	breq	.+12     	; 0x1146 <GPIO_pinInit+0x13c>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	21 30       	cpi	r18, 0x01	; 1
    1140:	31 05       	cpc	r19, r1
    1142:	91 f1       	breq	.+100    	; 0x11a8 <GPIO_pinInit+0x19e>
    1144:	60 c0       	rjmp	.+192    	; 0x1206 <GPIO_pinInit+0x1fc>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1146:	ea 81       	ldd	r30, Y+2	; 0x02
    1148:	fb 81       	ldd	r31, Y+3	; 0x03
    114a:	80 81       	ld	r24, Z
    114c:	83 70       	andi	r24, 0x03	; 3
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	fc 01       	movw	r30, r24
    1158:	ed 58       	subi	r30, 0x8D	; 141
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	a0 81       	ld	r26, Z
    115e:	b1 81       	ldd	r27, Z+1	; 0x01
    1160:	ea 81       	ldd	r30, Y+2	; 0x02
    1162:	fb 81       	ldd	r31, Y+3	; 0x03
    1164:	80 81       	ld	r24, Z
    1166:	83 70       	andi	r24, 0x03	; 3
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	fc 01       	movw	r30, r24
    1172:	ed 58       	subi	r30, 0x8D	; 141
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	01 90       	ld	r0, Z+
    1178:	f0 81       	ld	r31, Z
    117a:	e0 2d       	mov	r30, r0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	ea 81       	ldd	r30, Y+2	; 0x02
    1182:	fb 81       	ldd	r31, Y+3	; 0x03
    1184:	80 81       	ld	r24, Z
    1186:	86 95       	lsr	r24
    1188:	86 95       	lsr	r24
    118a:	87 70       	andi	r24, 0x07	; 7
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <GPIO_pinInit+0x192>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <GPIO_pinInit+0x18e>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	2f c0       	rjmp	.+94     	; 0x1206 <GPIO_pinInit+0x1fc>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    11a8:	ea 81       	ldd	r30, Y+2	; 0x02
    11aa:	fb 81       	ldd	r31, Y+3	; 0x03
    11ac:	80 81       	ld	r24, Z
    11ae:	83 70       	andi	r24, 0x03	; 3
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	fc 01       	movw	r30, r24
    11ba:	ed 58       	subi	r30, 0x8D	; 141
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	a0 81       	ld	r26, Z
    11c0:	b1 81       	ldd	r27, Z+1	; 0x01
    11c2:	ea 81       	ldd	r30, Y+2	; 0x02
    11c4:	fb 81       	ldd	r31, Y+3	; 0x03
    11c6:	80 81       	ld	r24, Z
    11c8:	83 70       	andi	r24, 0x03	; 3
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	fc 01       	movw	r30, r24
    11d4:	ed 58       	subi	r30, 0x8D	; 141
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	01 90       	ld	r0, Z+
    11da:	f0 81       	ld	r31, Z
    11dc:	e0 2d       	mov	r30, r0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	ea 81       	ldd	r30, Y+2	; 0x02
    11e4:	fb 81       	ldd	r31, Y+3	; 0x03
    11e6:	80 81       	ld	r24, Z
    11e8:	86 95       	lsr	r24
    11ea:	86 95       	lsr	r24
    11ec:	87 70       	andi	r24, 0x07	; 7
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_pinInit+0x1f4>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_pinInit+0x1f0>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
			/* default:
					error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    1206:	89 81       	ldd	r24, Y+1	; 0x01

}
    1208:	27 96       	adiw	r28, 0x07	; 7
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <GPIO_pinDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinDirectionInit(const pin_obj_t * pin_obj, GPIO_direction_t direction)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <GPIO_pinDirectionInit+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_pinDirectionInit+0x8>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_pinDirectionInit+0xa>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	9b 83       	std	Y+3, r25	; 0x03
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;					/* to store the error value to be returned */
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	11 f4       	brne	.+4      	; 0x123e <GPIO_pinDirectionInit+0x24>
	{
		error_status = E_NOT_OK;
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	6f c0       	rjmp	.+222    	; 0x131c <GPIO_pinDirectionInit+0x102>
	}
	else
	{
		/* check the required pin direction */
		switch (direction)
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3e 83       	std	Y+6, r19	; 0x06
    1246:	2d 83       	std	Y+5, r18	; 0x05
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	31 f0       	breq	.+12     	; 0x125c <GPIO_pinDirectionInit+0x42>
    1250:	2d 81       	ldd	r18, Y+5	; 0x05
    1252:	3e 81       	ldd	r19, Y+6	; 0x06
    1254:	21 30       	cpi	r18, 0x01	; 1
    1256:	31 05       	cpc	r19, r1
    1258:	91 f1       	breq	.+100    	; 0x12be <GPIO_pinDirectionInit+0xa4>
    125a:	60 c0       	rjmp	.+192    	; 0x131c <GPIO_pinDirectionInit+0x102>
		{
		case GPIO_INPUT:
			CLR_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    125c:	ea 81       	ldd	r30, Y+2	; 0x02
    125e:	fb 81       	ldd	r31, Y+3	; 0x03
    1260:	80 81       	ld	r24, Z
    1262:	83 70       	andi	r24, 0x03	; 3
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	fc 01       	movw	r30, r24
    126e:	e5 59       	subi	r30, 0x95	; 149
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	a0 81       	ld	r26, Z
    1274:	b1 81       	ldd	r27, Z+1	; 0x01
    1276:	ea 81       	ldd	r30, Y+2	; 0x02
    1278:	fb 81       	ldd	r31, Y+3	; 0x03
    127a:	80 81       	ld	r24, Z
    127c:	83 70       	andi	r24, 0x03	; 3
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	fc 01       	movw	r30, r24
    1288:	e5 59       	subi	r30, 0x95	; 149
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	01 90       	ld	r0, Z+
    128e:	f0 81       	ld	r31, Z
    1290:	e0 2d       	mov	r30, r0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	ea 81       	ldd	r30, Y+2	; 0x02
    1298:	fb 81       	ldd	r31, Y+3	; 0x03
    129a:	80 81       	ld	r24, Z
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	87 70       	andi	r24, 0x07	; 7
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <GPIO_pinDirectionInit+0x98>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <GPIO_pinDirectionInit+0x94>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	2f c0       	rjmp	.+94     	; 0x131c <GPIO_pinDirectionInit+0x102>
			break;

		case GPIO_OUTPUT:
			SET_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    12be:	ea 81       	ldd	r30, Y+2	; 0x02
    12c0:	fb 81       	ldd	r31, Y+3	; 0x03
    12c2:	80 81       	ld	r24, Z
    12c4:	83 70       	andi	r24, 0x03	; 3
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	fc 01       	movw	r30, r24
    12d0:	e5 59       	subi	r30, 0x95	; 149
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	a0 81       	ld	r26, Z
    12d6:	b1 81       	ldd	r27, Z+1	; 0x01
    12d8:	ea 81       	ldd	r30, Y+2	; 0x02
    12da:	fb 81       	ldd	r31, Y+3	; 0x03
    12dc:	80 81       	ld	r24, Z
    12de:	83 70       	andi	r24, 0x03	; 3
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	fc 01       	movw	r30, r24
    12ea:	e5 59       	subi	r30, 0x95	; 149
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	01 90       	ld	r0, Z+
    12f0:	f0 81       	ld	r31, Z
    12f2:	e0 2d       	mov	r30, r0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	ea 81       	ldd	r30, Y+2	; 0x02
    12fa:	fb 81       	ldd	r31, Y+3	; 0x03
    12fc:	80 81       	ld	r24, Z
    12fe:	86 95       	lsr	r24
    1300:	86 95       	lsr	r24
    1302:	87 70       	andi	r24, 0x07	; 7
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <GPIO_pinDirectionInit+0xfa>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <GPIO_pinDirectionInit+0xf6>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
			 * so, there is no need for default case in here */
			/* default:
					error_status = E_NOT_OK;*/
		}
	}
	return error_status;
    131c:	89 81       	ldd	r24, Y+1	; 0x01
}
    131e:	26 96       	adiw	r28, 0x06	; 6
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <GPIO_pinGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinGetDirection(const pin_obj_t * pin_obj, GPIO_direction_t * direction)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_pinGetDirection+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <GPIO_pinGetDirection+0x8>
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	9b 83       	std	Y+3, r25	; 0x03
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	7d 83       	std	Y+5, r23	; 0x05
    1344:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	11 f4       	brne	.+4      	; 0x1356 <GPIO_pinGetDirection+0x26>
	{
		error_status = E_NOT_OK;
    1352:	19 82       	std	Y+1, r1	; 0x01
    1354:	24 c0       	rjmp	.+72     	; 0x139e <GPIO_pinGetDirection+0x6e>
	}
	else
	{
		/* update the passed argument with the current pin state */
		*direction = READ_BIT(*(DDR_registers[pin_obj->port_id]), pin_obj->pin_id);
    1356:	ea 81       	ldd	r30, Y+2	; 0x02
    1358:	fb 81       	ldd	r31, Y+3	; 0x03
    135a:	80 81       	ld	r24, Z
    135c:	83 70       	andi	r24, 0x03	; 3
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	fc 01       	movw	r30, r24
    1368:	e5 59       	subi	r30, 0x95	; 149
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	01 90       	ld	r0, Z+
    136e:	f0 81       	ld	r31, Z
    1370:	e0 2d       	mov	r30, r0
    1372:	80 81       	ld	r24, Z
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	ea 81       	ldd	r30, Y+2	; 0x02
    137a:	fb 81       	ldd	r31, Y+3	; 0x03
    137c:	80 81       	ld	r24, Z
    137e:	86 95       	lsr	r24
    1380:	86 95       	lsr	r24
    1382:	87 70       	andi	r24, 0x07	; 7
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a9 01       	movw	r20, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_pinGetDirection+0x60>
    138c:	55 95       	asr	r21
    138e:	47 95       	ror	r20
    1390:	8a 95       	dec	r24
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_pinGetDirection+0x5c>
    1394:	ca 01       	movw	r24, r20
    1396:	81 70       	andi	r24, 0x01	; 1
    1398:	ec 81       	ldd	r30, Y+4	; 0x04
    139a:	fd 81       	ldd	r31, Y+5	; 0x05
    139c:	80 83       	st	Z, r24
	}

	return error_status;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <GPIO_pinWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinWrite(const pin_obj_t * pin_obj, GPIO_logic_t logic)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <GPIO_pinWrite+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_pinWrite+0x8>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <GPIO_pinWrite+0xa>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	9b 83       	std	Y+3, r25	; 0x03
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <GPIO_pinWrite+0x24>
	{
		error_status = E_NOT_OK;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	6f c0       	rjmp	.+222    	; 0x14b2 <GPIO_pinWrite+0x102>
	}
	else
	{
		/* check the required pin logic */
		switch(logic)
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3e 83       	std	Y+6, r19	; 0x06
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	31 f0       	breq	.+12     	; 0x13f2 <GPIO_pinWrite+0x42>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ea:	21 30       	cpi	r18, 0x01	; 1
    13ec:	31 05       	cpc	r19, r1
    13ee:	91 f1       	breq	.+100    	; 0x1454 <GPIO_pinWrite+0xa4>
    13f0:	60 c0       	rjmp	.+192    	; 0x14b2 <GPIO_pinWrite+0x102>
		{
		case GPIO_LOW:
			CLR_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    13f2:	ea 81       	ldd	r30, Y+2	; 0x02
    13f4:	fb 81       	ldd	r31, Y+3	; 0x03
    13f6:	80 81       	ld	r24, Z
    13f8:	83 70       	andi	r24, 0x03	; 3
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	fc 01       	movw	r30, r24
    1404:	ed 58       	subi	r30, 0x8D	; 141
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	a0 81       	ld	r26, Z
    140a:	b1 81       	ldd	r27, Z+1	; 0x01
    140c:	ea 81       	ldd	r30, Y+2	; 0x02
    140e:	fb 81       	ldd	r31, Y+3	; 0x03
    1410:	80 81       	ld	r24, Z
    1412:	83 70       	andi	r24, 0x03	; 3
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	fc 01       	movw	r30, r24
    141e:	ed 58       	subi	r30, 0x8D	; 141
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	01 90       	ld	r0, Z+
    1424:	f0 81       	ld	r31, Z
    1426:	e0 2d       	mov	r30, r0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	ea 81       	ldd	r30, Y+2	; 0x02
    142e:	fb 81       	ldd	r31, Y+3	; 0x03
    1430:	80 81       	ld	r24, Z
    1432:	86 95       	lsr	r24
    1434:	86 95       	lsr	r24
    1436:	87 70       	andi	r24, 0x07	; 7
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_pinWrite+0x98>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_pinWrite+0x94>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	2f c0       	rjmp	.+94     	; 0x14b2 <GPIO_pinWrite+0x102>
			break;

		case GPIO_HIGH:
			SET_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1454:	ea 81       	ldd	r30, Y+2	; 0x02
    1456:	fb 81       	ldd	r31, Y+3	; 0x03
    1458:	80 81       	ld	r24, Z
    145a:	83 70       	andi	r24, 0x03	; 3
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	fc 01       	movw	r30, r24
    1466:	ed 58       	subi	r30, 0x8D	; 141
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	a0 81       	ld	r26, Z
    146c:	b1 81       	ldd	r27, Z+1	; 0x01
    146e:	ea 81       	ldd	r30, Y+2	; 0x02
    1470:	fb 81       	ldd	r31, Y+3	; 0x03
    1472:	80 81       	ld	r24, Z
    1474:	83 70       	andi	r24, 0x03	; 3
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	fc 01       	movw	r30, r24
    1480:	ed 58       	subi	r30, 0x8D	; 141
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	01 90       	ld	r0, Z+
    1486:	f0 81       	ld	r31, Z
    1488:	e0 2d       	mov	r30, r0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	ea 81       	ldd	r30, Y+2	; 0x02
    1490:	fb 81       	ldd	r31, Y+3	; 0x03
    1492:	80 81       	ld	r24, Z
    1494:	86 95       	lsr	r24
    1496:	86 95       	lsr	r24
    1498:	87 70       	andi	r24, 0x07	; 7
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_pinWrite+0xfa>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_pinWrite+0xf6>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
			/* default:
						error_status = E_NOT_OK;*/
		}
	}

	return error_status;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b4:	26 96       	adiw	r28, 0x06	; 6
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <GPIO_pinRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinRead(const pin_obj_t * pin_obj, GPIO_logic_t * logic)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <GPIO_pinRead+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <GPIO_pinRead+0x8>
    14ce:	0f 92       	push	r0
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9b 83       	std	Y+3, r25	; 0x03
    14d6:	8a 83       	std	Y+2, r24	; 0x02
    14d8:	7d 83       	std	Y+5, r23	; 0x05
    14da:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	11 f4       	brne	.+4      	; 0x14ec <GPIO_pinRead+0x26>
	{
		error_status = E_NOT_OK;
    14e8:	19 82       	std	Y+1, r1	; 0x01
    14ea:	24 c0       	rjmp	.+72     	; 0x1534 <GPIO_pinRead+0x6e>
	}
	else
	{
		*logic = READ_BIT(*(PIN_registers[pin_obj->port_id]), pin_obj->pin_id);
    14ec:	ea 81       	ldd	r30, Y+2	; 0x02
    14ee:	fb 81       	ldd	r31, Y+3	; 0x03
    14f0:	80 81       	ld	r24, Z
    14f2:	83 70       	andi	r24, 0x03	; 3
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	fc 01       	movw	r30, r24
    14fe:	e5 58       	subi	r30, 0x85	; 133
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	01 90       	ld	r0, Z+
    1504:	f0 81       	ld	r31, Z
    1506:	e0 2d       	mov	r30, r0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	ea 81       	ldd	r30, Y+2	; 0x02
    1510:	fb 81       	ldd	r31, Y+3	; 0x03
    1512:	80 81       	ld	r24, Z
    1514:	86 95       	lsr	r24
    1516:	86 95       	lsr	r24
    1518:	87 70       	andi	r24, 0x07	; 7
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <GPIO_pinRead+0x60>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <GPIO_pinRead+0x5c>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	ec 81       	ldd	r30, Y+4	; 0x04
    1530:	fd 81       	ldd	r31, Y+5	; 0x05
    1532:	80 83       	st	Z, r24
	}

	return error_status;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <GPIO_pinToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_pinToggle(const pin_obj_t * pin_obj)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <GPIO_pinToggle+0x6>
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	9b 83       	std	Y+3, r25	; 0x03
    1554:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	89 83       	std	Y+1, r24	; 0x01
	/* pin_obj_t is a 1 byte structure, port_id is 2 bits in size, and pin_id is 3 bits
	 * can't check the if pin or port numbers are valid, since their values will be
	 * truncated to their relative bit sizes.
	 * user will get a warning message if an implicit truncation happens
	 */
	if(NULL == pin_obj)
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	11 f4       	brne	.+4      	; 0x1566 <GPIO_pinToggle+0x20>
	{
		error_status = E_NOT_OK;
    1562:	19 82       	std	Y+1, r1	; 0x01
    1564:	2f c0       	rjmp	.+94     	; 0x15c4 <GPIO_pinToggle+0x7e>
	}
	else
	{
		TOGGLE_BIT(*(PORT_registers[pin_obj->port_id]), pin_obj->pin_id);
    1566:	ea 81       	ldd	r30, Y+2	; 0x02
    1568:	fb 81       	ldd	r31, Y+3	; 0x03
    156a:	80 81       	ld	r24, Z
    156c:	83 70       	andi	r24, 0x03	; 3
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	fc 01       	movw	r30, r24
    1578:	ed 58       	subi	r30, 0x8D	; 141
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	a0 81       	ld	r26, Z
    157e:	b1 81       	ldd	r27, Z+1	; 0x01
    1580:	ea 81       	ldd	r30, Y+2	; 0x02
    1582:	fb 81       	ldd	r31, Y+3	; 0x03
    1584:	80 81       	ld	r24, Z
    1586:	83 70       	andi	r24, 0x03	; 3
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	fc 01       	movw	r30, r24
    1592:	ed 58       	subi	r30, 0x8D	; 141
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	01 90       	ld	r0, Z+
    1598:	f0 81       	ld	r31, Z
    159a:	e0 2d       	mov	r30, r0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	ea 81       	ldd	r30, Y+2	; 0x02
    15a2:	fb 81       	ldd	r31, Y+3	; 0x03
    15a4:	80 81       	ld	r24, Z
    15a6:	86 95       	lsr	r24
    15a8:	86 95       	lsr	r24
    15aa:	87 70       	andi	r24, 0x07	; 7
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_pinToggle+0x76>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_pinToggle+0x72>
    15c0:	84 27       	eor	r24, r20
    15c2:	8c 93       	st	X, r24
	}

	return error_status;
    15c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <GPIO_portDirectionInit>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portDirectionInit(const port_id_t port, uint8 direction)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <GPIO_portDirectionInit+0x6>
    15d8:	0f 92       	push	r0
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	10 f0       	brcs	.+4      	; 0x15f0 <GPIO_portDirectionInit+0x1e>
	{
		error_status = E_NOT_OK;
    15ec:	19 82       	std	Y+1, r1	; 0x01
    15ee:	0d c0       	rjmp	.+26     	; 0x160a <GPIO_portDirectionInit+0x38>
	}
	else
	{
		*(DDR_registers[port]) = direction;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	fc 01       	movw	r30, r24
    15fc:	e5 59       	subi	r30, 0x95	; 149
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	01 90       	ld	r0, Z+
    1602:	f0 81       	ld	r31, Z
    1604:	e0 2d       	mov	r30, r0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	80 83       	st	Z, r24
	}
	return error_status;
    160a:	89 81       	ldd	r24, Y+1	; 0x01
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <GPIO_portGetDirection>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portGetDirection(const port_id_t port, uint8 * direction)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <GPIO_portGetDirection+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <GPIO_portGetDirection+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	8a 83       	std	Y+2, r24	; 0x02
    1626:	7c 83       	std	Y+4, r23	; 0x04
    1628:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	84 30       	cpi	r24, 0x04	; 4
    1632:	10 f0       	brcs	.+4      	; 0x1638 <GPIO_portGetDirection+0x20>
	{
		error_status = E_NOT_OK;
    1634:	19 82       	std	Y+1, r1	; 0x01
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <GPIO_portGetDirection+0x3e>
	}
	else
	{
		*direction = *(DDR_registers[port]);
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	fc 01       	movw	r30, r24
    1644:	e5 59       	subi	r30, 0x95	; 149
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	01 90       	ld	r0, Z+
    164a:	f0 81       	ld	r31, Z
    164c:	e0 2d       	mov	r30, r0
    164e:	80 81       	ld	r24, Z
    1650:	eb 81       	ldd	r30, Y+3	; 0x03
    1652:	fc 81       	ldd	r31, Y+4	; 0x04
    1654:	80 83       	st	Z, r24
	}
	return error_status;
    1656:	89 81       	ldd	r24, Y+1	; 0x01

}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <GPIO_portWrite>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portWrite(const port_id_t port, uint8 logic)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_portWrite+0x6>
    166c:	0f 92       	push	r0
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
	/* check if port id is valid */

	if (port > PORT_MAX_NUMBER-1)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	10 f0       	brcs	.+4      	; 0x1684 <GPIO_portWrite+0x1e>
	{
		error_status = E_NOT_OK;
    1680:	19 82       	std	Y+1, r1	; 0x01
    1682:	0d c0       	rjmp	.+26     	; 0x169e <GPIO_portWrite+0x38>
	}
	else
	{
		*(PORT_registers[port]) = logic;
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	88 2f       	mov	r24, r24
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	fc 01       	movw	r30, r24
    1690:	ed 58       	subi	r30, 0x8D	; 141
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	01 90       	ld	r0, Z+
    1696:	f0 81       	ld	r31, Z
    1698:	e0 2d       	mov	r30, r0
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	80 83       	st	Z, r24
	}
	return error_status;
    169e:	89 81       	ldd	r24, Y+1	; 0x01

}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <GPIO_portRead>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portRead(const port_id_t port, uint8 * logic)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <GPIO_portRead+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <GPIO_portRead+0x8>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	8a 83       	std	Y+2, r24	; 0x02
    16ba:	7c 83       	std	Y+4, r23	; 0x04
    16bc:	6b 83       	std	Y+3, r22	; 0x03
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	84 30       	cpi	r24, 0x04	; 4
    16c6:	10 f0       	brcs	.+4      	; 0x16cc <GPIO_portRead+0x20>
	{
		error_status = E_NOT_OK;
    16c8:	19 82       	std	Y+1, r1	; 0x01
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <GPIO_portRead+0x3e>
	}
	else
	{
		*logic = *(PORT_registers[port]);
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	fc 01       	movw	r30, r24
    16d8:	ed 58       	subi	r30, 0x8D	; 141
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	01 90       	ld	r0, Z+
    16de:	f0 81       	ld	r31, Z
    16e0:	e0 2d       	mov	r30, r0
    16e2:	80 81       	ld	r24, Z
    16e4:	eb 81       	ldd	r30, Y+3	; 0x03
    16e6:	fc 81       	ldd	r31, Y+4	; 0x04
    16e8:	80 83       	st	Z, r24
	}
	return error_status;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <GPIO_portToggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType GPIO_portToggle(const port_id_t port)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <GPIO_portToggle+0x6>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;						/* to store the error value to be returned */
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	89 83       	std	Y+1, r24	; 0x01

	/* check if port id is valid */
	if (port > PORT_MAX_NUMBER-1)
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	10 f0       	brcs	.+4      	; 0x1714 <GPIO_portToggle+0x1a>
	{
		error_status = E_NOT_OK;
    1710:	19 82       	std	Y+1, r1	; 0x01
    1712:	18 c0       	rjmp	.+48     	; 0x1744 <GPIO_portToggle+0x4a>
	}

	else
	{
		/*toggle all port pins*/
		*(PORT_registers[port]) ^= 0xFF;
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	fc 01       	movw	r30, r24
    1720:	ed 58       	subi	r30, 0x8D	; 141
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	a0 81       	ld	r26, Z
    1726:	b1 81       	ldd	r27, Z+1	; 0x01
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	fc 01       	movw	r30, r24
    1734:	ed 58       	subi	r30, 0x8D	; 141
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	01 90       	ld	r0, Z+
    173a:	f0 81       	ld	r31, Z
    173c:	e0 2d       	mov	r30, r0
    173e:	80 81       	ld	r24, Z
    1740:	80 95       	com	r24
    1742:	8c 93       	st	X, r24
	}
	return error_status;
    1744:	89 81       	ldd	r24, Y+1	; 0x01

}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <SEVEN_SEG_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType SEVEN_SEG_init(const seven_seg_t *seven_seg)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <SEVEN_SEG_init+0x6>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <SEVEN_SEG_init+0x8>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;				/* to store the error value to be returned */
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == seven_seg)							/* check for null pointer */
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	11 f4       	brne	.+4      	; 0x1770 <SEVEN_SEG_init+0x20>
	{
		error_status = E_NOT_OK;
    176c:	1a 82       	std	Y+2, r1	; 0x02
    176e:	13 c0       	rjmp	.+38     	; 0x1796 <SEVEN_SEG_init+0x46>
	}
	else
	{
		uint8 counter;
		/*	Initialize all decoder pins as output */
		for (counter = 0; counter < NO_SEGMENT_PINS; counter++)
    1770:	19 82       	std	Y+1, r1	; 0x01
    1772:	0e c0       	rjmp	.+28     	; 0x1790 <SEVEN_SEG_init+0x40>
		{
			error_status = GPIO_pinDirectionInit(&(seven_seg->segment_pins[counter]), GPIO_OUTPUT);
    1774:	2b 81       	ldd	r18, Y+3	; 0x03
    1776:	3c 81       	ldd	r19, Y+4	; 0x04
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	82 0f       	add	r24, r18
    1780:	93 1f       	adc	r25, r19
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    1788:	8a 83       	std	Y+2, r24	; 0x02
	}
	else
	{
		uint8 counter;
		/*	Initialize all decoder pins as output */
		for (counter = 0; counter < NO_SEGMENT_PINS; counter++)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	87 30       	cpi	r24, 0x07	; 7
    1794:	78 f3       	brcs	.-34     	; 0x1774 <SEVEN_SEG_init+0x24>
			error_status = GPIO_pinDirectionInit(&(seven_seg->segment_pins[counter]), GPIO_OUTPUT);
		}

	}

	return error_status;
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <SEVEN_SEG_write>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType SEVEN_SEG_write(const seven_seg_t *seven_seg, uint8 number)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	6b 97       	sbiw	r28, 0x1b	; 27
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	9b 83       	std	Y+3, r25	; 0x03
    17bc:	8a 83       	std	Y+2, r24	; 0x02
    17be:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;				/* to store the error value to be returned */
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == seven_seg || number > 9)				/* check for null pointer or invalid number */
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <SEVEN_SEG_write+0x2c>
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	8a 30       	cpi	r24, 0x0A	; 10
    17d0:	10 f0       	brcs	.+4      	; 0x17d6 <SEVEN_SEG_write+0x30>
	{
		error_status = E_NOT_OK;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	a6 c1       	rjmp	.+844    	; 0x1b22 <SEVEN_SEG_write+0x37c>
		error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), READ_BIT(number, 2));
		error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), READ_BIT(number, 3));

#else 					/* without decoder */
		/* 1. determine the type of the 7-segment */
		switch(seven_seg->segment_type)
    17d6:	ea 81       	ldd	r30, Y+2	; 0x02
    17d8:	fb 81       	ldd	r31, Y+3	; 0x03
    17da:	87 81       	ldd	r24, Z+7	; 0x07
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3b 8f       	std	Y+27, r19	; 0x1b
    17e2:	2a 8f       	std	Y+26, r18	; 0x1a
    17e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	39 f0       	breq	.+14     	; 0x17fa <SEVEN_SEG_write+0x54>
    17ec:	2a 8d       	ldd	r18, Y+26	; 0x1a
    17ee:	3b 8d       	ldd	r19, Y+27	; 0x1b
    17f0:	21 30       	cpi	r18, 0x01	; 1
    17f2:	31 05       	cpc	r19, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <SEVEN_SEG_write+0x52>
    17f6:	ed c0       	rjmp	.+474    	; 0x19d2 <SEVEN_SEG_write+0x22c>
    17f8:	93 c1       	rjmp	.+806    	; 0x1b20 <SEVEN_SEG_write+0x37a>
		case COMMON_ANODE:
			/* get the bit states required to print the number from the global SEVEN_SEG_INPUT array
			 * since the array is made to deal with common cathode configuration,
			 * then, reverse every bit state before writing it to the common anode 7-segment*/

			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[0]), !READ_BIT(SEVEN_SEG_INPUT[number], 0));
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	9b 81       	ldd	r25, Y+3	; 0x03
    17fe:	99 8f       	std	Y+25, r25	; 0x19
    1800:	88 8f       	std	Y+24, r24	; 0x18
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	fc 01       	movw	r30, r24
    180a:	ed 56       	subi	r30, 0x6D	; 109
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	81 70       	andi	r24, 0x01	; 1
    1816:	90 70       	andi	r25, 0x00	; 0
    1818:	1f 8a       	std	Y+23, r1	; 0x17
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	11 f4       	brne	.+4      	; 0x1822 <SEVEN_SEG_write+0x7c>
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	9f 8b       	std	Y+23, r25	; 0x17
    1822:	88 8d       	ldd	r24, Y+24	; 0x18
    1824:	99 8d       	ldd	r25, Y+25	; 0x19
    1826:	6f 89       	ldd	r22, Y+23	; 0x17
    1828:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    182c:	98 2f       	mov	r25, r24
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	89 23       	and	r24, r25
    1832:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[1]), !READ_BIT(SEVEN_SEG_INPUT[number], 1));
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	9c 01       	movw	r18, r24
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	3e 8b       	std	Y+22, r19	; 0x16
    1840:	2d 8b       	std	Y+21, r18	; 0x15
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	fc 01       	movw	r30, r24
    184a:	ed 56       	subi	r30, 0x6D	; 109
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	86 95       	lsr	r24
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	1c 8a       	std	Y+20, r1	; 0x14
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	11 f4       	brne	.+4      	; 0x1864 <SEVEN_SEG_write+0xbe>
    1860:	31 e0       	ldi	r19, 0x01	; 1
    1862:	3c 8b       	std	Y+20, r19	; 0x14
    1864:	8d 89       	ldd	r24, Y+21	; 0x15
    1866:	9e 89       	ldd	r25, Y+22	; 0x16
    1868:	6c 89       	ldd	r22, Y+20	; 0x14
    186a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    186e:	98 2f       	mov	r25, r24
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	89 23       	and	r24, r25
    1874:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), !READ_BIT(SEVEN_SEG_INPUT[number], 2));
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	9b 81       	ldd	r25, Y+3	; 0x03
    187a:	9c 01       	movw	r18, r24
    187c:	2e 5f       	subi	r18, 0xFE	; 254
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	3b 8b       	std	Y+19, r19	; 0x13
    1882:	2a 8b       	std	Y+18, r18	; 0x12
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	fc 01       	movw	r30, r24
    188c:	ed 56       	subi	r30, 0x6D	; 109
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	86 95       	lsr	r24
    1894:	86 95       	lsr	r24
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	81 70       	andi	r24, 0x01	; 1
    189c:	90 70       	andi	r25, 0x00	; 0
    189e:	19 8a       	std	Y+17, r1	; 0x11
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	11 f4       	brne	.+4      	; 0x18a8 <SEVEN_SEG_write+0x102>
    18a4:	31 e0       	ldi	r19, 0x01	; 1
    18a6:	39 8b       	std	Y+17, r19	; 0x11
    18a8:	8a 89       	ldd	r24, Y+18	; 0x12
    18aa:	9b 89       	ldd	r25, Y+19	; 0x13
    18ac:	69 89       	ldd	r22, Y+17	; 0x11
    18ae:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    18b2:	98 2f       	mov	r25, r24
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	89 23       	and	r24, r25
    18b8:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), !READ_BIT(SEVEN_SEG_INPUT[number], 3));
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	9c 01       	movw	r18, r24
    18c0:	2d 5f       	subi	r18, 0xFD	; 253
    18c2:	3f 4f       	sbci	r19, 0xFF	; 255
    18c4:	38 8b       	std	Y+16, r19	; 0x10
    18c6:	2f 87       	std	Y+15, r18	; 0x0f
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	fc 01       	movw	r30, r24
    18d0:	ed 56       	subi	r30, 0x6D	; 109
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 81       	ld	r24, Z
    18d6:	86 95       	lsr	r24
    18d8:	86 95       	lsr	r24
    18da:	86 95       	lsr	r24
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	81 70       	andi	r24, 0x01	; 1
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	1e 86       	std	Y+14, r1	; 0x0e
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	11 f4       	brne	.+4      	; 0x18ee <SEVEN_SEG_write+0x148>
    18ea:	31 e0       	ldi	r19, 0x01	; 1
    18ec:	3e 87       	std	Y+14, r19	; 0x0e
    18ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f0:	98 89       	ldd	r25, Y+16	; 0x10
    18f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    18f4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    18f8:	98 2f       	mov	r25, r24
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	89 23       	and	r24, r25
    18fe:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[4]), !READ_BIT(SEVEN_SEG_INPUT[number], 4));
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	9b 81       	ldd	r25, Y+3	; 0x03
    1904:	9c 01       	movw	r18, r24
    1906:	2c 5f       	subi	r18, 0xFC	; 252
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	3d 87       	std	Y+13, r19	; 0x0d
    190c:	2c 87       	std	Y+12, r18	; 0x0c
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	ed 56       	subi	r30, 0x6D	; 109
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	82 95       	swap	r24
    191e:	8f 70       	andi	r24, 0x0F	; 15
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	81 70       	andi	r24, 0x01	; 1
    1926:	90 70       	andi	r25, 0x00	; 0
    1928:	1b 86       	std	Y+11, r1	; 0x0b
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	11 f4       	brne	.+4      	; 0x1932 <SEVEN_SEG_write+0x18c>
    192e:	31 e0       	ldi	r19, 0x01	; 1
    1930:	3b 87       	std	Y+11, r19	; 0x0b
    1932:	8c 85       	ldd	r24, Y+12	; 0x0c
    1934:	9d 85       	ldd	r25, Y+13	; 0x0d
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    193c:	98 2f       	mov	r25, r24
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	89 23       	and	r24, r25
    1942:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[5]), !READ_BIT(SEVEN_SEG_INPUT[number], 5));
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	9b 81       	ldd	r25, Y+3	; 0x03
    1948:	9c 01       	movw	r18, r24
    194a:	2b 5f       	subi	r18, 0xFB	; 251
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	3a 87       	std	Y+10, r19	; 0x0a
    1950:	29 87       	std	Y+9, r18	; 0x09
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	ed 56       	subi	r30, 0x6D	; 109
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	82 95       	swap	r24
    1962:	86 95       	lsr	r24
    1964:	87 70       	andi	r24, 0x07	; 7
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	81 70       	andi	r24, 0x01	; 1
    196c:	90 70       	andi	r25, 0x00	; 0
    196e:	18 86       	std	Y+8, r1	; 0x08
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	11 f4       	brne	.+4      	; 0x1978 <SEVEN_SEG_write+0x1d2>
    1974:	31 e0       	ldi	r19, 0x01	; 1
    1976:	38 87       	std	Y+8, r19	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	68 85       	ldd	r22, Y+8	; 0x08
    197e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1982:	98 2f       	mov	r25, r24
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	89 23       	and	r24, r25
    1988:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[6]), !READ_BIT(SEVEN_SEG_INPUT[number], 6));
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	9c 01       	movw	r18, r24
    1990:	2a 5f       	subi	r18, 0xFA	; 250
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	3f 83       	std	Y+7, r19	; 0x07
    1996:	2e 83       	std	Y+6, r18	; 0x06
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	fc 01       	movw	r30, r24
    19a0:	ed 56       	subi	r30, 0x6D	; 109
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	82 95       	swap	r24
    19a8:	86 95       	lsr	r24
    19aa:	86 95       	lsr	r24
    19ac:	83 70       	andi	r24, 0x03	; 3
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	81 70       	andi	r24, 0x01	; 1
    19b4:	90 70       	andi	r25, 0x00	; 0
    19b6:	1d 82       	std	Y+5, r1	; 0x05
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	11 f4       	brne	.+4      	; 0x19c0 <SEVEN_SEG_write+0x21a>
    19bc:	31 e0       	ldi	r19, 0x01	; 1
    19be:	3d 83       	std	Y+5, r19	; 0x05
    19c0:	8e 81       	ldd	r24, Y+6	; 0x06
    19c2:	9f 81       	ldd	r25, Y+7	; 0x07
    19c4:	6d 81       	ldd	r22, Y+5	; 0x05
    19c6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    19ca:	99 81       	ldd	r25, Y+1	; 0x01
    19cc:	89 23       	and	r24, r25
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	a8 c0       	rjmp	.+336    	; 0x1b22 <SEVEN_SEG_write+0x37c>

		case COMMON_CATHODE:
			/* get the bit states required to print the number from the global SEVEN_SEG_INPUT array
			 * write every pin state of array element  on its relevant pin*/

			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[0]), READ_BIT(SEVEN_SEG_INPUT[number], 0));
    19d2:	4a 81       	ldd	r20, Y+2	; 0x02
    19d4:	5b 81       	ldd	r21, Y+3	; 0x03
    19d6:	8c 81       	ldd	r24, Y+4	; 0x04
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	fc 01       	movw	r30, r24
    19de:	ed 56       	subi	r30, 0x6D	; 109
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	28 2f       	mov	r18, r24
    19e6:	21 70       	andi	r18, 0x01	; 1
    19e8:	ca 01       	movw	r24, r20
    19ea:	62 2f       	mov	r22, r18
    19ec:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    19f0:	98 2f       	mov	r25, r24
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	89 23       	and	r24, r25
    19f6:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[1]), READ_BIT(SEVEN_SEG_INPUT[number], 1));
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	ac 01       	movw	r20, r24
    19fe:	4f 5f       	subi	r20, 0xFF	; 255
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	fc 01       	movw	r30, r24
    1a0a:	ed 56       	subi	r30, 0x6D	; 109
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 81       	ld	r24, Z
    1a10:	86 95       	lsr	r24
    1a12:	28 2f       	mov	r18, r24
    1a14:	21 70       	andi	r18, 0x01	; 1
    1a16:	ca 01       	movw	r24, r20
    1a18:	62 2f       	mov	r22, r18
    1a1a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1a1e:	98 2f       	mov	r25, r24
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	89 23       	and	r24, r25
    1a24:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[2]), READ_BIT(SEVEN_SEG_INPUT[number], 2));
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	4e 5f       	subi	r20, 0xFE	; 254
    1a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	fc 01       	movw	r30, r24
    1a38:	ed 56       	subi	r30, 0x6D	; 109
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	86 95       	lsr	r24
    1a40:	86 95       	lsr	r24
    1a42:	28 2f       	mov	r18, r24
    1a44:	21 70       	andi	r18, 0x01	; 1
    1a46:	ca 01       	movw	r24, r20
    1a48:	62 2f       	mov	r22, r18
    1a4a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1a4e:	98 2f       	mov	r25, r24
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	89 23       	and	r24, r25
    1a54:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[3]), READ_BIT(SEVEN_SEG_INPUT[number], 3));
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	4d 5f       	subi	r20, 0xFD	; 253
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	fc 01       	movw	r30, r24
    1a68:	ed 56       	subi	r30, 0x6D	; 109
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	86 95       	lsr	r24
    1a70:	86 95       	lsr	r24
    1a72:	86 95       	lsr	r24
    1a74:	28 2f       	mov	r18, r24
    1a76:	21 70       	andi	r18, 0x01	; 1
    1a78:	ca 01       	movw	r24, r20
    1a7a:	62 2f       	mov	r22, r18
    1a7c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1a80:	98 2f       	mov	r25, r24
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	89 23       	and	r24, r25
    1a86:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[4]), READ_BIT(SEVEN_SEG_INPUT[number], 4));
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	ac 01       	movw	r20, r24
    1a8e:	4c 5f       	subi	r20, 0xFC	; 252
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	8c 81       	ldd	r24, Y+4	; 0x04
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	fc 01       	movw	r30, r24
    1a9a:	ed 56       	subi	r30, 0x6D	; 109
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	82 95       	swap	r24
    1aa2:	8f 70       	andi	r24, 0x0F	; 15
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	21 70       	andi	r18, 0x01	; 1
    1aa8:	ca 01       	movw	r24, r20
    1aaa:	62 2f       	mov	r22, r18
    1aac:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	89 23       	and	r24, r25
    1ab6:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[5]), READ_BIT(SEVEN_SEG_INPUT[number], 5));
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	9b 81       	ldd	r25, Y+3	; 0x03
    1abc:	ac 01       	movw	r20, r24
    1abe:	4b 5f       	subi	r20, 0xFB	; 251
    1ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	fc 01       	movw	r30, r24
    1aca:	ed 56       	subi	r30, 0x6D	; 109
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	82 95       	swap	r24
    1ad2:	86 95       	lsr	r24
    1ad4:	87 70       	andi	r24, 0x07	; 7
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	21 70       	andi	r18, 0x01	; 1
    1ada:	ca 01       	movw	r24, r20
    1adc:	62 2f       	mov	r22, r18
    1ade:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1ae2:	98 2f       	mov	r25, r24
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	89 23       	and	r24, r25
    1ae8:	89 83       	std	Y+1, r24	; 0x01
			error_status &= GPIO_pinWrite(&(seven_seg->segment_pins[6]), READ_BIT(SEVEN_SEG_INPUT[number], 6));
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
    1aee:	ac 01       	movw	r20, r24
    1af0:	4a 5f       	subi	r20, 0xFA	; 250
    1af2:	5f 4f       	sbci	r21, 0xFF	; 255
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	fc 01       	movw	r30, r24
    1afc:	ed 56       	subi	r30, 0x6D	; 109
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	82 95       	swap	r24
    1b04:	86 95       	lsr	r24
    1b06:	86 95       	lsr	r24
    1b08:	83 70       	andi	r24, 0x03	; 3
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	21 70       	andi	r18, 0x01	; 1
    1b0e:	ca 01       	movw	r24, r20
    1b10:	62 2f       	mov	r22, r18
    1b12:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1b16:	98 2f       	mov	r25, r24
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	89 23       	and	r24, r25
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <SEVEN_SEG_write+0x37c>
			break;

		default:
			error_status = E_NOT_OK;
    1b20:	19 82       	std	Y+1, r1	; 0x01
		}
#endif
	}


	return error_status;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	6b 96       	adiw	r28, 0x1b	; 27
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <LED_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_init(const led_t *led)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <LED_init+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <LED_init+0x8>
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <LED_init+0x20>
	{
		error_status = E_NOT_OK;
    1b52:	19 82       	std	Y+1, r1	; 0x01
    1b54:	36 c0       	rjmp	.+108    	; 0x1bc2 <LED_init+0x8c>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id,
				.direction = GPIO_OUTPUT, .logic = led->led_initial_state};
    1b56:	eb 81       	ldd	r30, Y+3	; 0x03
    1b58:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5a:	80 81       	ld	r24, Z
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	23 70       	andi	r18, 0x03	; 3
    1b60:	eb 81       	ldd	r30, Y+3	; 0x03
    1b62:	fc 81       	ldd	r31, Y+4	; 0x04
    1b64:	80 81       	ld	r24, Z
    1b66:	98 2f       	mov	r25, r24
    1b68:	96 95       	lsr	r25
    1b6a:	96 95       	lsr	r25
    1b6c:	97 70       	andi	r25, 0x07	; 7
    1b6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b70:	fc 81       	ldd	r31, Y+4	; 0x04
    1b72:	80 81       	ld	r24, Z
    1b74:	38 2f       	mov	r19, r24
    1b76:	32 95       	swap	r19
    1b78:	36 95       	lsr	r19
    1b7a:	37 70       	andi	r19, 0x07	; 7
    1b7c:	31 70       	andi	r19, 0x01	; 1
    1b7e:	1a 82       	std	Y+2, r1	; 0x02
    1b80:	23 70       	andi	r18, 0x03	; 3
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	8c 7f       	andi	r24, 0xFC	; 252
    1b86:	82 2b       	or	r24, r18
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	89 2f       	mov	r24, r25
    1b8c:	87 70       	andi	r24, 0x07	; 7
    1b8e:	98 2f       	mov	r25, r24
    1b90:	99 0f       	add	r25, r25
    1b92:	99 0f       	add	r25, r25
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	83 7e       	andi	r24, 0xE3	; 227
    1b98:	89 2b       	or	r24, r25
    1b9a:	8a 83       	std	Y+2, r24	; 0x02
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	80 62       	ori	r24, 0x20	; 32
    1ba0:	8a 83       	std	Y+2, r24	; 0x02
    1ba2:	83 2f       	mov	r24, r19
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	92 95       	swap	r25
    1baa:	99 0f       	add	r25, r25
    1bac:	99 0f       	add	r25, r25
    1bae:	90 7c       	andi	r25, 0xC0	; 192
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	8f 7b       	andi	r24, 0xBF	; 191
    1bb4:	89 2b       	or	r24, r25
    1bb6:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&led_pin);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	02 96       	adiw	r24, 0x02	; 2
    1bbc:	0e 94 05 08 	call	0x100a	; 0x100a <GPIO_pinInit>
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <LED_on>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_on(const led_t *led)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <LED_on+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <LED_on+0x8>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	11 f4       	brne	.+4      	; 0x1bf2 <LED_on+0x20>
	{
		error_status = E_NOT_OK;
    1bee:	19 82       	std	Y+1, r1	; 0x01
    1bf0:	21 c0       	rjmp	.+66     	; 0x1c34 <LED_on+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1bf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf6:	80 81       	ld	r24, Z
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	23 70       	andi	r18, 0x03	; 3
    1bfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1c00:	80 81       	ld	r24, Z
    1c02:	98 2f       	mov	r25, r24
    1c04:	96 95       	lsr	r25
    1c06:	96 95       	lsr	r25
    1c08:	97 70       	andi	r25, 0x07	; 7
    1c0a:	1a 82       	std	Y+2, r1	; 0x02
    1c0c:	23 70       	andi	r18, 0x03	; 3
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	8c 7f       	andi	r24, 0xFC	; 252
    1c12:	82 2b       	or	r24, r18
    1c14:	8a 83       	std	Y+2, r24	; 0x02
    1c16:	89 2f       	mov	r24, r25
    1c18:	87 70       	andi	r24, 0x07	; 7
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	99 0f       	add	r25, r25
    1c1e:	99 0f       	add	r25, r25
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	83 7e       	andi	r24, 0xE3	; 227
    1c24:	89 2b       	or	r24, r25
    1c26:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_HIGH);
    1c28:	ce 01       	movw	r24, r28
    1c2a:	02 96       	adiw	r24, 0x02	; 2
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1c32:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <LED_off>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_off(const led_t *led)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <LED_off+0x6>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <LED_off+0x8>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <LED_off+0x20>
	{
		error_status = E_NOT_OK;
    1c60:	19 82       	std	Y+1, r1	; 0x01
    1c62:	21 c0       	rjmp	.+66     	; 0x1ca6 <LED_off+0x62>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1c64:	eb 81       	ldd	r30, Y+3	; 0x03
    1c66:	fc 81       	ldd	r31, Y+4	; 0x04
    1c68:	80 81       	ld	r24, Z
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	23 70       	andi	r18, 0x03	; 3
    1c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c70:	fc 81       	ldd	r31, Y+4	; 0x04
    1c72:	80 81       	ld	r24, Z
    1c74:	98 2f       	mov	r25, r24
    1c76:	96 95       	lsr	r25
    1c78:	96 95       	lsr	r25
    1c7a:	97 70       	andi	r25, 0x07	; 7
    1c7c:	1a 82       	std	Y+2, r1	; 0x02
    1c7e:	23 70       	andi	r18, 0x03	; 3
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	8c 7f       	andi	r24, 0xFC	; 252
    1c84:	82 2b       	or	r24, r18
    1c86:	8a 83       	std	Y+2, r24	; 0x02
    1c88:	89 2f       	mov	r24, r25
    1c8a:	87 70       	andi	r24, 0x07	; 7
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	99 0f       	add	r25, r25
    1c90:	99 0f       	add	r25, r25
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	83 7e       	andi	r24, 0xE3	; 227
    1c96:	89 2b       	or	r24, r25
    1c98:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinWrite(&led_pin, GPIO_LOW);
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	02 96       	adiw	r24, 0x02	; 2
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    1ca4:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LED_toggle>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LED_toggle(const led_t *led)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <LED_toggle+0x6>
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <LED_toggle+0x8>
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	11 f4       	brne	.+4      	; 0x1cd6 <LED_toggle+0x20>
	{
		error_status = E_NOT_OK;
    1cd2:	19 82       	std	Y+1, r1	; 0x01
    1cd4:	20 c0       	rjmp	.+64     	; 0x1d16 <LED_toggle+0x60>
	}
	else
	{
		pin_obj_t led_pin = {.port_id = led->port_id, .pin_id = led->pin_id};
    1cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cda:	80 81       	ld	r24, Z
    1cdc:	28 2f       	mov	r18, r24
    1cde:	23 70       	andi	r18, 0x03	; 3
    1ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce4:	80 81       	ld	r24, Z
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	96 95       	lsr	r25
    1cea:	96 95       	lsr	r25
    1cec:	97 70       	andi	r25, 0x07	; 7
    1cee:	1a 82       	std	Y+2, r1	; 0x02
    1cf0:	23 70       	andi	r18, 0x03	; 3
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	8c 7f       	andi	r24, 0xFC	; 252
    1cf6:	82 2b       	or	r24, r18
    1cf8:	8a 83       	std	Y+2, r24	; 0x02
    1cfa:	89 2f       	mov	r24, r25
    1cfc:	87 70       	andi	r24, 0x07	; 7
    1cfe:	98 2f       	mov	r25, r24
    1d00:	99 0f       	add	r25, r25
    1d02:	99 0f       	add	r25, r25
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	83 7e       	andi	r24, 0xE3	; 227
    1d08:	89 2b       	or	r24, r25
    1d0a:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinToggle(&led_pin);
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	02 96       	adiw	r24, 0x02	; 2
    1d10:	0e 94 a3 0a 	call	0x1546	; 0x1546 <GPIO_pinToggle>
    1d14:	89 83       	std	Y+1, r24	; 0x01

	}

	return error_status;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_4bit_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_init(const lcd_4bit_t *lcd)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	e8 97       	sbiw	r28, 0x38	; 56
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	98 af       	std	Y+56, r25	; 0x38
    1d3c:	8f ab       	std	Y+55, r24	; 0x37
	STD_ReturnType error_status = E_OK;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	8e ab       	std	Y+54, r24	; 0x36
	if(NULL == lcd)
    1d42:	8f a9       	ldd	r24, Y+55	; 0x37
    1d44:	98 ad       	ldd	r25, Y+56	; 0x38
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <LCD_4bit_init+0x28>
	{
		error_status = E_NOT_OK;
    1d4a:	1e aa       	std	Y+54, r1	; 0x36
    1d4c:	13 c2       	rjmp	.+1062   	; 0x2174 <LCD_4bit_init+0x44e>
	}
	else
	{
		uint8 data_pin_counter = 0; /* To loop through the 4 data pins */
    1d4e:	1d aa       	std	Y+53, r1	; 0x35
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
    1d50:	8f a9       	ldd	r24, Y+55	; 0x37
    1d52:	98 ad       	ldd	r25, Y+56	; 0x38
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    1d5a:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */
    1d5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    1d68:	98 2f       	mov	r25, r24
    1d6a:	8e a9       	ldd	r24, Y+54	; 0x36
    1d6c:	89 23       	and	r24, r25
    1d6e:	8e ab       	std	Y+54, r24	; 0x36
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_4bit_init+0x74>

		for(; data_pin_counter < 4; data_pin_counter++)
		{
			error_status &= GPIO_pinDirectionInit(&(lcd->data_pin[data_pin_counter]), GPIO_OUTPUT);
    1d72:	8f a9       	ldd	r24, Y+55	; 0x37
    1d74:	98 ad       	ldd	r25, Y+56	; 0x38
    1d76:	9c 01       	movw	r18, r24
    1d78:	2e 5f       	subi	r18, 0xFE	; 254
    1d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7c:	8d a9       	ldd	r24, Y+53	; 0x35
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	82 0f       	add	r24, r18
    1d84:	93 1f       	adc	r25, r19
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	8e a9       	ldd	r24, Y+54	; 0x36
    1d90:	89 23       	and	r24, r25
    1d92:	8e ab       	std	Y+54, r24	; 0x36
	{
		uint8 data_pin_counter = 0; /* To loop through the 4 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */

		for(; data_pin_counter < 4; data_pin_counter++)
    1d94:	8d a9       	ldd	r24, Y+53	; 0x35
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	8d ab       	std	Y+53, r24	; 0x35
    1d9a:	8d a9       	ldd	r24, Y+53	; 0x35
    1d9c:	84 30       	cpi	r24, 0x04	; 4
    1d9e:	48 f3       	brcs	.-46     	; 0x1d72 <LCD_4bit_init+0x4c>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 ea       	ldi	r26, 0xA0	; 160
    1da6:	b1 e4       	ldi	r27, 0x41	; 65
    1da8:	89 ab       	std	Y+49, r24	; 0x31
    1daa:	9a ab       	std	Y+50, r25	; 0x32
    1dac:	ab ab       	std	Y+51, r26	; 0x33
    1dae:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	69 a9       	ldd	r22, Y+49	; 0x31
    1db2:	7a a9       	ldd	r23, Y+50	; 0x32
    1db4:	8b a9       	ldd	r24, Y+51	; 0x33
    1db6:	9c a9       	ldd	r25, Y+52	; 0x34
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a e7       	ldi	r20, 0x7A	; 122
    1dbe:	55 e4       	ldi	r21, 0x45	; 69
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8d a7       	std	Y+45, r24	; 0x2d
    1dca:	9e a7       	std	Y+46, r25	; 0x2e
    1dcc:	af a7       	std	Y+47, r26	; 0x2f
    1dce:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1dd0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dd2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_4bit_init+0xcc>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c a7       	std	Y+44, r25	; 0x2c
    1dee:	8b a7       	std	Y+43, r24	; 0x2b
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_4bit_init+0x14a>
	else if (__tmp > 65535)
    1df2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1df4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_4bit_init+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e10:	9c a9       	ldd	r25, Y+52	; 0x34
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c a7       	std	Y+44, r25	; 0x2c
    1e30:	8b a7       	std	Y+43, r24	; 0x2b
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_4bit_init+0x12c>
    1e34:	80 e9       	ldi	r24, 0x90	; 144
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	9a a7       	std	Y+42, r25	; 0x2a
    1e3a:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_4bit_init+0x11a>
    1e44:	9a a7       	std	Y+42, r25	; 0x2a
    1e46:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_4bit_init+0x10e>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_4bit_init+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e62:	98 a9       	ldd	r25, Y+48	; 0x30
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9c a7       	std	Y+44, r25	; 0x2c
    1e6e:	8b a7       	std	Y+43, r24	; 0x2b
    1e70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e74:	98 a7       	std	Y+40, r25	; 0x28
    1e76:	8f a3       	std	Y+39, r24	; 0x27
    1e78:	8f a1       	ldd	r24, Y+39	; 0x27
    1e7a:	98 a5       	ldd	r25, Y+40	; 0x28
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_4bit_init+0x156>
    1e80:	98 a7       	std	Y+40, r25	; 0x28
    1e82:	8f a3       	std	Y+39, r24	; 0x27
		}

		/* generate a delay of 20 msec at  startup*/
		_delay_ms(20);

		error_status &= LCD_4bit_sendCommand(lcd, 0x33);	/* required 4-bit mode initialization command */
    1e84:	8f a9       	ldd	r24, Y+55	; 0x37
    1e86:	98 ad       	ldd	r25, Y+56	; 0x38
    1e88:	63 e3       	ldi	r22, 0x33	; 51
    1e8a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    1e8e:	98 2f       	mov	r25, r24
    1e90:	8e a9       	ldd	r24, Y+54	; 0x36
    1e92:	89 23       	and	r24, r25
    1e94:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, 0x32);	/* required 4-bit mode initialization command */
    1e96:	8f a9       	ldd	r24, Y+55	; 0x37
    1e98:	98 ad       	ldd	r25, Y+56	; 0x38
    1e9a:	62 e3       	ldi	r22, 0x32	; 50
    1e9c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    1ea0:	98 2f       	mov	r25, r24
    1ea2:	8e a9       	ldd	r24, Y+54	; 0x36
    1ea4:	89 23       	and	r24, r25
    1ea6:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE); /* set 4 bit mode 2 line */
    1ea8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eaa:	98 ad       	ldd	r25, Y+56	; 0x38
    1eac:	68 e2       	ldi	r22, 0x28	; 40
    1eae:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	8e a9       	ldd	r24, Y+54	; 0x36
    1eb6:	89 23       	and	r24, r25
    1eb8:	8e ab       	std	Y+54, r24	; 0x36
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 ea       	ldi	r26, 0xA0	; 160
    1ec0:	b0 e4       	ldi	r27, 0x40	; 64
    1ec2:	8b a3       	std	Y+35, r24	; 0x23
    1ec4:	9c a3       	std	Y+36, r25	; 0x24
    1ec6:	ad a3       	std	Y+37, r26	; 0x25
    1ec8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6b a1       	ldd	r22, Y+35	; 0x23
    1ecc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ece:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a e7       	ldi	r20, 0x7A	; 122
    1ed8:	55 e4       	ldi	r21, 0x45	; 69
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ee4:	98 a3       	std	Y+32, r25	; 0x20
    1ee6:	a9 a3       	std	Y+33, r26	; 0x21
    1ee8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1eea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1eec:	78 a1       	ldd	r23, Y+32	; 0x20
    1eee:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_4bit_init+0x1e6>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9e 8f       	std	Y+30, r25	; 0x1e
    1f08:	8d 8f       	std	Y+29, r24	; 0x1d
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <LCD_4bit_init+0x264>
	else if (__tmp > 65535)
    1f0c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f0e:	78 a1       	ldd	r23, Y+32	; 0x20
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <LCD_4bit_init+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6b a1       	ldd	r22, Y+35	; 0x23
    1f26:	7c a1       	ldd	r23, Y+36	; 0x24
    1f28:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <LCD_4bit_init+0x246>
    1f4e:	80 e9       	ldi	r24, 0x90	; 144
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	9c 8f       	std	Y+28, r25	; 0x1c
    1f54:	8b 8f       	std	Y+27, r24	; 0x1b
    1f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_4bit_init+0x234>
    1f5e:	9c 8f       	std	Y+28, r25	; 0x1c
    1f60:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	9e 8f       	std	Y+30, r25	; 0x1e
    1f6a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <LCD_4bit_init+0x228>
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <LCD_4bit_init+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f78:	78 a1       	ldd	r23, Y+32	; 0x20
    1f7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9e 8f       	std	Y+30, r25	; 0x1e
    1f88:	8d 8f       	std	Y+29, r24	; 0x1d
    1f8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f90:	89 8f       	std	Y+25, r24	; 0x19
    1f92:	89 8d       	ldd	r24, Y+25	; 0x19
    1f94:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_4bit_init+0x270>
    1f9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f9c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    1f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa2:	68 e2       	ldi	r22, 0x28	; 40
    1fa4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    1fa8:	98 2f       	mov	r25, r24
    1faa:	8e a9       	ldd	r24, Y+54	; 0x36
    1fac:	89 23       	and	r24, r25
    1fae:	8e ab       	std	Y+54, r24	; 0x36
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a6 e1       	ldi	r26, 0x16	; 22
    1fb6:	b3 e4       	ldi	r27, 0x43	; 67
    1fb8:	8d 8b       	std	Y+21, r24	; 0x15
    1fba:	9e 8b       	std	Y+22, r25	; 0x16
    1fbc:	af 8b       	std	Y+23, r26	; 0x17
    1fbe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc8:	2b ea       	ldi	r18, 0xAB	; 171
    1fca:	3a ea       	ldi	r19, 0xAA	; 170
    1fcc:	4a ea       	ldi	r20, 0xAA	; 170
    1fce:	50 e4       	ldi	r21, 0x40	; 64
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	89 8b       	std	Y+17, r24	; 0x11
    1fda:	9a 8b       	std	Y+18, r25	; 0x12
    1fdc:	ab 8b       	std	Y+19, r26	; 0x13
    1fde:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fe0:	69 89       	ldd	r22, Y+17	; 0x11
    1fe2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	1c f4       	brge	.+6      	; 0x1ffe <LCD_4bit_init+0x2d8>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	88 8b       	std	Y+16, r24	; 0x10
    1ffc:	91 c0       	rjmp	.+290    	; 0x2120 <LCD_4bit_init+0x3fa>
	else if (__tmp > 255)
    1ffe:	69 89       	ldd	r22, Y+17	; 0x11
    2000:	7a 89       	ldd	r23, Y+18	; 0x12
    2002:	8b 89       	ldd	r24, Y+19	; 0x13
    2004:	9c 89       	ldd	r25, Y+20	; 0x14
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	0c f0       	brlt	.+2      	; 0x2018 <LCD_4bit_init+0x2f2>
    2016:	7b c0       	rjmp	.+246    	; 0x210e <LCD_4bit_init+0x3e8>
	{
		_delay_ms(__us / 1000.0);
    2018:	6d 89       	ldd	r22, Y+21	; 0x15
    201a:	7e 89       	ldd	r23, Y+22	; 0x16
    201c:	8f 89       	ldd	r24, Y+23	; 0x17
    201e:	98 8d       	ldd	r25, Y+24	; 0x18
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a e7       	ldi	r20, 0x7A	; 122
    2026:	54 e4       	ldi	r21, 0x44	; 68
    2028:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	8c 87       	std	Y+12, r24	; 0x0c
    2032:	9d 87       	std	Y+13, r25	; 0x0d
    2034:	ae 87       	std	Y+14, r26	; 0x0e
    2036:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	6c 85       	ldd	r22, Y+12	; 0x0c
    203a:	7d 85       	ldd	r23, Y+13	; 0x0d
    203c:	8e 85       	ldd	r24, Y+14	; 0x0e
    203e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	55 e4       	ldi	r21, 0x45	; 69
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	88 87       	std	Y+8, r24	; 0x08
    2052:	99 87       	std	Y+9, r25	; 0x09
    2054:	aa 87       	std	Y+10, r26	; 0x0a
    2056:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2058:	68 85       	ldd	r22, Y+8	; 0x08
    205a:	79 85       	ldd	r23, Y+9	; 0x09
    205c:	8a 85       	ldd	r24, Y+10	; 0x0a
    205e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <LCD_4bit_init+0x354>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9f 83       	std	Y+7, r25	; 0x07
    2076:	8e 83       	std	Y+6, r24	; 0x06
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <LCD_4bit_init+0x3d2>
	else if (__tmp > 65535)
    207a:	68 85       	ldd	r22, Y+8	; 0x08
    207c:	79 85       	ldd	r23, Y+9	; 0x09
    207e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2080:	9b 85       	ldd	r25, Y+11	; 0x0b
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <LCD_4bit_init+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	6c 85       	ldd	r22, Y+12	; 0x0c
    2094:	7d 85       	ldd	r23, Y+13	; 0x0d
    2096:	8e 85       	ldd	r24, Y+14	; 0x0e
    2098:	9f 85       	ldd	r25, Y+15	; 0x0f
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9f 83       	std	Y+7, r25	; 0x07
    20b8:	8e 83       	std	Y+6, r24	; 0x06
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <LCD_4bit_init+0x3b4>
    20bc:	80 e9       	ldi	r24, 0x90	; 144
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	9d 83       	std	Y+5, r25	; 0x05
    20c2:	8c 83       	std	Y+4, r24	; 0x04
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9d 81       	ldd	r25, Y+5	; 0x05
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_4bit_init+0x3a2>
    20cc:	9d 83       	std	Y+5, r25	; 0x05
    20ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	8e 81       	ldd	r24, Y+6	; 0x06
    20d2:	9f 81       	ldd	r25, Y+7	; 0x07
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	9f 83       	std	Y+7, r25	; 0x07
    20d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	8e 81       	ldd	r24, Y+6	; 0x06
    20dc:	9f 81       	ldd	r25, Y+7	; 0x07
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <LCD_4bit_init+0x396>
    20e2:	24 c0       	rjmp	.+72     	; 0x212c <LCD_4bit_init+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	68 85       	ldd	r22, Y+8	; 0x08
    20e6:	79 85       	ldd	r23, Y+9	; 0x09
    20e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9f 83       	std	Y+7, r25	; 0x07
    20f6:	8e 83       	std	Y+6, r24	; 0x06
    20f8:	8e 81       	ldd	r24, Y+6	; 0x06
    20fa:	9f 81       	ldd	r25, Y+7	; 0x07
    20fc:	9b 83       	std	Y+3, r25	; 0x03
    20fe:	8a 83       	std	Y+2, r24	; 0x02
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	9b 81       	ldd	r25, Y+3	; 0x03
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_4bit_init+0x3de>
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	0f c0       	rjmp	.+30     	; 0x212c <LCD_4bit_init+0x406>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210e:	69 89       	ldd	r22, Y+17	; 0x11
    2110:	7a 89       	ldd	r23, Y+18	; 0x12
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	88 8b       	std	Y+16, r24	; 0x10
    2120:	88 89       	ldd	r24, Y+16	; 0x10
    2122:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	8a 95       	dec	r24
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_4bit_init+0x400>
    212a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_4BIT_MODE_2_LINE);
    212c:	8f a9       	ldd	r24, Y+55	; 0x37
    212e:	98 ad       	ldd	r25, Y+56	; 0x38
    2130:	68 e2       	ldi	r22, 0x28	; 40
    2132:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    2136:	98 2f       	mov	r25, r24
    2138:	8e a9       	ldd	r24, Y+54	; 0x36
    213a:	89 23       	and	r24, r25
    213c:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_4bit_sendCommand(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
    213e:	8f a9       	ldd	r24, Y+55	; 0x37
    2140:	98 ad       	ldd	r25, Y+56	; 0x38
    2142:	6c e0       	ldi	r22, 0x0C	; 12
    2144:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    2148:	98 2f       	mov	r25, r24
    214a:	8e a9       	ldd	r24, Y+54	; 0x36
    214c:	89 23       	and	r24, r25
    214e:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_ENTRY_MODE);
    2150:	8f a9       	ldd	r24, Y+55	; 0x37
    2152:	98 ad       	ldd	r25, Y+56	; 0x38
    2154:	66 e0       	ldi	r22, 0x06	; 6
    2156:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    215a:	98 2f       	mov	r25, r24
    215c:	8e a9       	ldd	r24, Y+54	; 0x36
    215e:	89 23       	and	r24, r25
    2160:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_4bit_sendCommand(lcd, _LCD_CLEAR);
    2162:	8f a9       	ldd	r24, Y+55	; 0x37
    2164:	98 ad       	ldd	r25, Y+56	; 0x38
    2166:	61 e0       	ldi	r22, 0x01	; 1
    2168:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    216c:	98 2f       	mov	r25, r24
    216e:	8e a9       	ldd	r24, Y+54	; 0x36
    2170:	89 23       	and	r24, r25
    2172:	8e ab       	std	Y+54, r24	; 0x36

	}
	return error_status;
    2174:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2176:	e8 96       	adiw	r28, 0x38	; 56
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <LCD_4bit_clear>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_clear(const lcd_4bit_t *lcd)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <LCD_4bit_clear+0x6>
    218e:	0f 92       	push	r0
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9b 83       	std	Y+3, r25	; 0x03
    2196:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	11 f4       	brne	.+4      	; 0x21a8 <LCD_4bit_clear+0x20>
	{
		error_status = E_NOT_OK;
    21a4:	19 82       	std	Y+1, r1	; 0x01
    21a6:	05 c0       	rjmp	.+10     	; 0x21b2 <LCD_4bit_clear+0x2a>
	}
	else
	{
		LCD_4bit_sendCommand(lcd, _LCD_CLEAR);
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
	}
	return error_status;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_4bit_sendCommand>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCommand(const lcd_4bit_t *lcd, uint8 command)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	62 97       	sbiw	r28, 0x12	; 18
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	99 8b       	std	Y+17, r25	; 0x11
    21d6:	88 8b       	std	Y+16, r24	; 0x10
    21d8:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    21de:	88 89       	ldd	r24, Y+16	; 0x10
    21e0:	99 89       	ldd	r25, Y+17	; 0x11
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	11 f4       	brne	.+4      	; 0x21ea <LCD_4bit_sendCommand+0x2a>
	{
		error_status = E_NOT_OK;
    21e6:	1f 86       	std	Y+15, r1	; 0x0f
    21e8:	a1 c0       	rjmp	.+322    	; 0x232c <LCD_4bit_sendCommand+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
    21ea:	88 89       	ldd	r24, Y+16	; 0x10
    21ec:	99 89       	ldd	r25, Y+17	; 0x11
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    21f4:	98 2f       	mov	r25, r24
    21f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f8:	89 23       	and	r24, r25
    21fa:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (command >> 4));	/* Send the higher command nibble first */
    21fc:	8a 89       	ldd	r24, Y+18	; 0x12
    21fe:	28 2f       	mov	r18, r24
    2200:	22 95       	swap	r18
    2202:	2f 70       	andi	r18, 0x0F	; 15
    2204:	88 89       	ldd	r24, Y+16	; 0x10
    2206:	99 89       	ldd	r25, Y+17	; 0x11
    2208:	62 2f       	mov	r22, r18
    220a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <LCD_send4Bits>
    220e:	98 2f       	mov	r25, r24
    2210:	8f 85       	ldd	r24, Y+15	; 0x0f
    2212:	89 23       	and	r24, r25
    2214:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2216:	88 89       	ldd	r24, Y+16	; 0x10
    2218:	99 89       	ldd	r25, Y+17	; 0x11
    221a:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_4bit_genEnablePulse>
    221e:	98 2f       	mov	r25, r24
    2220:	8f 85       	ldd	r24, Y+15	; 0x0f
    2222:	89 23       	and	r24, r25
    2224:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, command);			/* Send the lower command nibble */
    2226:	88 89       	ldd	r24, Y+16	; 0x10
    2228:	99 89       	ldd	r25, Y+17	; 0x11
    222a:	6a 89       	ldd	r22, Y+18	; 0x12
    222c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <LCD_send4Bits>
    2230:	98 2f       	mov	r25, r24
    2232:	8f 85       	ldd	r24, Y+15	; 0x0f
    2234:	89 23       	and	r24, r25
    2236:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2238:	88 89       	ldd	r24, Y+16	; 0x10
    223a:	99 89       	ldd	r25, Y+17	; 0x11
    223c:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_4bit_genEnablePulse>
    2240:	98 2f       	mov	r25, r24
    2242:	8f 85       	ldd	r24, Y+15	; 0x0f
    2244:	89 23       	and	r24, r25
    2246:	8f 87       	std	Y+15, r24	; 0x0f
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	b0 e4       	ldi	r27, 0x40	; 64
    2250:	8b 87       	std	Y+11, r24	; 0x0b
    2252:	9c 87       	std	Y+12, r25	; 0x0c
    2254:	ad 87       	std	Y+13, r26	; 0x0d
    2256:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	6b 85       	ldd	r22, Y+11	; 0x0b
    225a:	7c 85       	ldd	r23, Y+12	; 0x0c
    225c:	8d 85       	ldd	r24, Y+13	; 0x0d
    225e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4a e7       	ldi	r20, 0x7A	; 122
    2266:	55 e4       	ldi	r21, 0x45	; 69
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8f 83       	std	Y+7, r24	; 0x07
    2272:	98 87       	std	Y+8, r25	; 0x08
    2274:	a9 87       	std	Y+9, r26	; 0x09
    2276:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2278:	6f 81       	ldd	r22, Y+7	; 0x07
    227a:	78 85       	ldd	r23, Y+8	; 0x08
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	2c f4       	brge	.+10     	; 0x229a <LCD_4bit_sendCommand+0xda>
		__ticks = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
    2298:	3f c0       	rjmp	.+126    	; 0x2318 <LCD_4bit_sendCommand+0x158>
	else if (__tmp > 65535)
    229a:	6f 81       	ldd	r22, Y+7	; 0x07
    229c:	78 85       	ldd	r23, Y+8	; 0x08
    229e:	89 85       	ldd	r24, Y+9	; 0x09
    22a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	57 e4       	ldi	r21, 0x47	; 71
    22aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	4c f5       	brge	.+82     	; 0x2304 <LCD_4bit_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e2       	ldi	r20, 0x20	; 32
    22c0:	51 e4       	ldi	r21, 0x41	; 65
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	0f c0       	rjmp	.+30     	; 0x22fa <LCD_4bit_sendCommand+0x13a>
    22dc:	80 e9       	ldi	r24, 0x90	; 144
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	9c 83       	std	Y+4, r25	; 0x04
    22e2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <LCD_4bit_sendCommand+0x128>
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	9e 83       	std	Y+6, r25	; 0x06
    22f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f7       	brne	.-38     	; 0x22dc <LCD_4bit_sendCommand+0x11c>
    2302:	14 c0       	rjmp	.+40     	; 0x232c <LCD_4bit_sendCommand+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2304:	6f 81       	ldd	r22, Y+7	; 0x07
    2306:	78 85       	ldd	r23, Y+8	; 0x08
    2308:	89 85       	ldd	r24, Y+9	; 0x09
    230a:	9a 85       	ldd	r25, Y+10	; 0x0a
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	9a 83       	std	Y+2, r25	; 0x02
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	9a 81       	ldd	r25, Y+2	; 0x02
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <LCD_4bit_sendCommand+0x164>
    2328:	9a 83       	std	Y+2, r25	; 0x02
    232a:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);
	}
	return error_status;
    232c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    232e:	62 96       	adiw	r28, 0x12	; 18
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LCD_4bit_sendChar>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendChar(const lcd_4bit_t *lcd, uint8 _char)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	62 97       	sbiw	r28, 0x12	; 18
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	99 8b       	std	Y+17, r25	; 0x11
    2356:	88 8b       	std	Y+16, r24	; 0x10
    2358:	6a 8b       	std	Y+18, r22	; 0x12
	STD_ReturnType error_status = E_OK;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    235e:	88 89       	ldd	r24, Y+16	; 0x10
    2360:	99 89       	ldd	r25, Y+17	; 0x11
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	11 f4       	brne	.+4      	; 0x236a <LCD_4bit_sendChar+0x2a>
	{
		error_status = E_NOT_OK;
    2366:	1f 86       	std	Y+15, r1	; 0x0f
    2368:	a1 c0       	rjmp	.+322    	; 0x24ac <LCD_4bit_sendChar+0x16c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    236a:	88 89       	ldd	r24, Y+16	; 0x10
    236c:	99 89       	ldd	r25, Y+17	; 0x11
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    2374:	98 2f       	mov	r25, r24
    2376:	8f 85       	ldd	r24, Y+15	; 0x0f
    2378:	89 23       	and	r24, r25
    237a:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    237c:	8a 89       	ldd	r24, Y+18	; 0x12
    237e:	28 2f       	mov	r18, r24
    2380:	22 95       	swap	r18
    2382:	2f 70       	andi	r18, 0x0F	; 15
    2384:	88 89       	ldd	r24, Y+16	; 0x10
    2386:	99 89       	ldd	r25, Y+17	; 0x11
    2388:	62 2f       	mov	r22, r18
    238a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <LCD_send4Bits>
    238e:	98 2f       	mov	r25, r24
    2390:	8f 85       	ldd	r24, Y+15	; 0x0f
    2392:	89 23       	and	r24, r25
    2394:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2396:	88 89       	ldd	r24, Y+16	; 0x10
    2398:	99 89       	ldd	r25, Y+17	; 0x11
    239a:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_4bit_genEnablePulse>
    239e:	98 2f       	mov	r25, r24
    23a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a2:	89 23       	and	r24, r25
    23a4:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    23a6:	88 89       	ldd	r24, Y+16	; 0x10
    23a8:	99 89       	ldd	r25, Y+17	; 0x11
    23aa:	6a 89       	ldd	r22, Y+18	; 0x12
    23ac:	0e 94 a4 1a 	call	0x3548	; 0x3548 <LCD_send4Bits>
    23b0:	98 2f       	mov	r25, r24
    23b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b4:	89 23       	and	r24, r25
    23b6:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    23b8:	88 89       	ldd	r24, Y+16	; 0x10
    23ba:	99 89       	ldd	r25, Y+17	; 0x11
    23bc:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_4bit_genEnablePulse>
    23c0:	98 2f       	mov	r25, r24
    23c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c4:	89 23       	and	r24, r25
    23c6:	8f 87       	std	Y+15, r24	; 0x0f
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a0 e0       	ldi	r26, 0x00	; 0
    23ce:	b0 e4       	ldi	r27, 0x40	; 64
    23d0:	8b 87       	std	Y+11, r24	; 0x0b
    23d2:	9c 87       	std	Y+12, r25	; 0x0c
    23d4:	ad 87       	std	Y+13, r26	; 0x0d
    23d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4a e7       	ldi	r20, 0x7A	; 122
    23e6:	55 e4       	ldi	r21, 0x45	; 69
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	8f 83       	std	Y+7, r24	; 0x07
    23f2:	98 87       	std	Y+8, r25	; 0x08
    23f4:	a9 87       	std	Y+9, r26	; 0x09
    23f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240c:	88 23       	and	r24, r24
    240e:	2c f4       	brge	.+10     	; 0x241a <LCD_4bit_sendChar+0xda>
		__ticks = 1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <LCD_4bit_sendChar+0x158>
	else if (__tmp > 65535)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	3f ef       	ldi	r19, 0xFF	; 255
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	57 e4       	ldi	r21, 0x47	; 71
    242a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	4c f5       	brge	.+82     	; 0x2484 <LCD_4bit_sendChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2432:	6b 85       	ldd	r22, Y+11	; 0x0b
    2434:	7c 85       	ldd	r23, Y+12	; 0x0c
    2436:	8d 85       	ldd	r24, Y+13	; 0x0d
    2438:	9e 85       	ldd	r25, Y+14	; 0x0e
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	0f c0       	rjmp	.+30     	; 0x247a <LCD_4bit_sendChar+0x13a>
    245c:	80 e9       	ldi	r24, 0x90	; 144
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	9c 83       	std	Y+4, r25	; 0x04
    2462:	8b 83       	std	Y+3, r24	; 0x03
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_4bit_sendChar+0x128>
    246c:	9c 83       	std	Y+4, r25	; 0x04
    246e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	69 f7       	brne	.-38     	; 0x245c <LCD_4bit_sendChar+0x11c>
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <LCD_4bit_sendChar+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_4bit_sendChar+0x164>
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);

	}

	return error_status;
    24ac:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    24ae:	62 96       	adiw	r28, 0x12	; 18
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <LCD_4bit_sendCharAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCharAtPosition(const lcd_4bit_t *lcd, uint8 row, uint8 col, uint8 _char)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	64 97       	sbiw	r28, 0x14	; 20
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	99 8b       	std	Y+17, r25	; 0x11
    24d6:	88 8b       	std	Y+16, r24	; 0x10
    24d8:	6a 8b       	std	Y+18, r22	; 0x12
    24da:	4b 8b       	std	Y+19, r20	; 0x13
    24dc:	2c 8b       	std	Y+20, r18	; 0x14
	STD_ReturnType error_status = E_OK;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    24e2:	88 89       	ldd	r24, Y+16	; 0x10
    24e4:	99 89       	ldd	r25, Y+17	; 0x11
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	11 f4       	brne	.+4      	; 0x24ee <LCD_4bit_sendCharAtPosition+0x2e>
	{
		error_status = E_NOT_OK;
    24ea:	1f 86       	std	Y+15, r1	; 0x0f
    24ec:	a7 c0       	rjmp	.+334    	; 0x263c <LCD_4bit_sendCharAtPosition+0x17c>
	}
	else
	{

		/* set cursor to the required position */
		LCD_4bit_setCursorLocation(lcd, row, col);
    24ee:	88 89       	ldd	r24, Y+16	; 0x10
    24f0:	99 89       	ldd	r25, Y+17	; 0x11
    24f2:	6a 89       	ldd	r22, Y+18	; 0x12
    24f4:	4b 89       	ldd	r20, Y+19	; 0x13
    24f6:	0e 94 b4 19 	call	0x3368	; 0x3368 <LCD_4bit_setCursorLocation>

		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    24fa:	88 89       	ldd	r24, Y+16	; 0x10
    24fc:	99 89       	ldd	r25, Y+17	; 0x11
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    2504:	98 2f       	mov	r25, r24
    2506:	8f 85       	ldd	r24, Y+15	; 0x0f
    2508:	89 23       	and	r24, r25
    250a:	8f 87       	std	Y+15, r24	; 0x0f


		/* Send the higher command nibble first */
		error_status &= LCD_send4Bits(lcd, (_char >> 4));		/* Send the higher char nibble first */
    250c:	8c 89       	ldd	r24, Y+20	; 0x14
    250e:	28 2f       	mov	r18, r24
    2510:	22 95       	swap	r18
    2512:	2f 70       	andi	r18, 0x0F	; 15
    2514:	88 89       	ldd	r24, Y+16	; 0x10
    2516:	99 89       	ldd	r25, Y+17	; 0x11
    2518:	62 2f       	mov	r22, r18
    251a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <LCD_send4Bits>
    251e:	98 2f       	mov	r25, r24
    2520:	8f 85       	ldd	r24, Y+15	; 0x0f
    2522:	89 23       	and	r24, r25
    2524:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2526:	88 89       	ldd	r24, Y+16	; 0x10
    2528:	99 89       	ldd	r25, Y+17	; 0x11
    252a:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_4bit_genEnablePulse>
    252e:	98 2f       	mov	r25, r24
    2530:	8f 85       	ldd	r24, Y+15	; 0x0f
    2532:	89 23       	and	r24, r25
    2534:	8f 87       	std	Y+15, r24	; 0x0f

		error_status &= LCD_send4Bits(lcd, _char);				/* Send the lower char nibble */
    2536:	88 89       	ldd	r24, Y+16	; 0x10
    2538:	99 89       	ldd	r25, Y+17	; 0x11
    253a:	6c 89       	ldd	r22, Y+20	; 0x14
    253c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <LCD_send4Bits>
    2540:	98 2f       	mov	r25, r24
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	89 23       	and	r24, r25
    2546:	8f 87       	std	Y+15, r24	; 0x0f
		error_status &= LCD_4bit_genEnablePulse(lcd);			/* generate a low pulse on the enable pin */
    2548:	88 89       	ldd	r24, Y+16	; 0x10
    254a:	99 89       	ldd	r25, Y+17	; 0x11
    254c:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_4bit_genEnablePulse>
    2550:	98 2f       	mov	r25, r24
    2552:	8f 85       	ldd	r24, Y+15	; 0x0f
    2554:	89 23       	and	r24, r25
    2556:	8f 87       	std	Y+15, r24	; 0x0f
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e0       	ldi	r26, 0x00	; 0
    255e:	b0 e4       	ldi	r27, 0x40	; 64
    2560:	8b 87       	std	Y+11, r24	; 0x0b
    2562:	9c 87       	std	Y+12, r25	; 0x0c
    2564:	ad 87       	std	Y+13, r26	; 0x0d
    2566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	6b 85       	ldd	r22, Y+11	; 0x0b
    256a:	7c 85       	ldd	r23, Y+12	; 0x0c
    256c:	8d 85       	ldd	r24, Y+13	; 0x0d
    256e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a e7       	ldi	r20, 0x7A	; 122
    2576:	55 e4       	ldi	r21, 0x45	; 69
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8f 83       	std	Y+7, r24	; 0x07
    2582:	98 87       	std	Y+8, r25	; 0x08
    2584:	a9 87       	std	Y+9, r26	; 0x09
    2586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <LCD_4bit_sendCharAtPosition+0xea>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <LCD_4bit_sendCharAtPosition+0x168>
	else if (__tmp > 65535)
    25aa:	6f 81       	ldd	r22, Y+7	; 0x07
    25ac:	78 85       	ldd	r23, Y+8	; 0x08
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <LCD_4bit_sendCharAtPosition+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <LCD_4bit_sendCharAtPosition+0x14a>
    25ec:	80 e9       	ldi	r24, 0x90	; 144
    25ee:	91 e0       	ldi	r25, 0x01	; 1
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_4bit_sendCharAtPosition+0x138>
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <LCD_4bit_sendCharAtPosition+0x12c>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <LCD_4bit_sendCharAtPosition+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_4bit_sendCharAtPosition+0x174>
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);

	}

	return error_status;
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    263e:	64 96       	adiw	r28, 0x14	; 20
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <LCD_4bit_sendString>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendString(const lcd_4bit_t *lcd, uint8 * str)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	00 d0       	rcall	.+0      	; 0x2656 <LCD_4bit_sendString+0x6>
    2656:	00 d0       	rcall	.+0      	; 0x2658 <LCD_4bit_sendString+0x8>
    2658:	0f 92       	push	r0
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	9b 83       	std	Y+3, r25	; 0x03
    2660:	8a 83       	std	Y+2, r24	; 0x02
    2662:	7d 83       	std	Y+5, r23	; 0x05
    2664:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	21 f0       	breq	.+8      	; 0x267a <LCD_4bit_sendString+0x2a>
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	79 f4       	brne	.+30     	; 0x2698 <LCD_4bit_sendString+0x48>
	{
		error_status = E_NOT_OK;
    267a:	19 82       	std	Y+1, r1	; 0x01
    267c:	12 c0       	rjmp	.+36     	; 0x26a2 <LCD_4bit_sendString+0x52>
	}
	else
	{
		while(*str)
		{
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
    267e:	ec 81       	ldd	r30, Y+4	; 0x04
    2680:	fd 81       	ldd	r31, Y+5	; 0x05
    2682:	20 81       	ld	r18, Z
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	9d 83       	std	Y+5, r25	; 0x05
    268c:	8c 83       	std	Y+4, r24	; 0x04
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	62 2f       	mov	r22, r18
    2694:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_4bit_sendChar>
	{
		error_status = E_NOT_OK;
	}
	else
	{
		while(*str)
    2698:	ec 81       	ldd	r30, Y+4	; 0x04
    269a:	fd 81       	ldd	r31, Y+5	; 0x05
    269c:	80 81       	ld	r24, Z
    269e:	88 23       	and	r24, r24
    26a0:	71 f7       	brne	.-36     	; 0x267e <LCD_4bit_sendString+0x2e>
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <LCD_4bit_sendStringAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendStringAtPosition(const lcd_4bit_t *lcd, uint8 row, uint8 col, uint8 * str )
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	27 97       	sbiw	r28, 0x07	; 7
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	9b 83       	std	Y+3, r25	; 0x03
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	6c 83       	std	Y+4, r22	; 0x04
    26ce:	4d 83       	std	Y+5, r20	; 0x05
    26d0:	3f 83       	std	Y+7, r19	; 0x07
    26d2:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnType error_status = E_OK;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	21 f0       	breq	.+8      	; 0x26e8 <LCD_4bit_sendStringAtPosition+0x34>
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	9f 81       	ldd	r25, Y+7	; 0x07
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	11 f4       	brne	.+4      	; 0x26ec <LCD_4bit_sendStringAtPosition+0x38>
	{
		error_status = E_NOT_OK;
    26e8:	19 82       	std	Y+1, r1	; 0x01
    26ea:	1d c0       	rjmp	.+58     	; 0x2726 <LCD_4bit_sendStringAtPosition+0x72>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_4bit_setCursorLocation(lcd, row, col);
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	6c 81       	ldd	r22, Y+4	; 0x04
    26f2:	4d 81       	ldd	r20, Y+5	; 0x05
    26f4:	0e 94 b4 19 	call	0x3368	; 0x3368 <LCD_4bit_setCursorLocation>
    26f8:	98 2f       	mov	r25, r24
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	89 23       	and	r24, r25
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	0d c0       	rjmp	.+26     	; 0x271c <LCD_4bit_sendStringAtPosition+0x68>
		while(*str)
		{
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
    2702:	ee 81       	ldd	r30, Y+6	; 0x06
    2704:	ff 81       	ldd	r31, Y+7	; 0x07
    2706:	20 81       	ld	r18, Z
    2708:	8e 81       	ldd	r24, Y+6	; 0x06
    270a:	9f 81       	ldd	r25, Y+7	; 0x07
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	9f 83       	std	Y+7, r25	; 0x07
    2710:	8e 83       	std	Y+6, r24	; 0x06
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	62 2f       	mov	r22, r18
    2718:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_4bit_sendChar>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_4bit_setCursorLocation(lcd, row, col);
		while(*str)
    271c:	ee 81       	ldd	r30, Y+6	; 0x06
    271e:	ff 81       	ldd	r31, Y+7	; 0x07
    2720:	80 81       	ld	r24, Z
    2722:	88 23       	and	r24, r24
    2724:	71 f7       	brne	.-36     	; 0x2702 <LCD_4bit_sendStringAtPosition+0x4e>
			LCD_4bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    2726:	89 81       	ldd	r24, Y+1	; 0x01
}
    2728:	27 96       	adiw	r28, 0x07	; 7
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_4bit_sendCustomCharAtPosition>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendCustomCharAtPosition(const lcd_4bit_t *lcd, uint8 * char_arr, uint8 row,\
		uint8 col, uint8 mem_position)
{
    273a:	0f 93       	push	r16
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	29 97       	sbiw	r28, 0x09	; 9
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
    2754:	7e 83       	std	Y+6, r23	; 0x06
    2756:	6d 83       	std	Y+5, r22	; 0x05
    2758:	4f 83       	std	Y+7, r20	; 0x07
    275a:	28 87       	std	Y+8, r18	; 0x08
    275c:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnType error_status = E_OK;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd)
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	11 f4       	brne	.+4      	; 0x276e <LCD_4bit_sendCustomCharAtPosition+0x34>
	{
		error_status = E_NOT_OK;
    276a:	1a 82       	std	Y+2, r1	; 0x02
    276c:	36 c0       	rjmp	.+108    	; 0x27da <LCD_4bit_sendCustomCharAtPosition+0xa0>
	}
	else
	{
		uint8 new_char_counter;
		/* make AC point to the CGRAM memory position point to where the character will be stored */
		error_status = LCD_4bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	88 2f       	mov	r24, r24
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	08 96       	adiw	r24, 0x08	; 8
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	28 2f       	mov	r18, r24
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	9c 81       	ldd	r25, Y+4	; 0x04
    2788:	62 2f       	mov	r22, r18
    278a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    278e:	8a 83       	std	Y+2, r24	; 0x02

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    2790:	19 82       	std	Y+1, r1	; 0x01
    2792:	15 c0       	rjmp	.+42     	; 0x27be <LCD_4bit_sendCustomCharAtPosition+0x84>
		{
			error_status &= LCD_4bit_sendChar(lcd, char_arr[new_char_counter]);
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	8d 81       	ldd	r24, Y+5	; 0x05
    279c:	9e 81       	ldd	r25, Y+6	; 0x06
    279e:	fc 01       	movw	r30, r24
    27a0:	e2 0f       	add	r30, r18
    27a2:	f3 1f       	adc	r31, r19
    27a4:	20 81       	ld	r18, Z
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	62 2f       	mov	r22, r18
    27ac:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_4bit_sendChar>
    27b0:	98 2f       	mov	r25, r24
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	89 23       	and	r24, r25
    27b6:	8a 83       	std	Y+2, r24	; 0x02
		error_status = LCD_4bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	8f 5f       	subi	r24, 0xFF	; 255
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	88 30       	cpi	r24, 0x08	; 8
    27c2:	40 f3       	brcs	.-48     	; 0x2794 <LCD_4bit_sendCustomCharAtPosition+0x5a>
		{
			error_status &= LCD_4bit_sendChar(lcd, char_arr[new_char_counter]);
		}
		/* return to DDRAM and send the new char */
		error_status &= LCD_4bit_sendCharAtPosition(lcd, row, col, mem_position);
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	48 85       	ldd	r20, Y+8	; 0x08
    27cc:	29 85       	ldd	r18, Y+9	; 0x09
    27ce:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_4bit_sendCharAtPosition>
    27d2:	98 2f       	mov	r25, r24
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	89 23       	and	r24, r25
    27d8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return error_status;
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    27dc:	29 96       	adiw	r28, 0x09	; 9
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	0f 91       	pop	r16
    27ee:	08 95       	ret

000027f0 <LCD_4bit_sendNum>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_sendNum(const lcd_4bit_t *lcd, uint32 num)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	63 97       	sbiw	r28, 0x13	; 19
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	9f 87       	std	Y+15, r25	; 0x0f
    2806:	8e 87       	std	Y+14, r24	; 0x0e
    2808:	48 8b       	std	Y+16, r20	; 0x10
    280a:	59 8b       	std	Y+17, r21	; 0x11
    280c:	6a 8b       	std	Y+18, r22	; 0x12
    280e:	7b 8b       	std	Y+19, r23	; 0x13
	STD_ReturnType error_status = E_OK;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2814:	8e 85       	ldd	r24, Y+14	; 0x0e
    2816:	9f 85       	ldd	r25, Y+15	; 0x0f
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	11 f4       	brne	.+4      	; 0x2820 <LCD_4bit_sendNum+0x30>
	{
		error_status = E_NOT_OK;
    281c:	19 82       	std	Y+1, r1	; 0x01
    281e:	19 c0       	rjmp	.+50     	; 0x2852 <LCD_4bit_sendNum+0x62>
	}
	else
	{
		uint8 str[12];											/* to store the converted number */
		error_status  = numToStr(num, str);						/* call the function to convert the number */
    2820:	88 89       	ldd	r24, Y+16	; 0x10
    2822:	99 89       	ldd	r25, Y+17	; 0x11
    2824:	aa 89       	ldd	r26, Y+18	; 0x12
    2826:	bb 89       	ldd	r27, Y+19	; 0x13
    2828:	9e 01       	movw	r18, r28
    282a:	2e 5f       	subi	r18, 0xFE	; 254
    282c:	3f 4f       	sbci	r19, 0xFF	; 255
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	a9 01       	movw	r20, r18
    2834:	0e 94 cb 1c 	call	0x3996	; 0x3996 <numToStr>
    2838:	89 83       	std	Y+1, r24	; 0x01
		error_status &= LCD_4bit_sendString(lcd, str);			/* send the string to the LCD */
    283a:	8e 85       	ldd	r24, Y+14	; 0x0e
    283c:	9f 85       	ldd	r25, Y+15	; 0x0f
    283e:	9e 01       	movw	r18, r28
    2840:	2e 5f       	subi	r18, 0xFE	; 254
    2842:	3f 4f       	sbci	r19, 0xFF	; 255
    2844:	b9 01       	movw	r22, r18
    2846:	0e 94 28 13 	call	0x2650	; 0x2650 <LCD_4bit_sendString>
    284a:	98 2f       	mov	r25, r24
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	89 23       	and	r24, r25
    2850:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    2852:	89 81       	ldd	r24, Y+1	; 0x01
}
    2854:	63 96       	adiw	r28, 0x13	; 19
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <LCD_8bit_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_init(const lcd_8bit_t *lcd)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	e8 97       	sbiw	r28, 0x38	; 56
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	98 af       	std	Y+56, r25	; 0x38
    287c:	8f ab       	std	Y+55, r24	; 0x37
	STD_ReturnType error_status = E_OK;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	8e ab       	std	Y+54, r24	; 0x36
	if(NULL == lcd)
    2882:	8f a9       	ldd	r24, Y+55	; 0x37
    2884:	98 ad       	ldd	r25, Y+56	; 0x38
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	11 f4       	brne	.+4      	; 0x288e <LCD_8bit_init+0x28>
	{
		error_status = E_NOT_OK;
    288a:	1e aa       	std	Y+54, r1	; 0x36
    288c:	01 c2       	rjmp	.+1026   	; 0x2c90 <LCD_8bit_init+0x42a>
	}
	else
	{
		uint8 data_pin_counter; 										/* To loop through the 8 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
    288e:	8f a9       	ldd	r24, Y+55	; 0x37
    2890:	98 ad       	ldd	r25, Y+56	; 0x38
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    2898:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */
    289a:	8f a9       	ldd	r24, Y+55	; 0x37
    289c:	98 ad       	ldd	r25, Y+56	; 0x38
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    28a6:	98 2f       	mov	r25, r24
    28a8:	8e a9       	ldd	r24, Y+54	; 0x36
    28aa:	89 23       	and	r24, r25
    28ac:	8e ab       	std	Y+54, r24	; 0x36

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    28ae:	1d aa       	std	Y+53, r1	; 0x35
    28b0:	14 c0       	rjmp	.+40     	; 0x28da <LCD_8bit_init+0x74>
		{
			/* make all 8 data pins output pins */
			error_status &= GPIO_pinDirectionInit(&(lcd->data_pin[data_pin_counter]), GPIO_OUTPUT);
    28b2:	8f a9       	ldd	r24, Y+55	; 0x37
    28b4:	98 ad       	ldd	r25, Y+56	; 0x38
    28b6:	9c 01       	movw	r18, r24
    28b8:	2e 5f       	subi	r18, 0xFE	; 254
    28ba:	3f 4f       	sbci	r19, 0xFF	; 255
    28bc:	8d a9       	ldd	r24, Y+53	; 0x35
    28be:	88 2f       	mov	r24, r24
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	61 e0       	ldi	r22, 0x01	; 1
    28c8:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    28cc:	98 2f       	mov	r25, r24
    28ce:	8e a9       	ldd	r24, Y+54	; 0x36
    28d0:	89 23       	and	r24, r25
    28d2:	8e ab       	std	Y+54, r24	; 0x36
	{
		uint8 data_pin_counter; 										/* To loop through the 8 data pins */
		error_status = GPIO_pinDirectionInit(&(lcd->rs), GPIO_OUTPUT);  /* make RS output pin*/
		error_status &= GPIO_pinDirectionInit(&(lcd->en), GPIO_OUTPUT); /* make EN output pin */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    28d4:	8d a9       	ldd	r24, Y+53	; 0x35
    28d6:	8f 5f       	subi	r24, 0xFF	; 255
    28d8:	8d ab       	std	Y+53, r24	; 0x35
    28da:	8d a9       	ldd	r24, Y+53	; 0x35
    28dc:	88 30       	cpi	r24, 0x08	; 8
    28de:	48 f3       	brcs	.-46     	; 0x28b2 <LCD_8bit_init+0x4c>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 ea       	ldi	r26, 0xA0	; 160
    28e6:	b1 e4       	ldi	r27, 0x41	; 65
    28e8:	89 ab       	std	Y+49, r24	; 0x31
    28ea:	9a ab       	std	Y+50, r25	; 0x32
    28ec:	ab ab       	std	Y+51, r26	; 0x33
    28ee:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a e7       	ldi	r20, 0x7A	; 122
    28fe:	55 e4       	ldi	r21, 0x45	; 69
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8d a7       	std	Y+45, r24	; 0x2d
    290a:	9e a7       	std	Y+46, r25	; 0x2e
    290c:	af a7       	std	Y+47, r26	; 0x2f
    290e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2910:	6d a5       	ldd	r22, Y+45	; 0x2d
    2912:	7e a5       	ldd	r23, Y+46	; 0x2e
    2914:	8f a5       	ldd	r24, Y+47	; 0x2f
    2916:	98 a9       	ldd	r25, Y+48	; 0x30
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	2c f4       	brge	.+10     	; 0x2932 <LCD_8bit_init+0xcc>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	9c a7       	std	Y+44, r25	; 0x2c
    292e:	8b a7       	std	Y+43, r24	; 0x2b
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <LCD_8bit_init+0x14a>
	else if (__tmp > 65535)
    2932:	6d a5       	ldd	r22, Y+45	; 0x2d
    2934:	7e a5       	ldd	r23, Y+46	; 0x2e
    2936:	8f a5       	ldd	r24, Y+47	; 0x2f
    2938:	98 a9       	ldd	r25, Y+48	; 0x30
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	4c f5       	brge	.+82     	; 0x299c <LCD_8bit_init+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	69 a9       	ldd	r22, Y+49	; 0x31
    294c:	7a a9       	ldd	r23, Y+50	; 0x32
    294e:	8b a9       	ldd	r24, Y+51	; 0x33
    2950:	9c a9       	ldd	r25, Y+52	; 0x34
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9c a7       	std	Y+44, r25	; 0x2c
    2970:	8b a7       	std	Y+43, r24	; 0x2b
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <LCD_8bit_init+0x12c>
    2974:	80 e9       	ldi	r24, 0x90	; 144
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	9a a7       	std	Y+42, r25	; 0x2a
    297a:	89 a7       	std	Y+41, r24	; 0x29
    297c:	89 a5       	ldd	r24, Y+41	; 0x29
    297e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_8bit_init+0x11a>
    2984:	9a a7       	std	Y+42, r25	; 0x2a
    2986:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8b a5       	ldd	r24, Y+43	; 0x2b
    298a:	9c a5       	ldd	r25, Y+44	; 0x2c
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	9c a7       	std	Y+44, r25	; 0x2c
    2990:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8b a5       	ldd	r24, Y+43	; 0x2b
    2994:	9c a5       	ldd	r25, Y+44	; 0x2c
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <LCD_8bit_init+0x10e>
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <LCD_8bit_init+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	6d a5       	ldd	r22, Y+45	; 0x2d
    299e:	7e a5       	ldd	r23, Y+46	; 0x2e
    29a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a2:	98 a9       	ldd	r25, Y+48	; 0x30
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9c a7       	std	Y+44, r25	; 0x2c
    29ae:	8b a7       	std	Y+43, r24	; 0x2b
    29b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b4:	98 a7       	std	Y+40, r25	; 0x28
    29b6:	8f a3       	std	Y+39, r24	; 0x27
    29b8:	8f a1       	ldd	r24, Y+39	; 0x27
    29ba:	98 a5       	ldd	r25, Y+40	; 0x28
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <LCD_8bit_init+0x156>
    29c0:	98 a7       	std	Y+40, r25	; 0x28
    29c2:	8f a3       	std	Y+39, r24	; 0x27
		}

		/* generate a delay of 20 msec at  startup*/
		_delay_ms(20);

		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE); /* set 8 bit mode 2 line */
    29c4:	8f a9       	ldd	r24, Y+55	; 0x37
    29c6:	98 ad       	ldd	r25, Y+56	; 0x38
    29c8:	68 e3       	ldi	r22, 0x38	; 56
    29ca:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    29ce:	98 2f       	mov	r25, r24
    29d0:	8e a9       	ldd	r24, Y+54	; 0x36
    29d2:	89 23       	and	r24, r25
    29d4:	8e ab       	std	Y+54, r24	; 0x36
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a0 ea       	ldi	r26, 0xA0	; 160
    29dc:	b0 e4       	ldi	r27, 0x40	; 64
    29de:	8b a3       	std	Y+35, r24	; 0x23
    29e0:	9c a3       	std	Y+36, r25	; 0x24
    29e2:	ad a3       	std	Y+37, r26	; 0x25
    29e4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	6b a1       	ldd	r22, Y+35	; 0x23
    29e8:	7c a1       	ldd	r23, Y+36	; 0x24
    29ea:	8d a1       	ldd	r24, Y+37	; 0x25
    29ec:	9e a1       	ldd	r25, Y+38	; 0x26
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a e7       	ldi	r20, 0x7A	; 122
    29f4:	55 e4       	ldi	r21, 0x45	; 69
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2a00:	98 a3       	std	Y+32, r25	; 0x20
    2a02:	a9 a3       	std	Y+33, r26	; 0x21
    2a04:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2a06:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a08:	78 a1       	ldd	r23, Y+32	; 0x20
    2a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	2c f4       	brge	.+10     	; 0x2a28 <LCD_8bit_init+0x1c2>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9e 8f       	std	Y+30, r25	; 0x1e
    2a24:	8d 8f       	std	Y+29, r24	; 0x1d
    2a26:	3f c0       	rjmp	.+126    	; 0x2aa6 <LCD_8bit_init+0x240>
	else if (__tmp > 65535)
    2a28:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a2a:	78 a1       	ldd	r23, Y+32	; 0x20
    2a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	3f ef       	ldi	r19, 0xFF	; 255
    2a34:	4f e7       	ldi	r20, 0x7F	; 127
    2a36:	57 e4       	ldi	r21, 0x47	; 71
    2a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a3c:	18 16       	cp	r1, r24
    2a3e:	4c f5       	brge	.+82     	; 0x2a92 <LCD_8bit_init+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a40:	6b a1       	ldd	r22, Y+35	; 0x23
    2a42:	7c a1       	ldd	r23, Y+36	; 0x24
    2a44:	8d a1       	ldd	r24, Y+37	; 0x25
    2a46:	9e a1       	ldd	r25, Y+38	; 0x26
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	51 e4       	ldi	r21, 0x41	; 65
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e 8f       	std	Y+30, r25	; 0x1e
    2a66:	8d 8f       	std	Y+29, r24	; 0x1d
    2a68:	0f c0       	rjmp	.+30     	; 0x2a88 <LCD_8bit_init+0x222>
    2a6a:	80 e9       	ldi	r24, 0x90	; 144
    2a6c:	91 e0       	ldi	r25, 0x01	; 1
    2a6e:	9c 8f       	std	Y+28, r25	; 0x1c
    2a70:	8b 8f       	std	Y+27, r24	; 0x1b
    2a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_8bit_init+0x210>
    2a7a:	9c 8f       	std	Y+28, r25	; 0x1c
    2a7c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	9e 8f       	std	Y+30, r25	; 0x1e
    2a86:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	69 f7       	brne	.-38     	; 0x2a6a <LCD_8bit_init+0x204>
    2a90:	14 c0       	rjmp	.+40     	; 0x2aba <LCD_8bit_init+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a94:	78 a1       	ldd	r23, Y+32	; 0x20
    2a96:	89 a1       	ldd	r24, Y+33	; 0x21
    2a98:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa4:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aaa:	9a 8f       	std	Y+26, r25	; 0x1a
    2aac:	89 8f       	std	Y+25, r24	; 0x19
    2aae:	89 8d       	ldd	r24, Y+25	; 0x19
    2ab0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <LCD_8bit_init+0x24c>
    2ab6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab8:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE);
    2aba:	8f a9       	ldd	r24, Y+55	; 0x37
    2abc:	98 ad       	ldd	r25, Y+56	; 0x38
    2abe:	68 e3       	ldi	r22, 0x38	; 56
    2ac0:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    2ac4:	98 2f       	mov	r25, r24
    2ac6:	8e a9       	ldd	r24, Y+54	; 0x36
    2ac8:	89 23       	and	r24, r25
    2aca:	8e ab       	std	Y+54, r24	; 0x36
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a6 e1       	ldi	r26, 0x16	; 22
    2ad2:	b3 e4       	ldi	r27, 0x43	; 67
    2ad4:	8d 8b       	std	Y+21, r24	; 0x15
    2ad6:	9e 8b       	std	Y+22, r25	; 0x16
    2ad8:	af 8b       	std	Y+23, r26	; 0x17
    2ada:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2adc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ade:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae4:	2b ea       	ldi	r18, 0xAB	; 171
    2ae6:	3a ea       	ldi	r19, 0xAA	; 170
    2ae8:	4a ea       	ldi	r20, 0xAA	; 170
    2aea:	50 e4       	ldi	r21, 0x40	; 64
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	89 8b       	std	Y+17, r24	; 0x11
    2af6:	9a 8b       	std	Y+18, r25	; 0x12
    2af8:	ab 8b       	std	Y+19, r26	; 0x13
    2afa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2afc:	69 89       	ldd	r22, Y+17	; 0x11
    2afe:	7a 89       	ldd	r23, Y+18	; 0x12
    2b00:	8b 89       	ldd	r24, Y+19	; 0x13
    2b02:	9c 89       	ldd	r25, Y+20	; 0x14
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e8       	ldi	r20, 0x80	; 128
    2b0a:	5f e3       	ldi	r21, 0x3F	; 63
    2b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b10:	88 23       	and	r24, r24
    2b12:	1c f4       	brge	.+6      	; 0x2b1a <LCD_8bit_init+0x2b4>
		__ticks = 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	88 8b       	std	Y+16, r24	; 0x10
    2b18:	91 c0       	rjmp	.+290    	; 0x2c3c <LCD_8bit_init+0x3d6>
	else if (__tmp > 255)
    2b1a:	69 89       	ldd	r22, Y+17	; 0x11
    2b1c:	7a 89       	ldd	r23, Y+18	; 0x12
    2b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b20:	9c 89       	ldd	r25, Y+20	; 0x14
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	53 e4       	ldi	r21, 0x43	; 67
    2b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	0c f0       	brlt	.+2      	; 0x2b34 <LCD_8bit_init+0x2ce>
    2b32:	7b c0       	rjmp	.+246    	; 0x2c2a <LCD_8bit_init+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    2b34:	6d 89       	ldd	r22, Y+21	; 0x15
    2b36:	7e 89       	ldd	r23, Y+22	; 0x16
    2b38:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a e7       	ldi	r20, 0x7A	; 122
    2b42:	54 e4       	ldi	r21, 0x44	; 68
    2b44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	8c 87       	std	Y+12, r24	; 0x0c
    2b4e:	9d 87       	std	Y+13, r25	; 0x0d
    2b50:	ae 87       	std	Y+14, r26	; 0x0e
    2b52:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b56:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b58:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a e7       	ldi	r20, 0x7A	; 122
    2b62:	55 e4       	ldi	r21, 0x45	; 69
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	88 87       	std	Y+8, r24	; 0x08
    2b6e:	99 87       	std	Y+9, r25	; 0x09
    2b70:	aa 87       	std	Y+10, r26	; 0x0a
    2b72:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b74:	68 85       	ldd	r22, Y+8	; 0x08
    2b76:	79 85       	ldd	r23, Y+9	; 0x09
    2b78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <LCD_8bit_init+0x330>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9f 83       	std	Y+7, r25	; 0x07
    2b92:	8e 83       	std	Y+6, r24	; 0x06
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <LCD_8bit_init+0x3ae>
	else if (__tmp > 65535)
    2b96:	68 85       	ldd	r22, Y+8	; 0x08
    2b98:	79 85       	ldd	r23, Y+9	; 0x09
    2b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <LCD_8bit_init+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9f 83       	std	Y+7, r25	; 0x07
    2bd4:	8e 83       	std	Y+6, r24	; 0x06
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <LCD_8bit_init+0x390>
    2bd8:	80 e9       	ldi	r24, 0x90	; 144
    2bda:	91 e0       	ldi	r25, 0x01	; 1
    2bdc:	9d 83       	std	Y+5, r25	; 0x05
    2bde:	8c 83       	std	Y+4, r24	; 0x04
    2be0:	8c 81       	ldd	r24, Y+4	; 0x04
    2be2:	9d 81       	ldd	r25, Y+5	; 0x05
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_8bit_init+0x37e>
    2be8:	9d 83       	std	Y+5, r25	; 0x05
    2bea:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8e 81       	ldd	r24, Y+6	; 0x06
    2bee:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9f 83       	std	Y+7, r25	; 0x07
    2bf4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <LCD_8bit_init+0x372>
    2bfe:	24 c0       	rjmp	.+72     	; 0x2c48 <LCD_8bit_init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	68 85       	ldd	r22, Y+8	; 0x08
    2c02:	79 85       	ldd	r23, Y+9	; 0x09
    2c04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c06:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9f 83       	std	Y+7, r25	; 0x07
    2c12:	8e 83       	std	Y+6, r24	; 0x06
    2c14:	8e 81       	ldd	r24, Y+6	; 0x06
    2c16:	9f 81       	ldd	r25, Y+7	; 0x07
    2c18:	9b 83       	std	Y+3, r25	; 0x03
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <LCD_8bit_init+0x3ba>
    2c24:	9b 83       	std	Y+3, r25	; 0x03
    2c26:	8a 83       	std	Y+2, r24	; 0x02
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <LCD_8bit_init+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c2a:	69 89       	ldd	r22, Y+17	; 0x11
    2c2c:	7a 89       	ldd	r23, Y+18	; 0x12
    2c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c30:	9c 89       	ldd	r25, Y+20	; 0x14
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	88 8b       	std	Y+16, r24	; 0x10
    2c3c:	88 89       	ldd	r24, Y+16	; 0x10
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	8a 95       	dec	r24
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_8bit_init+0x3dc>
    2c46:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_8BIT_MODE_2_LINE);
    2c48:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c4c:	68 e3       	ldi	r22, 0x38	; 56
    2c4e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    2c52:	98 2f       	mov	r25, r24
    2c54:	8e a9       	ldd	r24, Y+54	; 0x36
    2c56:	89 23       	and	r24, r25
    2c58:	8e ab       	std	Y+54, r24	; 0x36

		error_status &= LCD_8bit_sendCommand(lcd, _LCD_CLEAR);			  /* clear LCD */
    2c5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    2c64:	98 2f       	mov	r25, r24
    2c66:	8e a9       	ldd	r24, Y+54	; 0x36
    2c68:	89 23       	and	r24, r25
    2c6a:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_ENTRY_MODE);		  /* increment cursor mode */
    2c6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c70:	66 e0       	ldi	r22, 0x06	; 6
    2c72:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    2c76:	98 2f       	mov	r25, r24
    2c78:	8e a9       	ldd	r24, Y+54	; 0x36
    2c7a:	89 23       	and	r24, r25
    2c7c:	8e ab       	std	Y+54, r24	; 0x36
		error_status &= LCD_8bit_sendCommand(lcd, _LCD_CURSOR_OFF_DISPLAY_ON);
    2c7e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c80:	98 ad       	ldd	r25, Y+56	; 0x38
    2c82:	6c e0       	ldi	r22, 0x0C	; 12
    2c84:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    2c88:	98 2f       	mov	r25, r24
    2c8a:	8e a9       	ldd	r24, Y+54	; 0x36
    2c8c:	89 23       	and	r24, r25
    2c8e:	8e ab       	std	Y+54, r24	; 0x36
	}

	return error_status;
    2c90:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2c92:	e8 96       	adiw	r28, 0x38	; 56
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <LCD_8bit_clear>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_clear(const lcd_8bit_t *lcd)
{
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	00 d0       	rcall	.+0      	; 0x2caa <LCD_8bit_clear+0x6>
    2caa:	0f 92       	push	r0
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
    2cb0:	9b 83       	std	Y+3, r25	; 0x03
    2cb2:	8a 83       	std	Y+2, r24	; 0x02
	STD_ReturnType error_status = E_OK;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	11 f4       	brne	.+4      	; 0x2cc4 <LCD_8bit_clear+0x20>
	{
		error_status = E_NOT_OK;
    2cc0:	19 82       	std	Y+1, r1	; 0x01
    2cc2:	05 c0       	rjmp	.+10     	; 0x2cce <LCD_8bit_clear+0x2a>
	}
	else
	{
		LCD_8bit_sendCommand(lcd, _LCD_CLEAR);
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	61 e0       	ldi	r22, 0x01	; 1
    2cca:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
	}
	return error_status;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <LCD_8bit_sendCommand>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCommand(const lcd_8bit_t *lcd, uint8 command)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	63 97       	sbiw	r28, 0x13	; 19
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	9a 8b       	std	Y+18, r25	; 0x12
    2cf2:	89 8b       	std	Y+17, r24	; 0x11
    2cf4:	6b 8b       	std	Y+19, r22	; 0x13
	STD_ReturnType error_status = E_OK;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	88 8b       	std	Y+16, r24	; 0x10
	if(NULL == lcd)
    2cfa:	89 89       	ldd	r24, Y+17	; 0x11
    2cfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	11 f4       	brne	.+4      	; 0x2d06 <LCD_8bit_sendCommand+0x2a>
	{
		error_status = E_NOT_OK;
    2d02:	18 8a       	std	Y+16, r1	; 0x10
    2d04:	a9 c0       	rjmp	.+338    	; 0x2e58 <LCD_8bit_sendCommand+0x17c>
	}
	else
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
    2d06:	89 89       	ldd	r24, Y+17	; 0x11
    2d08:	9a 89       	ldd	r25, Y+18	; 0x12
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    2d10:	98 2f       	mov	r25, r24
    2d12:	88 89       	ldd	r24, Y+16	; 0x10
    2d14:	89 23       	and	r24, r25
    2d16:	88 8b       	std	Y+16, r24	; 0x10
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2d18:	1f 86       	std	Y+15, r1	; 0x0f
    2d1a:	25 c0       	rjmp	.+74     	; 0x2d66 <LCD_8bit_sendCommand+0x8a>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(command, data_pin_counter));
    2d1c:	89 89       	ldd	r24, Y+17	; 0x11
    2d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d20:	9c 01       	movw	r18, r24
    2d22:	2e 5f       	subi	r18, 0xFE	; 254
    2d24:	3f 4f       	sbci	r19, 0xFF	; 255
    2d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d28:	88 2f       	mov	r24, r24
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a9 01       	movw	r20, r18
    2d2e:	48 0f       	add	r20, r24
    2d30:	59 1f       	adc	r21, r25
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	b9 01       	movw	r22, r18
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <LCD_8bit_sendCommand+0x6a>
    2d42:	75 95       	asr	r23
    2d44:	67 95       	ror	r22
    2d46:	8a 95       	dec	r24
    2d48:	e2 f7       	brpl	.-8      	; 0x2d42 <LCD_8bit_sendCommand+0x66>
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	21 70       	andi	r18, 0x01	; 1
    2d50:	ca 01       	movw	r24, r20
    2d52:	62 2f       	mov	r22, r18
    2d54:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    2d58:	98 2f       	mov	r25, r24
    2d5a:	88 89       	ldd	r24, Y+16	; 0x10
    2d5c:	89 23       	and	r24, r25
    2d5e:	88 8b       	std	Y+16, r24	; 0x10
	{
		/* Write 0 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_LOW);
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d62:	8f 5f       	subi	r24, 0xFF	; 255
    2d64:	8f 87       	std	Y+15, r24	; 0x0f
    2d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d68:	88 30       	cpi	r24, 0x08	; 8
    2d6a:	c0 f2       	brcs	.-80     	; 0x2d1c <LCD_8bit_sendCommand+0x40>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(command, data_pin_counter));
		}
		LCD_8bit_genEnablePulse(lcd);
    2d6c:	89 89       	ldd	r24, Y+17	; 0x11
    2d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d70:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <LCD_8bit_genEnablePulse>
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	a0 e0       	ldi	r26, 0x00	; 0
    2d7a:	b0 e4       	ldi	r27, 0x40	; 64
    2d7c:	8b 87       	std	Y+11, r24	; 0x0b
    2d7e:	9c 87       	std	Y+12, r25	; 0x0c
    2d80:	ad 87       	std	Y+13, r26	; 0x0d
    2d82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4a e7       	ldi	r20, 0x7A	; 122
    2d92:	55 e4       	ldi	r21, 0x45	; 69
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	8f 83       	std	Y+7, r24	; 0x07
    2d9e:	98 87       	std	Y+8, r25	; 0x08
    2da0:	a9 87       	std	Y+9, r26	; 0x09
    2da2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da4:	6f 81       	ldd	r22, Y+7	; 0x07
    2da6:	78 85       	ldd	r23, Y+8	; 0x08
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e8       	ldi	r20, 0x80	; 128
    2db2:	5f e3       	ldi	r21, 0x3F	; 63
    2db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	2c f4       	brge	.+10     	; 0x2dc6 <LCD_8bit_sendCommand+0xea>
		__ticks = 1;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
    2dc4:	3f c0       	rjmp	.+126    	; 0x2e44 <LCD_8bit_sendCommand+0x168>
	else if (__tmp > 65535)
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	3f ef       	ldi	r19, 0xFF	; 255
    2dd2:	4f e7       	ldi	r20, 0x7F	; 127
    2dd4:	57 e4       	ldi	r21, 0x47	; 71
    2dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dda:	18 16       	cp	r1, r24
    2ddc:	4c f5       	brge	.+82     	; 0x2e30 <LCD_8bit_sendCommand+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <LCD_8bit_sendCommand+0x14a>
    2e08:	80 e9       	ldi	r24, 0x90	; 144
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_8bit_sendCommand+0x138>
    2e18:	9c 83       	std	Y+4, r25	; 0x04
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	69 f7       	brne	.-38     	; 0x2e08 <LCD_8bit_sendCommand+0x12c>
    2e2e:	14 c0       	rjmp	.+40     	; 0x2e58 <LCD_8bit_sendCommand+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e30:	6f 81       	ldd	r22, Y+7	; 0x07
    2e32:	78 85       	ldd	r23, Y+8	; 0x08
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <LCD_8bit_sendCommand+0x174>
    2e54:	9a 83       	std	Y+2, r25	; 0x02
    2e56:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}

	return error_status;
    2e58:	88 89       	ldd	r24, Y+16	; 0x10
}
    2e5a:	63 96       	adiw	r28, 0x13	; 19
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <LCD_8bit_sendChar>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendChar(const lcd_8bit_t *lcd, uint8 _char)
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	63 97       	sbiw	r28, 0x13	; 19
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	9a 8b       	std	Y+18, r25	; 0x12
    2e82:	89 8b       	std	Y+17, r24	; 0x11
    2e84:	6b 8b       	std	Y+19, r22	; 0x13
	STD_ReturnType error_status = E_OK;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	88 8b       	std	Y+16, r24	; 0x10
	if(NULL == lcd)
    2e8a:	89 89       	ldd	r24, Y+17	; 0x11
    2e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	11 f4       	brne	.+4      	; 0x2e96 <LCD_8bit_sendChar+0x2a>
	{
		error_status = E_NOT_OK;
    2e92:	18 8a       	std	Y+16, r1	; 0x10
    2e94:	a9 c0       	rjmp	.+338    	; 0x2fe8 <LCD_8bit_sendChar+0x17c>
	}
	else
	{
		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    2e96:	89 89       	ldd	r24, Y+17	; 0x11
    2e98:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9a:	61 e0       	ldi	r22, 0x01	; 1
    2e9c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    2ea0:	98 2f       	mov	r25, r24
    2ea2:	88 89       	ldd	r24, Y+16	; 0x10
    2ea4:	89 23       	and	r24, r25
    2ea6:	88 8b       	std	Y+16, r24	; 0x10
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2ea8:	1f 86       	std	Y+15, r1	; 0x0f
    2eaa:	25 c0       	rjmp	.+74     	; 0x2ef6 <LCD_8bit_sendChar+0x8a>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(_char, data_pin_counter));
    2eac:	89 89       	ldd	r24, Y+17	; 0x11
    2eae:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb0:	9c 01       	movw	r18, r24
    2eb2:	2e 5f       	subi	r18, 0xFE	; 254
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eb8:	88 2f       	mov	r24, r24
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a9 01       	movw	r20, r18
    2ebe:	48 0f       	add	r20, r24
    2ec0:	59 1f       	adc	r21, r25
    2ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eca:	88 2f       	mov	r24, r24
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	b9 01       	movw	r22, r18
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <LCD_8bit_sendChar+0x6a>
    2ed2:	75 95       	asr	r23
    2ed4:	67 95       	ror	r22
    2ed6:	8a 95       	dec	r24
    2ed8:	e2 f7       	brpl	.-8      	; 0x2ed2 <LCD_8bit_sendChar+0x66>
    2eda:	cb 01       	movw	r24, r22
    2edc:	28 2f       	mov	r18, r24
    2ede:	21 70       	andi	r18, 0x01	; 1
    2ee0:	ca 01       	movw	r24, r20
    2ee2:	62 2f       	mov	r22, r18
    2ee4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    2ee8:	98 2f       	mov	r25, r24
    2eea:	88 89       	ldd	r24, Y+16	; 0x10
    2eec:	89 23       	and	r24, r25
    2eee:	88 8b       	std	Y+16, r24	; 0x10
	{
		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
		uint8 data_pin_counter; 									/* To loop through the 8 data pins */

		for(data_pin_counter = 0; data_pin_counter < 8; data_pin_counter++)
    2ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef2:	8f 5f       	subi	r24, 0xFF	; 255
    2ef4:	8f 87       	std	Y+15, r24	; 0x0f
    2ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef8:	88 30       	cpi	r24, 0x08	; 8
    2efa:	c0 f2       	brcs	.-80     	; 0x2eac <LCD_8bit_sendChar+0x40>
		{
			/* load each LCD data pin with the corresponding passed command bits */
			error_status &= GPIO_pinWrite(&(lcd->data_pin[data_pin_counter]), READ_BIT(_char, data_pin_counter));
		}
		LCD_8bit_genEnablePulse(lcd);
    2efc:	89 89       	ldd	r24, Y+17	; 0x11
    2efe:	9a 89       	ldd	r25, Y+18	; 0x12
    2f00:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <LCD_8bit_genEnablePulse>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	a0 e0       	ldi	r26, 0x00	; 0
    2f0a:	b0 e4       	ldi	r27, 0x40	; 64
    2f0c:	8b 87       	std	Y+11, r24	; 0x0b
    2f0e:	9c 87       	std	Y+12, r25	; 0x0c
    2f10:	ad 87       	std	Y+13, r26	; 0x0d
    2f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a e7       	ldi	r20, 0x7A	; 122
    2f22:	55 e4       	ldi	r21, 0x45	; 69
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	8f 83       	std	Y+7, r24	; 0x07
    2f2e:	98 87       	std	Y+8, r25	; 0x08
    2f30:	a9 87       	std	Y+9, r26	; 0x09
    2f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f34:	6f 81       	ldd	r22, Y+7	; 0x07
    2f36:	78 85       	ldd	r23, Y+8	; 0x08
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e8       	ldi	r20, 0x80	; 128
    2f42:	5f e3       	ldi	r21, 0x3F	; 63
    2f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f48:	88 23       	and	r24, r24
    2f4a:	2c f4       	brge	.+10     	; 0x2f56 <LCD_8bit_sendChar+0xea>
		__ticks = 1;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	3f c0       	rjmp	.+126    	; 0x2fd4 <LCD_8bit_sendChar+0x168>
	else if (__tmp > 65535)
    2f56:	6f 81       	ldd	r22, Y+7	; 0x07
    2f58:	78 85       	ldd	r23, Y+8	; 0x08
    2f5a:	89 85       	ldd	r24, Y+9	; 0x09
    2f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	3f ef       	ldi	r19, 0xFF	; 255
    2f62:	4f e7       	ldi	r20, 0x7F	; 127
    2f64:	57 e4       	ldi	r21, 0x47	; 71
    2f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	4c f5       	brge	.+82     	; 0x2fc0 <LCD_8bit_sendChar+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	0f c0       	rjmp	.+30     	; 0x2fb6 <LCD_8bit_sendChar+0x14a>
    2f98:	80 e9       	ldi	r24, 0x90	; 144
    2f9a:	91 e0       	ldi	r25, 0x01	; 1
    2f9c:	9c 83       	std	Y+4, r25	; 0x04
    2f9e:	8b 83       	std	Y+3, r24	; 0x03
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <LCD_8bit_sendChar+0x138>
    2fa8:	9c 83       	std	Y+4, r25	; 0x04
    2faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	69 f7       	brne	.-38     	; 0x2f98 <LCD_8bit_sendChar+0x12c>
    2fbe:	14 c0       	rjmp	.+40     	; 0x2fe8 <LCD_8bit_sendChar+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc2:	78 85       	ldd	r23, Y+8	; 0x08
    2fc4:	89 85       	ldd	r24, Y+9	; 0x09
    2fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
    2fd2:	8d 83       	std	Y+5, r24	; 0x05
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd8:	9a 83       	std	Y+2, r25	; 0x02
    2fda:	89 83       	std	Y+1, r24	; 0x01
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_8bit_sendChar+0x174>
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}

	return error_status;
    2fe8:	88 89       	ldd	r24, Y+16	; 0x10
}
    2fea:	63 96       	adiw	r28, 0x13	; 19
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <LCD_8bit_sendCharAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCharAtPosition(const lcd_8bit_t *lcd, uint8 row, uint8 col, uint8 _char)
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	64 97       	sbiw	r28, 0x14	; 20
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	99 8b       	std	Y+17, r25	; 0x11
    3012:	88 8b       	std	Y+16, r24	; 0x10
    3014:	6a 8b       	std	Y+18, r22	; 0x12
    3016:	4b 8b       	std	Y+19, r20	; 0x13
    3018:	2c 8b       	std	Y+20, r18	; 0x14
	STD_ReturnType error_status = E_OK;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	8f 87       	std	Y+15, r24	; 0x0f
	if(NULL == lcd)
    301e:	88 89       	ldd	r24, Y+16	; 0x10
    3020:	99 89       	ldd	r25, Y+17	; 0x11
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	11 f4       	brne	.+4      	; 0x302a <LCD_8bit_sendCharAtPosition+0x2e>
	{
		error_status = E_NOT_OK;
    3026:	1f 86       	std	Y+15, r1	; 0x0f
    3028:	8a c0       	rjmp	.+276    	; 0x313e <LCD_8bit_sendCharAtPosition+0x142>
	}
	else
	{
		/* set cursor to the required position */
		LCD_8bit_setCursorLocation(lcd, row, col);
    302a:	88 89       	ldd	r24, Y+16	; 0x10
    302c:	99 89       	ldd	r25, Y+17	; 0x11
    302e:	6a 89       	ldd	r22, Y+18	; 0x12
    3030:	4b 89       	ldd	r20, Y+19	; 0x13
    3032:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_8bit_setCursorLocation>

		/* Write 1 on the RS pin */
		error_status &= GPIO_pinWrite(&(lcd->rs), GPIO_HIGH);
    3036:	88 89       	ldd	r24, Y+16	; 0x10
    3038:	99 89       	ldd	r25, Y+17	; 0x11
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    3040:	98 2f       	mov	r25, r24
    3042:	8f 85       	ldd	r24, Y+15	; 0x0f
    3044:	89 23       	and	r24, r25
    3046:	8f 87       	std	Y+15, r24	; 0x0f

		/* Send the higher command nibble first */
		error_status &= LCD_8bit_sendChar(lcd, _char);
    3048:	88 89       	ldd	r24, Y+16	; 0x10
    304a:	99 89       	ldd	r25, Y+17	; 0x11
    304c:	6c 89       	ldd	r22, Y+20	; 0x14
    304e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_8bit_sendChar>
    3052:	98 2f       	mov	r25, r24
    3054:	8f 85       	ldd	r24, Y+15	; 0x0f
    3056:	89 23       	and	r24, r25
    3058:	8f 87       	std	Y+15, r24	; 0x0f
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	a0 e0       	ldi	r26, 0x00	; 0
    3060:	b0 e4       	ldi	r27, 0x40	; 64
    3062:	8b 87       	std	Y+11, r24	; 0x0b
    3064:	9c 87       	std	Y+12, r25	; 0x0c
    3066:	ad 87       	std	Y+13, r26	; 0x0d
    3068:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306a:	6b 85       	ldd	r22, Y+11	; 0x0b
    306c:	7c 85       	ldd	r23, Y+12	; 0x0c
    306e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3070:	9e 85       	ldd	r25, Y+14	; 0x0e
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	4a e7       	ldi	r20, 0x7A	; 122
    3078:	55 e4       	ldi	r21, 0x45	; 69
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	8f 83       	std	Y+7, r24	; 0x07
    3084:	98 87       	std	Y+8, r25	; 0x08
    3086:	a9 87       	std	Y+9, r26	; 0x09
    3088:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e8       	ldi	r20, 0x80	; 128
    3098:	5f e3       	ldi	r21, 0x3F	; 63
    309a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    309e:	88 23       	and	r24, r24
    30a0:	2c f4       	brge	.+10     	; 0x30ac <LCD_8bit_sendCharAtPosition+0xb0>
		__ticks = 1;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9e 83       	std	Y+6, r25	; 0x06
    30a8:	8d 83       	std	Y+5, r24	; 0x05
    30aa:	3f c0       	rjmp	.+126    	; 0x312a <LCD_8bit_sendCharAtPosition+0x12e>
	else if (__tmp > 65535)
    30ac:	6f 81       	ldd	r22, Y+7	; 0x07
    30ae:	78 85       	ldd	r23, Y+8	; 0x08
    30b0:	89 85       	ldd	r24, Y+9	; 0x09
    30b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	4c f5       	brge	.+82     	; 0x3116 <LCD_8bit_sendCharAtPosition+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e2       	ldi	r20, 0x20	; 32
    30d2:	51 e4       	ldi	r21, 0x41	; 65
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	9e 83       	std	Y+6, r25	; 0x06
    30ea:	8d 83       	std	Y+5, r24	; 0x05
    30ec:	0f c0       	rjmp	.+30     	; 0x310c <LCD_8bit_sendCharAtPosition+0x110>
    30ee:	80 e9       	ldi	r24, 0x90	; 144
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	9c 83       	std	Y+4, r25	; 0x04
    30f4:	8b 83       	std	Y+3, r24	; 0x03
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	9c 81       	ldd	r25, Y+4	; 0x04
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <LCD_8bit_sendCharAtPosition+0xfe>
    30fe:	9c 83       	std	Y+4, r25	; 0x04
    3100:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3102:	8d 81       	ldd	r24, Y+5	; 0x05
    3104:	9e 81       	ldd	r25, Y+6	; 0x06
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	9e 83       	std	Y+6, r25	; 0x06
    310a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	9e 81       	ldd	r25, Y+6	; 0x06
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	69 f7       	brne	.-38     	; 0x30ee <LCD_8bit_sendCharAtPosition+0xf2>
    3114:	14 c0       	rjmp	.+40     	; 0x313e <LCD_8bit_sendCharAtPosition+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3116:	6f 81       	ldd	r22, Y+7	; 0x07
    3118:	78 85       	ldd	r23, Y+8	; 0x08
    311a:	89 85       	ldd	r24, Y+9	; 0x09
    311c:	9a 85       	ldd	r25, Y+10	; 0x0a
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	9e 81       	ldd	r25, Y+6	; 0x06
    312e:	9a 83       	std	Y+2, r25	; 0x02
    3130:	89 83       	std	Y+1, r24	; 0x01
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <LCD_8bit_sendCharAtPosition+0x13a>
    313a:	9a 83       	std	Y+2, r25	; 0x02
    313c:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);
	}

	return error_status;
    313e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3140:	64 96       	adiw	r28, 0x14	; 20
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <LCD_8bit_sendString>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendString(const lcd_8bit_t *lcd, uint8 * str)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	00 d0       	rcall	.+0      	; 0x3158 <LCD_8bit_sendString+0x6>
    3158:	00 d0       	rcall	.+0      	; 0x315a <LCD_8bit_sendString+0x8>
    315a:	0f 92       	push	r0
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	9b 83       	std	Y+3, r25	; 0x03
    3162:	8a 83       	std	Y+2, r24	; 0x02
    3164:	7d 83       	std	Y+5, r23	; 0x05
    3166:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	9b 81       	ldd	r25, Y+3	; 0x03
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	21 f0       	breq	.+8      	; 0x317c <LCD_8bit_sendString+0x2a>
    3174:	8c 81       	ldd	r24, Y+4	; 0x04
    3176:	9d 81       	ldd	r25, Y+5	; 0x05
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	79 f4       	brne	.+30     	; 0x319a <LCD_8bit_sendString+0x48>
	{
		error_status = E_NOT_OK;
    317c:	19 82       	std	Y+1, r1	; 0x01
    317e:	12 c0       	rjmp	.+36     	; 0x31a4 <LCD_8bit_sendString+0x52>
	}
	else
	{
		while(*str)
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
    3180:	ec 81       	ldd	r30, Y+4	; 0x04
    3182:	fd 81       	ldd	r31, Y+5	; 0x05
    3184:	20 81       	ld	r18, Z
    3186:	8c 81       	ldd	r24, Y+4	; 0x04
    3188:	9d 81       	ldd	r25, Y+5	; 0x05
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	9d 83       	std	Y+5, r25	; 0x05
    318e:	8c 83       	std	Y+4, r24	; 0x04
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	9b 81       	ldd	r25, Y+3	; 0x03
    3194:	62 2f       	mov	r22, r18
    3196:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_8bit_sendChar>
	{
		error_status = E_NOT_OK;
	}
	else
	{
		while(*str)
    319a:	ec 81       	ldd	r30, Y+4	; 0x04
    319c:	fd 81       	ldd	r31, Y+5	; 0x05
    319e:	80 81       	ld	r24, Z
    31a0:	88 23       	and	r24, r24
    31a2:	71 f7       	brne	.-36     	; 0x3180 <LCD_8bit_sendString+0x2e>
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}
	}

	return error_status;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <LCD_8bit_sendStringAtPosition>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendStringAtPosition(const lcd_8bit_t *lcd, uint8 row, uint8 col, uint8 * str )
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	27 97       	sbiw	r28, 0x07	; 7
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	9b 83       	std	Y+3, r25	; 0x03
    31cc:	8a 83       	std	Y+2, r24	; 0x02
    31ce:	6c 83       	std	Y+4, r22	; 0x04
    31d0:	4d 83       	std	Y+5, r20	; 0x05
    31d2:	3f 83       	std	Y+7, r19	; 0x07
    31d4:	2e 83       	std	Y+6, r18	; 0x06
	STD_ReturnType error_status = E_OK;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd || NULL == str)
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	21 f0       	breq	.+8      	; 0x31ea <LCD_8bit_sendStringAtPosition+0x34>
    31e2:	8e 81       	ldd	r24, Y+6	; 0x06
    31e4:	9f 81       	ldd	r25, Y+7	; 0x07
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	11 f4       	brne	.+4      	; 0x31ee <LCD_8bit_sendStringAtPosition+0x38>
	{
		error_status = E_NOT_OK;
    31ea:	19 82       	std	Y+1, r1	; 0x01
    31ec:	1d c0       	rjmp	.+58     	; 0x3228 <LCD_8bit_sendStringAtPosition+0x72>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_8bit_setCursorLocation(lcd, row, col);
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	9b 81       	ldd	r25, Y+3	; 0x03
    31f2:	6c 81       	ldd	r22, Y+4	; 0x04
    31f4:	4d 81       	ldd	r20, Y+5	; 0x05
    31f6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_8bit_setCursorLocation>
    31fa:	98 2f       	mov	r25, r24
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	89 23       	and	r24, r25
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	0d c0       	rjmp	.+26     	; 0x321e <LCD_8bit_sendStringAtPosition+0x68>
		while(*str)
		{
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
    3204:	ee 81       	ldd	r30, Y+6	; 0x06
    3206:	ff 81       	ldd	r31, Y+7	; 0x07
    3208:	20 81       	ld	r18, Z
    320a:	8e 81       	ldd	r24, Y+6	; 0x06
    320c:	9f 81       	ldd	r25, Y+7	; 0x07
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	9f 83       	std	Y+7, r25	; 0x07
    3212:	8e 83       	std	Y+6, r24	; 0x06
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	9b 81       	ldd	r25, Y+3	; 0x03
    3218:	62 2f       	mov	r22, r18
    321a:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_8bit_sendChar>
	}
	else
	{
		/* move the cursor to the required position */
		error_status &= LCD_8bit_setCursorLocation(lcd, row, col);
		while(*str)
    321e:	ee 81       	ldd	r30, Y+6	; 0x06
    3220:	ff 81       	ldd	r31, Y+7	; 0x07
    3222:	80 81       	ld	r24, Z
    3224:	88 23       	and	r24, r24
    3226:	71 f7       	brne	.-36     	; 0x3204 <LCD_8bit_sendStringAtPosition+0x4e>
			LCD_8bit_sendChar(lcd, *str++); /* print character then increment pointer */
		}

	}

	return error_status;
    3228:	89 81       	ldd	r24, Y+1	; 0x01
}
    322a:	27 96       	adiw	r28, 0x07	; 7
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <LCD_8bit_sendCustomCharAtPosition>:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendCustomCharAtPosition(const lcd_8bit_t *lcd, uint8 * char_arr, uint8 row,\
		uint8 col, uint8 mem_position)
{
    323c:	0f 93       	push	r16
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	29 97       	sbiw	r28, 0x09	; 9
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
    3256:	7e 83       	std	Y+6, r23	; 0x06
    3258:	6d 83       	std	Y+5, r22	; 0x05
    325a:	4f 83       	std	Y+7, r20	; 0x07
    325c:	28 87       	std	Y+8, r18	; 0x08
    325e:	09 87       	std	Y+9, r16	; 0x09
	STD_ReturnType error_status = E_OK;
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd)
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	11 f4       	brne	.+4      	; 0x3270 <LCD_8bit_sendCustomCharAtPosition+0x34>
	{
		error_status = E_NOT_OK;
    326c:	1a 82       	std	Y+2, r1	; 0x02
    326e:	36 c0       	rjmp	.+108    	; 0x32dc <LCD_8bit_sendCustomCharAtPosition+0xa0>
	}
	else
	{
		uint8 new_char_counter;
		/* make AC point to the CGRAM memory position point to where the character will be stored */
		error_status = LCD_8bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	88 2f       	mov	r24, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	08 96       	adiw	r24, 0x08	; 8
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	28 2f       	mov	r18, r24
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	62 2f       	mov	r22, r18
    328c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    3290:	8a 83       	std	Y+2, r24	; 0x02

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    3292:	19 82       	std	Y+1, r1	; 0x01
    3294:	15 c0       	rjmp	.+42     	; 0x32c0 <LCD_8bit_sendCustomCharAtPosition+0x84>
		{
			error_status &= LCD_8bit_sendChar(lcd, char_arr[new_char_counter]);
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	28 2f       	mov	r18, r24
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	fc 01       	movw	r30, r24
    32a2:	e2 0f       	add	r30, r18
    32a4:	f3 1f       	adc	r31, r19
    32a6:	20 81       	ld	r18, Z
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	9c 81       	ldd	r25, Y+4	; 0x04
    32ac:	62 2f       	mov	r22, r18
    32ae:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_8bit_sendChar>
    32b2:	98 2f       	mov	r25, r24
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	89 23       	and	r24, r25
    32b8:	8a 83       	std	Y+2, r24	; 0x02
		error_status = LCD_8bit_sendCommand(lcd, ((_LCD_CGRAM_START) + mem_position * 8));

		/* every new character is an array that consists of 8 patterns
		 * every pattern is stored in a memory location
		 */
		for(new_char_counter = 0; new_char_counter < 8; new_char_counter++)
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	8f 5f       	subi	r24, 0xFF	; 255
    32be:	89 83       	std	Y+1, r24	; 0x01
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	88 30       	cpi	r24, 0x08	; 8
    32c4:	40 f3       	brcs	.-48     	; 0x3296 <LCD_8bit_sendCustomCharAtPosition+0x5a>
		{
			error_status &= LCD_8bit_sendChar(lcd, char_arr[new_char_counter]);
		}
		/* return to DDRAM and send the new char */
		error_status &= LCD_8bit_sendCharAtPosition(lcd, row, col, mem_position);
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ca:	6f 81       	ldd	r22, Y+7	; 0x07
    32cc:	48 85       	ldd	r20, Y+8	; 0x08
    32ce:	29 85       	ldd	r18, Y+9	; 0x09
    32d0:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <LCD_8bit_sendCharAtPosition>
    32d4:	98 2f       	mov	r25, r24
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	89 23       	and	r24, r25
    32da:	8a 83       	std	Y+2, r24	; 0x02

	}

	return error_status;
    32dc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32de:	29 96       	adiw	r28, 0x09	; 9
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	0f 91       	pop	r16
    32f0:	08 95       	ret

000032f2 <LCD_8bit_sendNum>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_sendNum(const lcd_8bit_t *lcd, uint32 num)
{
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	63 97       	sbiw	r28, 0x13	; 19
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	cd bf       	out	0x3d, r28	; 61
    3306:	9f 87       	std	Y+15, r25	; 0x0f
    3308:	8e 87       	std	Y+14, r24	; 0x0e
    330a:	48 8b       	std	Y+16, r20	; 0x10
    330c:	59 8b       	std	Y+17, r21	; 0x11
    330e:	6a 8b       	std	Y+18, r22	; 0x12
    3310:	7b 8b       	std	Y+19, r23	; 0x13
	STD_ReturnType error_status = E_OK;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    3316:	8e 85       	ldd	r24, Y+14	; 0x0e
    3318:	9f 85       	ldd	r25, Y+15	; 0x0f
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	11 f4       	brne	.+4      	; 0x3322 <LCD_8bit_sendNum+0x30>
	{
		error_status = E_NOT_OK;
    331e:	19 82       	std	Y+1, r1	; 0x01
    3320:	19 c0       	rjmp	.+50     	; 0x3354 <LCD_8bit_sendNum+0x62>
	}
	else
	{
		uint8 str[12];											/* to store the converted number */
		error_status  = numToStr(num, str);						/* call the function to convert the number */
    3322:	88 89       	ldd	r24, Y+16	; 0x10
    3324:	99 89       	ldd	r25, Y+17	; 0x11
    3326:	aa 89       	ldd	r26, Y+18	; 0x12
    3328:	bb 89       	ldd	r27, Y+19	; 0x13
    332a:	9e 01       	movw	r18, r28
    332c:	2e 5f       	subi	r18, 0xFE	; 254
    332e:	3f 4f       	sbci	r19, 0xFF	; 255
    3330:	bc 01       	movw	r22, r24
    3332:	cd 01       	movw	r24, r26
    3334:	a9 01       	movw	r20, r18
    3336:	0e 94 cb 1c 	call	0x3996	; 0x3996 <numToStr>
    333a:	89 83       	std	Y+1, r24	; 0x01
		error_status &= LCD_8bit_sendString(lcd, str);			/* send the string to the LCD */
    333c:	8e 85       	ldd	r24, Y+14	; 0x0e
    333e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3340:	9e 01       	movw	r18, r28
    3342:	2e 5f       	subi	r18, 0xFE	; 254
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	b9 01       	movw	r22, r18
    3348:	0e 94 a9 18 	call	0x3152	; 0x3152 <LCD_8bit_sendString>
    334c:	98 2f       	mov	r25, r24
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	89 23       	and	r24, r25
    3352:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    3354:	89 81       	ldd	r24, Y+1	; 0x01
}
    3356:	63 96       	adiw	r28, 0x13	; 19
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <LCD_4bit_setCursorLocation>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_4bit_setCursorLocation(const lcd_4bit_t *lcd, uint8 row, uint8 col)
{
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	27 97       	sbiw	r28, 0x07	; 7
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	9b 83       	std	Y+3, r25	; 0x03
    337e:	8a 83       	std	Y+2, r24	; 0x02
    3380:	6c 83       	std	Y+4, r22	; 0x04
    3382:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnType error_status = E_OK;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	9b 81       	ldd	r25, Y+3	; 0x03
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	11 f4       	brne	.+4      	; 0x3394 <LCD_4bit_setCursorLocation+0x2c>
	{
		error_status = E_NOT_OK;
    3390:	19 82       	std	Y+1, r1	; 0x01
    3392:	58 c0       	rjmp	.+176    	; 0x3444 <LCD_4bit_setCursorLocation+0xdc>
	}
	else
	{
		col--;
    3394:	8d 81       	ldd	r24, Y+5	; 0x05
    3396:	81 50       	subi	r24, 0x01	; 1
    3398:	8d 83       	std	Y+5, r24	; 0x05
		/* check row value */
		switch(row)
    339a:	8c 81       	ldd	r24, Y+4	; 0x04
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	3f 83       	std	Y+7, r19	; 0x07
    33a2:	2e 83       	std	Y+6, r18	; 0x06
    33a4:	8e 81       	ldd	r24, Y+6	; 0x06
    33a6:	9f 81       	ldd	r25, Y+7	; 0x07
    33a8:	82 30       	cpi	r24, 0x02	; 2
    33aa:	91 05       	cpc	r25, r1
    33ac:	19 f1       	breq	.+70     	; 0x33f4 <LCD_4bit_setCursorLocation+0x8c>
    33ae:	2e 81       	ldd	r18, Y+6	; 0x06
    33b0:	3f 81       	ldd	r19, Y+7	; 0x07
    33b2:	23 30       	cpi	r18, 0x03	; 3
    33b4:	31 05       	cpc	r19, r1
    33b6:	34 f4       	brge	.+12     	; 0x33c4 <LCD_4bit_setCursorLocation+0x5c>
    33b8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ba:	9f 81       	ldd	r25, Y+7	; 0x07
    33bc:	81 30       	cpi	r24, 0x01	; 1
    33be:	91 05       	cpc	r25, r1
    33c0:	61 f0       	breq	.+24     	; 0x33da <LCD_4bit_setCursorLocation+0x72>
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <LCD_4bit_setCursorLocation+0xda>
    33c4:	2e 81       	ldd	r18, Y+6	; 0x06
    33c6:	3f 81       	ldd	r19, Y+7	; 0x07
    33c8:	23 30       	cpi	r18, 0x03	; 3
    33ca:	31 05       	cpc	r19, r1
    33cc:	01 f1       	breq	.+64     	; 0x340e <LCD_4bit_setCursorLocation+0xa6>
    33ce:	8e 81       	ldd	r24, Y+6	; 0x06
    33d0:	9f 81       	ldd	r25, Y+7	; 0x07
    33d2:	84 30       	cpi	r24, 0x04	; 4
    33d4:	91 05       	cpc	r25, r1
    33d6:	41 f1       	breq	.+80     	; 0x3428 <LCD_4bit_setCursorLocation+0xc0>
    33d8:	34 c0       	rjmp	.+104    	; 0x3442 <LCD_4bit_setCursorLocation+0xda>
		{
		case ROW1:
			/* address format is 1 A6 A5 A4 A3 A2 A1 A0,
			 * so, we add 0x80 to the base address of every row */

			error_status &= LCD_4bit_sendCommand(lcd, (0x80 + col)); /* first row start address is 0x00 */
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	28 2f       	mov	r18, r24
    33de:	20 58       	subi	r18, 0x80	; 128
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	9b 81       	ldd	r25, Y+3	; 0x03
    33e4:	62 2f       	mov	r22, r18
    33e6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    33ea:	98 2f       	mov	r25, r24
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	89 23       	and	r24, r25
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	28 c0       	rjmp	.+80     	; 0x3444 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW2:
			error_status &= LCD_4bit_sendCommand(lcd, (0xC0 + col)); /* second row start address is 0x40 */
    33f4:	8d 81       	ldd	r24, Y+5	; 0x05
    33f6:	28 2f       	mov	r18, r24
    33f8:	20 54       	subi	r18, 0x40	; 64
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	9b 81       	ldd	r25, Y+3	; 0x03
    33fe:	62 2f       	mov	r22, r18
    3400:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    3404:	98 2f       	mov	r25, r24
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	89 23       	and	r24, r25
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	1b c0       	rjmp	.+54     	; 0x3444 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW3:
			error_status &= LCD_4bit_sendCommand(lcd, (0x94 + col)); /* third row start address is 0x14 */
    340e:	8d 81       	ldd	r24, Y+5	; 0x05
    3410:	28 2f       	mov	r18, r24
    3412:	2c 56       	subi	r18, 0x6C	; 108
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	62 2f       	mov	r22, r18
    341a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    341e:	98 2f       	mov	r25, r24
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	89 23       	and	r24, r25
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	0e c0       	rjmp	.+28     	; 0x3444 <LCD_4bit_setCursorLocation+0xdc>
			break;

		case ROW4:
			error_status &= LCD_4bit_sendCommand(lcd, (0xD4 + col)); /* fourth row start address is 0x54 */
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	28 2f       	mov	r18, r24
    342c:	2c 52       	subi	r18, 0x2C	; 44
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	9b 81       	ldd	r25, Y+3	; 0x03
    3432:	62 2f       	mov	r22, r18
    3434:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_4bit_sendCommand>
    3438:	98 2f       	mov	r25, r24
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	89 23       	and	r24, r25
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	01 c0       	rjmp	.+2      	; 0x3444 <LCD_4bit_setCursorLocation+0xdc>
			break;

		default:
			error_status = E_NOT_OK;
    3442:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    3444:	89 81       	ldd	r24, Y+1	; 0x01
}
    3446:	27 96       	adiw	r28, 0x07	; 7
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <LCD_8bit_setCursorLocation>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType LCD_8bit_setCursorLocation(const lcd_8bit_t *lcd, uint8 row, uint8 col)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	27 97       	sbiw	r28, 0x07	; 7
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	9b 83       	std	Y+3, r25	; 0x03
    346e:	8a 83       	std	Y+2, r24	; 0x02
    3470:	6c 83       	std	Y+4, r22	; 0x04
    3472:	4d 83       	std	Y+5, r20	; 0x05
	STD_ReturnType error_status = E_OK;
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	9b 81       	ldd	r25, Y+3	; 0x03
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	11 f4       	brne	.+4      	; 0x3484 <LCD_8bit_setCursorLocation+0x2c>
	{
		error_status = E_NOT_OK;
    3480:	19 82       	std	Y+1, r1	; 0x01
    3482:	58 c0       	rjmp	.+176    	; 0x3534 <LCD_8bit_setCursorLocation+0xdc>
	}
	else
	{
		col--;
    3484:	8d 81       	ldd	r24, Y+5	; 0x05
    3486:	81 50       	subi	r24, 0x01	; 1
    3488:	8d 83       	std	Y+5, r24	; 0x05
		/* check row value */
		switch(row)
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	3f 83       	std	Y+7, r19	; 0x07
    3492:	2e 83       	std	Y+6, r18	; 0x06
    3494:	8e 81       	ldd	r24, Y+6	; 0x06
    3496:	9f 81       	ldd	r25, Y+7	; 0x07
    3498:	82 30       	cpi	r24, 0x02	; 2
    349a:	91 05       	cpc	r25, r1
    349c:	19 f1       	breq	.+70     	; 0x34e4 <LCD_8bit_setCursorLocation+0x8c>
    349e:	2e 81       	ldd	r18, Y+6	; 0x06
    34a0:	3f 81       	ldd	r19, Y+7	; 0x07
    34a2:	23 30       	cpi	r18, 0x03	; 3
    34a4:	31 05       	cpc	r19, r1
    34a6:	34 f4       	brge	.+12     	; 0x34b4 <LCD_8bit_setCursorLocation+0x5c>
    34a8:	8e 81       	ldd	r24, Y+6	; 0x06
    34aa:	9f 81       	ldd	r25, Y+7	; 0x07
    34ac:	81 30       	cpi	r24, 0x01	; 1
    34ae:	91 05       	cpc	r25, r1
    34b0:	61 f0       	breq	.+24     	; 0x34ca <LCD_8bit_setCursorLocation+0x72>
    34b2:	3f c0       	rjmp	.+126    	; 0x3532 <LCD_8bit_setCursorLocation+0xda>
    34b4:	2e 81       	ldd	r18, Y+6	; 0x06
    34b6:	3f 81       	ldd	r19, Y+7	; 0x07
    34b8:	23 30       	cpi	r18, 0x03	; 3
    34ba:	31 05       	cpc	r19, r1
    34bc:	01 f1       	breq	.+64     	; 0x34fe <LCD_8bit_setCursorLocation+0xa6>
    34be:	8e 81       	ldd	r24, Y+6	; 0x06
    34c0:	9f 81       	ldd	r25, Y+7	; 0x07
    34c2:	84 30       	cpi	r24, 0x04	; 4
    34c4:	91 05       	cpc	r25, r1
    34c6:	41 f1       	breq	.+80     	; 0x3518 <LCD_8bit_setCursorLocation+0xc0>
    34c8:	34 c0       	rjmp	.+104    	; 0x3532 <LCD_8bit_setCursorLocation+0xda>
		{
		case ROW1:
			error_status &= LCD_8bit_sendCommand(lcd, (0x80 + col)); /* first row start address is 0x00 */
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	28 2f       	mov	r18, r24
    34ce:	20 58       	subi	r18, 0x80	; 128
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	9b 81       	ldd	r25, Y+3	; 0x03
    34d4:	62 2f       	mov	r22, r18
    34d6:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    34da:	98 2f       	mov	r25, r24
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	89 23       	and	r24, r25
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	28 c0       	rjmp	.+80     	; 0x3534 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW2:
			error_status &= LCD_8bit_sendCommand(lcd, (0xC0 + col)); /* second row start address is 0x40 */
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	28 2f       	mov	r18, r24
    34e8:	20 54       	subi	r18, 0x40	; 64
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	9b 81       	ldd	r25, Y+3	; 0x03
    34ee:	62 2f       	mov	r22, r18
    34f0:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    34f4:	98 2f       	mov	r25, r24
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	89 23       	and	r24, r25
    34fa:	89 83       	std	Y+1, r24	; 0x01
    34fc:	1b c0       	rjmp	.+54     	; 0x3534 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW3:
			error_status &= LCD_8bit_sendCommand(lcd, (0x94 + col)); /* third row start address is 0x14 */
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	28 2f       	mov	r18, r24
    3502:	2c 56       	subi	r18, 0x6C	; 108
    3504:	8a 81       	ldd	r24, Y+2	; 0x02
    3506:	9b 81       	ldd	r25, Y+3	; 0x03
    3508:	62 2f       	mov	r22, r18
    350a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    350e:	98 2f       	mov	r25, r24
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	89 23       	and	r24, r25
    3514:	89 83       	std	Y+1, r24	; 0x01
    3516:	0e c0       	rjmp	.+28     	; 0x3534 <LCD_8bit_setCursorLocation+0xdc>
			break;

		case ROW4:
			error_status &= LCD_8bit_sendCommand(lcd, (0xD4 + col)); /* fourth row start address is 0x54 */
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	28 2f       	mov	r18, r24
    351c:	2c 52       	subi	r18, 0x2C	; 44
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	62 2f       	mov	r22, r18
    3524:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_8bit_sendCommand>
    3528:	98 2f       	mov	r25, r24
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	89 23       	and	r24, r25
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	01 c0       	rjmp	.+2      	; 0x3534 <LCD_8bit_setCursorLocation+0xdc>
			break;

		default:
			error_status = E_NOT_OK;
    3532:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    3534:	89 81       	ldd	r24, Y+1	; 0x01
}
    3536:	27 96       	adiw	r28, 0x07	; 7
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	08 95       	ret

00003548 <LCD_send4Bits>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_send4Bits(const lcd_4bit_t *lcd, uint8 data_command)
{
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	00 d0       	rcall	.+0      	; 0x354e <LCD_send4Bits+0x6>
    354e:	00 d0       	rcall	.+0      	; 0x3550 <LCD_send4Bits+0x8>
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	9b 83       	std	Y+3, r25	; 0x03
    3556:	8a 83       	std	Y+2, r24	; 0x02
    3558:	6c 83       	std	Y+4, r22	; 0x04
	STD_ReturnType error_status = E_OK;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd)
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	9b 81       	ldd	r25, Y+3	; 0x03
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	11 f4       	brne	.+4      	; 0x356a <LCD_send4Bits+0x22>
	{
		error_status = E_NOT_OK;
    3566:	19 82       	std	Y+1, r1	; 0x01
    3568:	3a c0       	rjmp	.+116    	; 0x35de <LCD_send4Bits+0x96>
	}
	else
	{
		/* write the lower nibble of the passed data_command argument to the data pin of LCD */
		error_status = GPIO_pinWrite(&(lcd->data_pin[0]), READ_BIT(data_command, 0));
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	9b 81       	ldd	r25, Y+3	; 0x03
    356e:	9c 01       	movw	r18, r24
    3570:	2e 5f       	subi	r18, 0xFE	; 254
    3572:	3f 4f       	sbci	r19, 0xFF	; 255
    3574:	8c 81       	ldd	r24, Y+4	; 0x04
    3576:	48 2f       	mov	r20, r24
    3578:	41 70       	andi	r20, 0x01	; 1
    357a:	c9 01       	movw	r24, r18
    357c:	64 2f       	mov	r22, r20
    357e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    3582:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[1]), READ_BIT(data_command, 1));
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	9b 81       	ldd	r25, Y+3	; 0x03
    3588:	9c 01       	movw	r18, r24
    358a:	2d 5f       	subi	r18, 0xFD	; 253
    358c:	3f 4f       	sbci	r19, 0xFF	; 255
    358e:	8c 81       	ldd	r24, Y+4	; 0x04
    3590:	86 95       	lsr	r24
    3592:	48 2f       	mov	r20, r24
    3594:	41 70       	andi	r20, 0x01	; 1
    3596:	c9 01       	movw	r24, r18
    3598:	64 2f       	mov	r22, r20
    359a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    359e:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[2]), READ_BIT(data_command, 2));
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	9b 81       	ldd	r25, Y+3	; 0x03
    35a4:	9c 01       	movw	r18, r24
    35a6:	2c 5f       	subi	r18, 0xFC	; 252
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	8c 81       	ldd	r24, Y+4	; 0x04
    35ac:	86 95       	lsr	r24
    35ae:	86 95       	lsr	r24
    35b0:	48 2f       	mov	r20, r24
    35b2:	41 70       	andi	r20, 0x01	; 1
    35b4:	c9 01       	movw	r24, r18
    35b6:	64 2f       	mov	r22, r20
    35b8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    35bc:	89 83       	std	Y+1, r24	; 0x01
		error_status = GPIO_pinWrite(&(lcd->data_pin[3]), READ_BIT(data_command, 3));
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	9b 81       	ldd	r25, Y+3	; 0x03
    35c2:	9c 01       	movw	r18, r24
    35c4:	2b 5f       	subi	r18, 0xFB	; 251
    35c6:	3f 4f       	sbci	r19, 0xFF	; 255
    35c8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ca:	86 95       	lsr	r24
    35cc:	86 95       	lsr	r24
    35ce:	86 95       	lsr	r24
    35d0:	48 2f       	mov	r20, r24
    35d2:	41 70       	andi	r20, 0x01	; 1
    35d4:	c9 01       	movw	r24, r18
    35d6:	64 2f       	mov	r22, r20
    35d8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    35dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    35de:	89 81       	ldd	r24, Y+1	; 0x01
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	08 95       	ret

000035ee <LCD_4bit_genEnablePulse>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_4bit_genEnablePulse(const lcd_4bit_t *lcd)
{
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	6b 97       	sbiw	r28, 0x1b	; 27
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	9b 8f       	std	Y+27, r25	; 0x1b
    3604:	8a 8f       	std	Y+26, r24	; 0x1a
	STD_ReturnType error_status = E_OK;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd)
    360a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    360c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	11 f4       	brne	.+4      	; 0x3616 <LCD_4bit_genEnablePulse+0x28>
	{
		error_status = E_NOT_OK;
    3612:	19 8e       	std	Y+25, r1	; 0x19
    3614:	cc c0       	rjmp	.+408    	; 0x37ae <LCD_4bit_genEnablePulse+0x1c0>
	}
	else
	{
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_HIGH);
    3616:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3618:	9b 8d       	ldd	r25, Y+27	; 0x1b
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	61 e0       	ldi	r22, 0x01	; 1
    361e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    3622:	89 8f       	std	Y+25, r24	; 0x19
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a0 e8       	ldi	r26, 0x80	; 128
    362a:	bf e3       	ldi	r27, 0x3F	; 63
    362c:	8d 8b       	std	Y+21, r24	; 0x15
    362e:	9e 8b       	std	Y+22, r25	; 0x16
    3630:	af 8b       	std	Y+23, r26	; 0x17
    3632:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3634:	6d 89       	ldd	r22, Y+21	; 0x15
    3636:	7e 89       	ldd	r23, Y+22	; 0x16
    3638:	8f 89       	ldd	r24, Y+23	; 0x17
    363a:	98 8d       	ldd	r25, Y+24	; 0x18
    363c:	2b ea       	ldi	r18, 0xAB	; 171
    363e:	3a ea       	ldi	r19, 0xAA	; 170
    3640:	4a ea       	ldi	r20, 0xAA	; 170
    3642:	50 e4       	ldi	r21, 0x40	; 64
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	89 8b       	std	Y+17, r24	; 0x11
    364e:	9a 8b       	std	Y+18, r25	; 0x12
    3650:	ab 8b       	std	Y+19, r26	; 0x13
    3652:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3654:	69 89       	ldd	r22, Y+17	; 0x11
    3656:	7a 89       	ldd	r23, Y+18	; 0x12
    3658:	8b 89       	ldd	r24, Y+19	; 0x13
    365a:	9c 89       	ldd	r25, Y+20	; 0x14
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e8       	ldi	r20, 0x80	; 128
    3662:	5f e3       	ldi	r21, 0x3F	; 63
    3664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3668:	88 23       	and	r24, r24
    366a:	1c f4       	brge	.+6      	; 0x3672 <LCD_4bit_genEnablePulse+0x84>
		__ticks = 1;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	88 8b       	std	Y+16, r24	; 0x10
    3670:	91 c0       	rjmp	.+290    	; 0x3794 <LCD_4bit_genEnablePulse+0x1a6>
	else if (__tmp > 255)
    3672:	69 89       	ldd	r22, Y+17	; 0x11
    3674:	7a 89       	ldd	r23, Y+18	; 0x12
    3676:	8b 89       	ldd	r24, Y+19	; 0x13
    3678:	9c 89       	ldd	r25, Y+20	; 0x14
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	4f e7       	ldi	r20, 0x7F	; 127
    3680:	53 e4       	ldi	r21, 0x43	; 67
    3682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3686:	18 16       	cp	r1, r24
    3688:	0c f0       	brlt	.+2      	; 0x368c <LCD_4bit_genEnablePulse+0x9e>
    368a:	7b c0       	rjmp	.+246    	; 0x3782 <LCD_4bit_genEnablePulse+0x194>
	{
		_delay_ms(__us / 1000.0);
    368c:	6d 89       	ldd	r22, Y+21	; 0x15
    368e:	7e 89       	ldd	r23, Y+22	; 0x16
    3690:	8f 89       	ldd	r24, Y+23	; 0x17
    3692:	98 8d       	ldd	r25, Y+24	; 0x18
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	4a e7       	ldi	r20, 0x7A	; 122
    369a:	54 e4       	ldi	r21, 0x44	; 68
    369c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	8c 87       	std	Y+12, r24	; 0x0c
    36a6:	9d 87       	std	Y+13, r25	; 0x0d
    36a8:	ae 87       	std	Y+14, r26	; 0x0e
    36aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    36ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    36b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    36b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	4a e7       	ldi	r20, 0x7A	; 122
    36ba:	55 e4       	ldi	r21, 0x45	; 69
    36bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	88 87       	std	Y+8, r24	; 0x08
    36c6:	99 87       	std	Y+9, r25	; 0x09
    36c8:	aa 87       	std	Y+10, r26	; 0x0a
    36ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    36cc:	68 85       	ldd	r22, Y+8	; 0x08
    36ce:	79 85       	ldd	r23, Y+9	; 0x09
    36d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    36d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e8       	ldi	r20, 0x80	; 128
    36da:	5f e3       	ldi	r21, 0x3F	; 63
    36dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36e0:	88 23       	and	r24, r24
    36e2:	2c f4       	brge	.+10     	; 0x36ee <LCD_4bit_genEnablePulse+0x100>
		__ticks = 1;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9f 83       	std	Y+7, r25	; 0x07
    36ea:	8e 83       	std	Y+6, r24	; 0x06
    36ec:	3f c0       	rjmp	.+126    	; 0x376c <LCD_4bit_genEnablePulse+0x17e>
	else if (__tmp > 65535)
    36ee:	68 85       	ldd	r22, Y+8	; 0x08
    36f0:	79 85       	ldd	r23, Y+9	; 0x09
    36f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    36f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	3f ef       	ldi	r19, 0xFF	; 255
    36fa:	4f e7       	ldi	r20, 0x7F	; 127
    36fc:	57 e4       	ldi	r21, 0x47	; 71
    36fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3702:	18 16       	cp	r1, r24
    3704:	4c f5       	brge	.+82     	; 0x3758 <LCD_4bit_genEnablePulse+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3706:	6c 85       	ldd	r22, Y+12	; 0x0c
    3708:	7d 85       	ldd	r23, Y+13	; 0x0d
    370a:	8e 85       	ldd	r24, Y+14	; 0x0e
    370c:	9f 85       	ldd	r25, Y+15	; 0x0f
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e2       	ldi	r20, 0x20	; 32
    3714:	51 e4       	ldi	r21, 0x41	; 65
    3716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	9f 83       	std	Y+7, r25	; 0x07
    372c:	8e 83       	std	Y+6, r24	; 0x06
    372e:	0f c0       	rjmp	.+30     	; 0x374e <LCD_4bit_genEnablePulse+0x160>
    3730:	80 e9       	ldi	r24, 0x90	; 144
    3732:	91 e0       	ldi	r25, 0x01	; 1
    3734:	9d 83       	std	Y+5, r25	; 0x05
    3736:	8c 83       	std	Y+4, r24	; 0x04
    3738:	8c 81       	ldd	r24, Y+4	; 0x04
    373a:	9d 81       	ldd	r25, Y+5	; 0x05
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <LCD_4bit_genEnablePulse+0x14e>
    3740:	9d 83       	std	Y+5, r25	; 0x05
    3742:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3744:	8e 81       	ldd	r24, Y+6	; 0x06
    3746:	9f 81       	ldd	r25, Y+7	; 0x07
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	9f 83       	std	Y+7, r25	; 0x07
    374c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374e:	8e 81       	ldd	r24, Y+6	; 0x06
    3750:	9f 81       	ldd	r25, Y+7	; 0x07
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	69 f7       	brne	.-38     	; 0x3730 <LCD_4bit_genEnablePulse+0x142>
    3756:	24 c0       	rjmp	.+72     	; 0x37a0 <LCD_4bit_genEnablePulse+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3758:	68 85       	ldd	r22, Y+8	; 0x08
    375a:	79 85       	ldd	r23, Y+9	; 0x09
    375c:	8a 85       	ldd	r24, Y+10	; 0x0a
    375e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	9f 83       	std	Y+7, r25	; 0x07
    376a:	8e 83       	std	Y+6, r24	; 0x06
    376c:	8e 81       	ldd	r24, Y+6	; 0x06
    376e:	9f 81       	ldd	r25, Y+7	; 0x07
    3770:	9b 83       	std	Y+3, r25	; 0x03
    3772:	8a 83       	std	Y+2, r24	; 0x02
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	9b 81       	ldd	r25, Y+3	; 0x03
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <LCD_4bit_genEnablePulse+0x18a>
    377c:	9b 83       	std	Y+3, r25	; 0x03
    377e:	8a 83       	std	Y+2, r24	; 0x02
    3780:	0f c0       	rjmp	.+30     	; 0x37a0 <LCD_4bit_genEnablePulse+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3782:	69 89       	ldd	r22, Y+17	; 0x11
    3784:	7a 89       	ldd	r23, Y+18	; 0x12
    3786:	8b 89       	ldd	r24, Y+19	; 0x13
    3788:	9c 89       	ldd	r25, Y+20	; 0x14
    378a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	88 8b       	std	Y+16, r24	; 0x10
    3794:	88 89       	ldd	r24, Y+16	; 0x10
    3796:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	8a 95       	dec	r24
    379c:	f1 f7       	brne	.-4      	; 0x379a <LCD_4bit_genEnablePulse+0x1ac>
    379e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_LOW);
    37a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37a4:	01 96       	adiw	r24, 0x01	; 1
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    37ac:	89 8f       	std	Y+25, r24	; 0x19

	}
	return error_status;
    37ae:	89 8d       	ldd	r24, Y+25	; 0x19
}
    37b0:	6b 96       	adiw	r28, 0x1b	; 27
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <LCD_8bit_genEnablePulse>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType LCD_8bit_genEnablePulse(const lcd_8bit_t *lcd)
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	6b 97       	sbiw	r28, 0x1b	; 27
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	9b 8f       	std	Y+27, r25	; 0x1b
    37d8:	8a 8f       	std	Y+26, r24	; 0x1a
	STD_ReturnType error_status = E_OK;
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	89 8f       	std	Y+25, r24	; 0x19
	if(NULL == lcd)
    37de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	11 f4       	brne	.+4      	; 0x37ea <LCD_8bit_genEnablePulse+0x28>
	{
		error_status = E_NOT_OK;
    37e6:	19 8e       	std	Y+25, r1	; 0x19
    37e8:	cc c0       	rjmp	.+408    	; 0x3982 <LCD_8bit_genEnablePulse+0x1c0>
	}
	else
	{
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_HIGH);
    37ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37ee:	01 96       	adiw	r24, 0x01	; 1
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    37f6:	89 8f       	std	Y+25, r24	; 0x19
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	a0 e8       	ldi	r26, 0x80	; 128
    37fe:	bf e3       	ldi	r27, 0x3F	; 63
    3800:	8d 8b       	std	Y+21, r24	; 0x15
    3802:	9e 8b       	std	Y+22, r25	; 0x16
    3804:	af 8b       	std	Y+23, r26	; 0x17
    3806:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3808:	6d 89       	ldd	r22, Y+21	; 0x15
    380a:	7e 89       	ldd	r23, Y+22	; 0x16
    380c:	8f 89       	ldd	r24, Y+23	; 0x17
    380e:	98 8d       	ldd	r25, Y+24	; 0x18
    3810:	2b ea       	ldi	r18, 0xAB	; 171
    3812:	3a ea       	ldi	r19, 0xAA	; 170
    3814:	4a ea       	ldi	r20, 0xAA	; 170
    3816:	50 e4       	ldi	r21, 0x40	; 64
    3818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	89 8b       	std	Y+17, r24	; 0x11
    3822:	9a 8b       	std	Y+18, r25	; 0x12
    3824:	ab 8b       	std	Y+19, r26	; 0x13
    3826:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3828:	69 89       	ldd	r22, Y+17	; 0x11
    382a:	7a 89       	ldd	r23, Y+18	; 0x12
    382c:	8b 89       	ldd	r24, Y+19	; 0x13
    382e:	9c 89       	ldd	r25, Y+20	; 0x14
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e8       	ldi	r20, 0x80	; 128
    3836:	5f e3       	ldi	r21, 0x3F	; 63
    3838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383c:	88 23       	and	r24, r24
    383e:	1c f4       	brge	.+6      	; 0x3846 <LCD_8bit_genEnablePulse+0x84>
		__ticks = 1;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	88 8b       	std	Y+16, r24	; 0x10
    3844:	91 c0       	rjmp	.+290    	; 0x3968 <LCD_8bit_genEnablePulse+0x1a6>
	else if (__tmp > 255)
    3846:	69 89       	ldd	r22, Y+17	; 0x11
    3848:	7a 89       	ldd	r23, Y+18	; 0x12
    384a:	8b 89       	ldd	r24, Y+19	; 0x13
    384c:	9c 89       	ldd	r25, Y+20	; 0x14
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	4f e7       	ldi	r20, 0x7F	; 127
    3854:	53 e4       	ldi	r21, 0x43	; 67
    3856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    385a:	18 16       	cp	r1, r24
    385c:	0c f0       	brlt	.+2      	; 0x3860 <LCD_8bit_genEnablePulse+0x9e>
    385e:	7b c0       	rjmp	.+246    	; 0x3956 <LCD_8bit_genEnablePulse+0x194>
	{
		_delay_ms(__us / 1000.0);
    3860:	6d 89       	ldd	r22, Y+21	; 0x15
    3862:	7e 89       	ldd	r23, Y+22	; 0x16
    3864:	8f 89       	ldd	r24, Y+23	; 0x17
    3866:	98 8d       	ldd	r25, Y+24	; 0x18
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4a e7       	ldi	r20, 0x7A	; 122
    386e:	54 e4       	ldi	r21, 0x44	; 68
    3870:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	8c 87       	std	Y+12, r24	; 0x0c
    387a:	9d 87       	std	Y+13, r25	; 0x0d
    387c:	ae 87       	std	Y+14, r26	; 0x0e
    387e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3880:	6c 85       	ldd	r22, Y+12	; 0x0c
    3882:	7d 85       	ldd	r23, Y+13	; 0x0d
    3884:	8e 85       	ldd	r24, Y+14	; 0x0e
    3886:	9f 85       	ldd	r25, Y+15	; 0x0f
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	4a e7       	ldi	r20, 0x7A	; 122
    388e:	55 e4       	ldi	r21, 0x45	; 69
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	88 87       	std	Y+8, r24	; 0x08
    389a:	99 87       	std	Y+9, r25	; 0x09
    389c:	aa 87       	std	Y+10, r26	; 0x0a
    389e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    38a0:	68 85       	ldd	r22, Y+8	; 0x08
    38a2:	79 85       	ldd	r23, Y+9	; 0x09
    38a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    38a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e8       	ldi	r20, 0x80	; 128
    38ae:	5f e3       	ldi	r21, 0x3F	; 63
    38b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38b4:	88 23       	and	r24, r24
    38b6:	2c f4       	brge	.+10     	; 0x38c2 <LCD_8bit_genEnablePulse+0x100>
		__ticks = 1;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	9f 83       	std	Y+7, r25	; 0x07
    38be:	8e 83       	std	Y+6, r24	; 0x06
    38c0:	3f c0       	rjmp	.+126    	; 0x3940 <LCD_8bit_genEnablePulse+0x17e>
	else if (__tmp > 65535)
    38c2:	68 85       	ldd	r22, Y+8	; 0x08
    38c4:	79 85       	ldd	r23, Y+9	; 0x09
    38c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    38c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	3f ef       	ldi	r19, 0xFF	; 255
    38ce:	4f e7       	ldi	r20, 0x7F	; 127
    38d0:	57 e4       	ldi	r21, 0x47	; 71
    38d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38d6:	18 16       	cp	r1, r24
    38d8:	4c f5       	brge	.+82     	; 0x392c <LCD_8bit_genEnablePulse+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38da:	6c 85       	ldd	r22, Y+12	; 0x0c
    38dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    38de:	8e 85       	ldd	r24, Y+14	; 0x0e
    38e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e2       	ldi	r20, 0x20	; 32
    38e8:	51 e4       	ldi	r21, 0x41	; 65
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	9f 83       	std	Y+7, r25	; 0x07
    3900:	8e 83       	std	Y+6, r24	; 0x06
    3902:	0f c0       	rjmp	.+30     	; 0x3922 <LCD_8bit_genEnablePulse+0x160>
    3904:	80 e9       	ldi	r24, 0x90	; 144
    3906:	91 e0       	ldi	r25, 0x01	; 1
    3908:	9d 83       	std	Y+5, r25	; 0x05
    390a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    390c:	8c 81       	ldd	r24, Y+4	; 0x04
    390e:	9d 81       	ldd	r25, Y+5	; 0x05
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <LCD_8bit_genEnablePulse+0x14e>
    3914:	9d 83       	std	Y+5, r25	; 0x05
    3916:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3918:	8e 81       	ldd	r24, Y+6	; 0x06
    391a:	9f 81       	ldd	r25, Y+7	; 0x07
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	9f 83       	std	Y+7, r25	; 0x07
    3920:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3922:	8e 81       	ldd	r24, Y+6	; 0x06
    3924:	9f 81       	ldd	r25, Y+7	; 0x07
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	69 f7       	brne	.-38     	; 0x3904 <LCD_8bit_genEnablePulse+0x142>
    392a:	24 c0       	rjmp	.+72     	; 0x3974 <LCD_8bit_genEnablePulse+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392c:	68 85       	ldd	r22, Y+8	; 0x08
    392e:	79 85       	ldd	r23, Y+9	; 0x09
    3930:	8a 85       	ldd	r24, Y+10	; 0x0a
    3932:	9b 85       	ldd	r25, Y+11	; 0x0b
    3934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	9f 83       	std	Y+7, r25	; 0x07
    393e:	8e 83       	std	Y+6, r24	; 0x06
    3940:	8e 81       	ldd	r24, Y+6	; 0x06
    3942:	9f 81       	ldd	r25, Y+7	; 0x07
    3944:	9b 83       	std	Y+3, r25	; 0x03
    3946:	8a 83       	std	Y+2, r24	; 0x02
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	9b 81       	ldd	r25, Y+3	; 0x03
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <LCD_8bit_genEnablePulse+0x18a>
    3950:	9b 83       	std	Y+3, r25	; 0x03
    3952:	8a 83       	std	Y+2, r24	; 0x02
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <LCD_8bit_genEnablePulse+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3956:	69 89       	ldd	r22, Y+17	; 0x11
    3958:	7a 89       	ldd	r23, Y+18	; 0x12
    395a:	8b 89       	ldd	r24, Y+19	; 0x13
    395c:	9c 89       	ldd	r25, Y+20	; 0x14
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	88 8b       	std	Y+16, r24	; 0x10
    3968:	88 89       	ldd	r24, Y+16	; 0x10
    396a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	8a 95       	dec	r24
    3970:	f1 f7       	brne	.-4      	; 0x396e <LCD_8bit_genEnablePulse+0x1ac>
    3972:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		error_status = GPIO_pinWrite(&(lcd->en), GPIO_LOW);
    3974:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3976:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3978:	01 96       	adiw	r24, 0x01	; 1
    397a:	60 e0       	ldi	r22, 0x00	; 0
    397c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    3980:	89 8f       	std	Y+25, r24	; 0x19
	}
	return error_status;
    3982:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3984:	6b 96       	adiw	r28, 0x1b	; 27
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
    3990:	cf 91       	pop	r28
    3992:	df 91       	pop	r29
    3994:	08 95       	ret

00003996 <numToStr>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
static STD_ReturnType numToStr(const uint32 num, char * str)
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	27 97       	sbiw	r28, 0x07	; 7
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	6a 83       	std	Y+2, r22	; 0x02
    39ac:	7b 83       	std	Y+3, r23	; 0x03
    39ae:	8c 83       	std	Y+4, r24	; 0x04
    39b0:	9d 83       	std	Y+5, r25	; 0x05
    39b2:	5f 83       	std	Y+7, r21	; 0x07
    39b4:	4e 83       	std	Y+6, r20	; 0x06
	STD_ReturnType error_status = E_OK;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str)
    39ba:	8e 81       	ldd	r24, Y+6	; 0x06
    39bc:	9f 81       	ldd	r25, Y+7	; 0x07
    39be:	00 97       	sbiw	r24, 0x00	; 0
    39c0:	11 f4       	brne	.+4      	; 0x39c6 <numToStr+0x30>
	{
		error_status = E_NOT_OK;
    39c2:	19 82       	std	Y+1, r1	; 0x01
    39c4:	25 c0       	rjmp	.+74     	; 0x3a10 <numToStr+0x7a>
	}
	else
	{
		sprintf(str, "%i", num);
    39c6:	8d b7       	in	r24, 0x3d	; 61
    39c8:	9e b7       	in	r25, 0x3e	; 62
    39ca:	08 97       	sbiw	r24, 0x08	; 8
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	9e bf       	out	0x3e, r25	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	8d bf       	out	0x3d, r24	; 61
    39d6:	ed b7       	in	r30, 0x3d	; 61
    39d8:	fe b7       	in	r31, 0x3e	; 62
    39da:	31 96       	adiw	r30, 0x01	; 1
    39dc:	8e 81       	ldd	r24, Y+6	; 0x06
    39de:	9f 81       	ldd	r25, Y+7	; 0x07
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	80 83       	st	Z, r24
    39e4:	80 e6       	ldi	r24, 0x60	; 96
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	93 83       	std	Z+3, r25	; 0x03
    39ea:	82 83       	std	Z+2, r24	; 0x02
    39ec:	8a 81       	ldd	r24, Y+2	; 0x02
    39ee:	9b 81       	ldd	r25, Y+3	; 0x03
    39f0:	ac 81       	ldd	r26, Y+4	; 0x04
    39f2:	bd 81       	ldd	r27, Y+5	; 0x05
    39f4:	84 83       	std	Z+4, r24	; 0x04
    39f6:	95 83       	std	Z+5, r25	; 0x05
    39f8:	a6 83       	std	Z+6, r26	; 0x06
    39fa:	b7 83       	std	Z+7, r27	; 0x07
    39fc:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <sprintf>
    3a00:	8d b7       	in	r24, 0x3d	; 61
    3a02:	9e b7       	in	r25, 0x3e	; 62
    3a04:	08 96       	adiw	r24, 0x08	; 8
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	9e bf       	out	0x3e, r25	; 62
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	8d bf       	out	0x3d, r24	; 61
	}
	return error_status;
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a12:	27 96       	adiw	r28, 0x07	; 7
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	08 95       	ret

00003a24 <KEYPAD_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_init(const keypad_t *keypad_obj)
{
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <KEYPAD_init+0x6>
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <KEYPAD_init+0x8>
    3a2c:	0f 92       	push	r0
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	9d 83       	std	Y+5, r25	; 0x05
    3a34:	8c 83       	std	Y+4, r24	; 0x04
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	8b 83       	std	Y+3, r24	; 0x03

	if(NULL == keypad_obj)				/* check for null pointer */
    3a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	11 f4       	brne	.+4      	; 0x3a46 <KEYPAD_init+0x22>
	{
		error_status = E_NOT_OK;
    3a42:	1b 82       	std	Y+3, r1	; 0x03
    3a44:	31 c0       	rjmp	.+98     	; 0x3aa8 <KEYPAD_init+0x84>
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    3a46:	1a 82       	std	Y+2, r1	; 0x02
    3a48:	19 82       	std	Y+1, r1	; 0x01
    3a4a:	0f c0       	rjmp	.+30     	; 0x3a6a <KEYPAD_init+0x46>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
    3a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	9a 81       	ldd	r25, Y+2	; 0x02
    3a54:	82 0f       	add	r24, r18
    3a56:	93 1f       	adc	r25, r19
    3a58:	61 e0       	ldi	r22, 0x01	; 1
    3a5a:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		int loop_counter;

		/* Make rows pins as output */
		for(loop_counter = 0; loop_counter < NUMBER_OF_ROWS; loop_counter++)
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	9a 81       	ldd	r25, Y+2	; 0x02
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	9a 83       	std	Y+2, r25	; 0x02
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6e:	84 30       	cpi	r24, 0x04	; 4
    3a70:	91 05       	cpc	r25, r1
    3a72:	64 f3       	brlt	.-40     	; 0x3a4c <KEYPAD_init+0x28>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    3a74:	1a 82       	std	Y+2, r1	; 0x02
    3a76:	19 82       	std	Y+1, r1	; 0x01
    3a78:	12 c0       	rjmp	.+36     	; 0x3a9e <KEYPAD_init+0x7a>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
    3a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a7e:	9c 01       	movw	r18, r24
    3a80:	2c 5f       	subi	r18, 0xFC	; 252
    3a82:	3f 4f       	sbci	r19, 0xFF	; 255
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	82 0f       	add	r24, r18
    3a8a:	93 1f       	adc	r25, r19
    3a8c:	60 e0       	ldi	r22, 0x00	; 0
    3a8e:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    3a92:	8b 83       	std	Y+3, r24	; 0x03
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->rows_pins[loop_counter]), GPIO_OUTPUT);
		}

		/* Make columns pins as input */
		for(loop_counter = 0; loop_counter < NUMBER_OF_COLUMNS; loop_counter++)
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	01 96       	adiw	r24, 0x01	; 1
    3a9a:	9a 83       	std	Y+2, r25	; 0x02
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	84 30       	cpi	r24, 0x04	; 4
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	4c f3       	brlt	.-46     	; 0x3a7a <KEYPAD_init+0x56>
		{
			error_status = GPIO_pinDirectionInit(&(keypad_obj->columns_pins[loop_counter]), GPIO_INPUT);
		}
	}
	return error_status;
    3aa8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	cf 91       	pop	r28
    3ab6:	df 91       	pop	r29
    3ab8:	08 95       	ret

00003aba <KEYPAD_getPressedKey>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType KEYPAD_getPressedKey(const keypad_t *keypad_obj, uint8 *value)
{
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	67 97       	sbiw	r28, 0x17	; 23
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	de bf       	out	0x3e, r29	; 62
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	9d 8b       	std	Y+21, r25	; 0x15
    3ad0:	8c 8b       	std	Y+20, r24	; 0x14
    3ad2:	7f 8b       	std	Y+23, r23	; 0x17
    3ad4:	6e 8b       	std	Y+22, r22	; 0x16
	STD_ReturnType error_status = E_OK; /* to store the error value to be returned */
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	8a 8b       	std	Y+18, r24	; 0x12

	if(NULL == keypad_obj)
    3ada:	8c 89       	ldd	r24, Y+20	; 0x14
    3adc:	9d 89       	ldd	r25, Y+21	; 0x15
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	11 f4       	brne	.+4      	; 0x3ae6 <KEYPAD_getPressedKey+0x2c>
	{
		error_status = E_NOT_OK;
    3ae2:	1a 8a       	std	Y+18, r1	; 0x12
    3ae4:	e4 c0       	rjmp	.+456    	; 0x3cae <KEYPAD_getPressedKey+0x1f4>
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
    3ae6:	1f 86       	std	Y+15, r1	; 0x0f
		/* make sure that initially all 4 rows pins logic is the same as the default of columns pins */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    3ae8:	19 8a       	std	Y+17, r1	; 0x11
    3aea:	0e c0       	rjmp	.+28     	; 0x3b08 <KEYPAD_getPressedKey+0x4e>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
    3aec:	2c 89       	ldd	r18, Y+20	; 0x14
    3aee:	3d 89       	ldd	r19, Y+21	; 0x15
    3af0:	89 89       	ldd	r24, Y+17	; 0x11
    3af2:	88 2f       	mov	r24, r24
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	82 0f       	add	r24, r18
    3af8:	93 1f       	adc	r25, r19
    3afa:	61 e0       	ldi	r22, 0x01	; 1
    3afc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    3b00:	8a 8b       	std	Y+18, r24	; 0x12
	}
	else{
		uint8 row_counter,col_counter,state; /* state will check the logic on each column pin */
		uint8 found_flag = 0;
		/* make sure that initially all 4 rows pins logic is the same as the default of columns pins */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    3b02:	89 89       	ldd	r24, Y+17	; 0x11
    3b04:	8f 5f       	subi	r24, 0xFF	; 255
    3b06:	89 8b       	std	Y+17, r24	; 0x11
    3b08:	89 89       	ldd	r24, Y+17	; 0x11
    3b0a:	84 30       	cpi	r24, 0x04	; 4
    3b0c:	78 f3       	brcs	.-34     	; 0x3aec <KEYPAD_getPressedKey+0x32>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
		}

		/* loop through Rows pins change their logic status one at a time */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    3b0e:	19 8a       	std	Y+17, r1	; 0x11
    3b10:	ca c0       	rjmp	.+404    	; 0x3ca6 <KEYPAD_getPressedKey+0x1ec>
		{
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_PRESSED);
    3b12:	2c 89       	ldd	r18, Y+20	; 0x14
    3b14:	3d 89       	ldd	r19, Y+21	; 0x15
    3b16:	89 89       	ldd	r24, Y+17	; 0x11
    3b18:	88 2f       	mov	r24, r24
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	82 0f       	add	r24, r18
    3b1e:	93 1f       	adc	r25, r19
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    3b26:	98 2f       	mov	r25, r24
    3b28:	8a 89       	ldd	r24, Y+18	; 0x12
    3b2a:	89 23       	and	r24, r25
    3b2c:	8a 8b       	std	Y+18, r24	; 0x12
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	a0 e0       	ldi	r26, 0x00	; 0
    3b34:	b0 e4       	ldi	r27, 0x40	; 64
    3b36:	8b 87       	std	Y+11, r24	; 0x0b
    3b38:	9c 87       	std	Y+12, r25	; 0x0c
    3b3a:	ad 87       	std	Y+13, r26	; 0x0d
    3b3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	4a e7       	ldi	r20, 0x7A	; 122
    3b4c:	55 e4       	ldi	r21, 0x45	; 69
    3b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	8f 83       	std	Y+7, r24	; 0x07
    3b58:	98 87       	std	Y+8, r25	; 0x08
    3b5a:	a9 87       	std	Y+9, r26	; 0x09
    3b5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e8       	ldi	r20, 0x80	; 128
    3b6c:	5f e3       	ldi	r21, 0x3F	; 63
    3b6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b72:	88 23       	and	r24, r24
    3b74:	2c f4       	brge	.+10     	; 0x3b80 <KEYPAD_getPressedKey+0xc6>
		__ticks = 1;
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
    3b7e:	3f c0       	rjmp	.+126    	; 0x3bfe <KEYPAD_getPressedKey+0x144>
	else if (__tmp > 65535)
    3b80:	6f 81       	ldd	r22, Y+7	; 0x07
    3b82:	78 85       	ldd	r23, Y+8	; 0x08
    3b84:	89 85       	ldd	r24, Y+9	; 0x09
    3b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	3f ef       	ldi	r19, 0xFF	; 255
    3b8c:	4f e7       	ldi	r20, 0x7F	; 127
    3b8e:	57 e4       	ldi	r21, 0x47	; 71
    3b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b94:	18 16       	cp	r1, r24
    3b96:	4c f5       	brge	.+82     	; 0x3bea <KEYPAD_getPressedKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e2       	ldi	r20, 0x20	; 32
    3ba6:	51 e4       	ldi	r21, 0x41	; 65
    3ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	bc 01       	movw	r22, r24
    3bb2:	cd 01       	movw	r24, r26
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
    3bc0:	0f c0       	rjmp	.+30     	; 0x3be0 <KEYPAD_getPressedKey+0x126>
    3bc2:	80 e9       	ldi	r24, 0x90	; 144
    3bc4:	91 e0       	ldi	r25, 0x01	; 1
    3bc6:	9c 83       	std	Y+4, r25	; 0x04
    3bc8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	f1 f7       	brne	.-4      	; 0x3bce <KEYPAD_getPressedKey+0x114>
    3bd2:	9c 83       	std	Y+4, r25	; 0x04
    3bd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	9e 83       	std	Y+6, r25	; 0x06
    3bde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be0:	8d 81       	ldd	r24, Y+5	; 0x05
    3be2:	9e 81       	ldd	r25, Y+6	; 0x06
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	69 f7       	brne	.-38     	; 0x3bc2 <KEYPAD_getPressedKey+0x108>
    3be8:	14 c0       	rjmp	.+40     	; 0x3c12 <KEYPAD_getPressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bea:	6f 81       	ldd	r22, Y+7	; 0x07
    3bec:	78 85       	ldd	r23, Y+8	; 0x08
    3bee:	89 85       	ldd	r24, Y+9	; 0x09
    3bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    3bfc:	8d 83       	std	Y+5, r24	; 0x05
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	9e 81       	ldd	r25, Y+6	; 0x06
    3c02:	9a 83       	std	Y+2, r25	; 0x02
    3c04:	89 83       	std	Y+1, r24	; 0x01
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <KEYPAD_getPressedKey+0x150>
    3c0e:	9a 83       	std	Y+2, r25	; 0x02
    3c10:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    3c12:	18 8a       	std	Y+16, r1	; 0x10
    3c14:	31 c0       	rjmp	.+98     	; 0x3c78 <KEYPAD_getPressedKey+0x1be>
			{
				error_status &= GPIO_pinRead(&(keypad_obj->columns_pins[col_counter]), &state);
    3c16:	8c 89       	ldd	r24, Y+20	; 0x14
    3c18:	9d 89       	ldd	r25, Y+21	; 0x15
    3c1a:	9c 01       	movw	r18, r24
    3c1c:	2c 5f       	subi	r18, 0xFC	; 252
    3c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c20:	88 89       	ldd	r24, Y+16	; 0x10
    3c22:	88 2f       	mov	r24, r24
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	82 0f       	add	r24, r18
    3c28:	93 1f       	adc	r25, r19
    3c2a:	9e 01       	movw	r18, r28
    3c2c:	2d 5e       	subi	r18, 0xED	; 237
    3c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c30:	b9 01       	movw	r22, r18
    3c32:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_pinRead>
    3c36:	98 2f       	mov	r25, r24
    3c38:	8a 89       	ldd	r24, Y+18	; 0x12
    3c3a:	89 23       	and	r24, r25
    3c3c:	8a 8b       	std	Y+18, r24	; 0x12

				/* Check if state variable changes to  KEYPAD_BUTTON_PRESSED */
				if(KEYPAD_BUTTON_PRESSED == state)
    3c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c40:	88 23       	and	r24, r24
    3c42:	b9 f4       	brne	.+46     	; 0x3c72 <KEYPAD_getPressedKey+0x1b8>
				{
					/* Store the value in the passed argument */
					*value = btn_values[row_counter][col_counter];
    3c44:	89 89       	ldd	r24, Y+17	; 0x11
    3c46:	48 2f       	mov	r20, r24
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	88 89       	ldd	r24, Y+16	; 0x10
    3c4c:	28 2f       	mov	r18, r24
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	ca 01       	movw	r24, r20
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	82 0f       	add	r24, r18
    3c5c:	93 1f       	adc	r25, r19
    3c5e:	fc 01       	movw	r30, r24
    3c60:	ed 57       	subi	r30, 0x7D	; 125
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	80 81       	ld	r24, Z
    3c66:	ee 89       	ldd	r30, Y+22	; 0x16
    3c68:	ff 89       	ldd	r31, Y+23	; 0x17
    3c6a:	80 83       	st	Z, r24

					/* set the found flag, break to outer loop */
					found_flag = 1;
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	8f 87       	std	Y+15, r24	; 0x0f
    3c70:	06 c0       	rjmp	.+12     	; 0x3c7e <KEYPAD_getPressedKey+0x1c4>
		{
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_PRESSED);
			_delay_ms(2);

			/* then, read all columns pin status */
			for(col_counter = 0; col_counter < NUMBER_OF_COLUMNS; col_counter++)
    3c72:	88 89       	ldd	r24, Y+16	; 0x10
    3c74:	8f 5f       	subi	r24, 0xFF	; 255
    3c76:	88 8b       	std	Y+16, r24	; 0x10
    3c78:	88 89       	ldd	r24, Y+16	; 0x10
    3c7a:	84 30       	cpi	r24, 0x04	; 4
    3c7c:	60 f2       	brcs	.-104    	; 0x3c16 <KEYPAD_getPressedKey+0x15c>
					break;
				}else{}
			}

			/* Reset the row pin to default */
			error_status &= GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
    3c7e:	2c 89       	ldd	r18, Y+20	; 0x14
    3c80:	3d 89       	ldd	r19, Y+21	; 0x15
    3c82:	89 89       	ldd	r24, Y+17	; 0x11
    3c84:	88 2f       	mov	r24, r24
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	82 0f       	add	r24, r18
    3c8a:	93 1f       	adc	r25, r19
    3c8c:	61 e0       	ldi	r22, 0x01	; 1
    3c8e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_pinWrite>
    3c92:	98 2f       	mov	r25, r24
    3c94:	8a 89       	ldd	r24, Y+18	; 0x12
    3c96:	89 23       	and	r24, r25
    3c98:	8a 8b       	std	Y+18, r24	; 0x12

			/* if a key has been pressed, break to end of function */
			if (1 == found_flag)
    3c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c9c:	81 30       	cpi	r24, 0x01	; 1
    3c9e:	39 f0       	breq	.+14     	; 0x3cae <KEYPAD_getPressedKey+0x1f4>
		{
			error_status = GPIO_pinWrite(&(keypad_obj->rows_pins[row_counter]), KEYPAD_BUTTON_RELEASED);
		}

		/* loop through Rows pins change their logic status one at a time */
		for(row_counter = 0; row_counter < NUMBER_OF_ROWS; row_counter++)
    3ca0:	89 89       	ldd	r24, Y+17	; 0x11
    3ca2:	8f 5f       	subi	r24, 0xFF	; 255
    3ca4:	89 8b       	std	Y+17, r24	; 0x11
    3ca6:	89 89       	ldd	r24, Y+17	; 0x11
    3ca8:	84 30       	cpi	r24, 0x04	; 4
    3caa:	08 f4       	brcc	.+2      	; 0x3cae <KEYPAD_getPressedKey+0x1f4>
    3cac:	32 cf       	rjmp	.-412    	; 0x3b12 <KEYPAD_getPressedKey+0x58>
			{
				break;
			}else{}
		}
	}
	return error_status;
    3cae:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3cb0:	67 96       	adiw	r28, 0x17	; 23
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	cf 91       	pop	r28
    3cbe:	df 91       	pop	r29
    3cc0:	08 95       	ret

00003cc2 <BUTTON_init>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_init(const button_t *btn)
{
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	00 d0       	rcall	.+0      	; 0x3cc8 <BUTTON_init+0x6>
    3cc8:	00 d0       	rcall	.+0      	; 0x3cca <BUTTON_init+0x8>
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	9c 83       	std	Y+4, r25	; 0x04
    3cd0:	8b 83       	std	Y+3, r24	; 0x03
	STD_ReturnType error_status = E_OK;
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == btn)
    3cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	11 f4       	brne	.+4      	; 0x3ce2 <BUTTON_init+0x20>
	{
		error_status = E_NOT_OK;
    3cde:	19 82       	std	Y+1, r1	; 0x01
    3ce0:	34 c0       	rjmp	.+104    	; 0x3d4a <BUTTON_init+0x88>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id,
				.direction = GPIO_INPUT, .logic = btn->internal_pullup_t};
    3ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce6:	80 81       	ld	r24, Z
    3ce8:	28 2f       	mov	r18, r24
    3cea:	23 70       	andi	r18, 0x03	; 3
    3cec:	eb 81       	ldd	r30, Y+3	; 0x03
    3cee:	fc 81       	ldd	r31, Y+4	; 0x04
    3cf0:	80 81       	ld	r24, Z
    3cf2:	98 2f       	mov	r25, r24
    3cf4:	96 95       	lsr	r25
    3cf6:	96 95       	lsr	r25
    3cf8:	97 70       	andi	r25, 0x07	; 7
    3cfa:	eb 81       	ldd	r30, Y+3	; 0x03
    3cfc:	fc 81       	ldd	r31, Y+4	; 0x04
    3cfe:	80 81       	ld	r24, Z
    3d00:	38 2f       	mov	r19, r24
    3d02:	32 95       	swap	r19
    3d04:	36 95       	lsr	r19
    3d06:	36 95       	lsr	r19
    3d08:	33 70       	andi	r19, 0x03	; 3
    3d0a:	31 70       	andi	r19, 0x01	; 1
    3d0c:	1a 82       	std	Y+2, r1	; 0x02
    3d0e:	23 70       	andi	r18, 0x03	; 3
    3d10:	8a 81       	ldd	r24, Y+2	; 0x02
    3d12:	8c 7f       	andi	r24, 0xFC	; 252
    3d14:	82 2b       	or	r24, r18
    3d16:	8a 83       	std	Y+2, r24	; 0x02
    3d18:	89 2f       	mov	r24, r25
    3d1a:	87 70       	andi	r24, 0x07	; 7
    3d1c:	98 2f       	mov	r25, r24
    3d1e:	99 0f       	add	r25, r25
    3d20:	99 0f       	add	r25, r25
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	83 7e       	andi	r24, 0xE3	; 227
    3d26:	89 2b       	or	r24, r25
    3d28:	8a 83       	std	Y+2, r24	; 0x02
    3d2a:	83 2f       	mov	r24, r19
    3d2c:	81 70       	andi	r24, 0x01	; 1
    3d2e:	98 2f       	mov	r25, r24
    3d30:	92 95       	swap	r25
    3d32:	99 0f       	add	r25, r25
    3d34:	99 0f       	add	r25, r25
    3d36:	90 7c       	andi	r25, 0xC0	; 192
    3d38:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3a:	8f 7b       	andi	r24, 0xBF	; 191
    3d3c:	89 2b       	or	r24, r25
    3d3e:	8a 83       	std	Y+2, r24	; 0x02
		error_status = GPIO_pinInit(&btn_pin);
    3d40:	ce 01       	movw	r24, r28
    3d42:	02 96       	adiw	r24, 0x02	; 2
    3d44:	0e 94 05 08 	call	0x100a	; 0x100a <GPIO_pinInit>
    3d48:	89 83       	std	Y+1, r24	; 0x01
	}

	return error_status;
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	08 95       	ret

00003d5a <BUTTON_read>:
 * @return status of the function:
 * 						(E_OK): the function finished successfully
 * 						(E_NOT_OK): A problem occurred in function
 */
STD_ReturnType BUTTON_read(const button_t *btn, uint8 *btn_state)
{
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	2b 97       	sbiw	r28, 0x0b	; 11
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	9d 83       	std	Y+5, r25	; 0x05
    3d70:	8c 83       	std	Y+4, r24	; 0x04
    3d72:	7f 83       	std	Y+7, r23	; 0x07
    3d74:	6e 83       	std	Y+6, r22	; 0x06
	STD_ReturnType error_status = E_OK;
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	89 83       	std	Y+1, r24	; 0x01
	GPIO_logic_t btn_pin_status;
	if(NULL == btn)
    3d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d7e:	00 97       	sbiw	r24, 0x00	; 0
    3d80:	11 f4       	brne	.+4      	; 0x3d86 <BUTTON_read+0x2c>
	{
		error_status = E_NOT_OK;
    3d82:	19 82       	std	Y+1, r1	; 0x01
    3d84:	51 c0       	rjmp	.+162    	; 0x3e28 <BUTTON_read+0xce>
	}
	else
	{
		pin_obj_t btn_pin = {.port_id = btn->port_id, .pin_id = btn->pin_id};
    3d86:	ec 81       	ldd	r30, Y+4	; 0x04
    3d88:	fd 81       	ldd	r31, Y+5	; 0x05
    3d8a:	80 81       	ld	r24, Z
    3d8c:	28 2f       	mov	r18, r24
    3d8e:	23 70       	andi	r18, 0x03	; 3
    3d90:	ec 81       	ldd	r30, Y+4	; 0x04
    3d92:	fd 81       	ldd	r31, Y+5	; 0x05
    3d94:	80 81       	ld	r24, Z
    3d96:	98 2f       	mov	r25, r24
    3d98:	96 95       	lsr	r25
    3d9a:	96 95       	lsr	r25
    3d9c:	97 70       	andi	r25, 0x07	; 7
    3d9e:	1b 82       	std	Y+3, r1	; 0x03
    3da0:	23 70       	andi	r18, 0x03	; 3
    3da2:	8b 81       	ldd	r24, Y+3	; 0x03
    3da4:	8c 7f       	andi	r24, 0xFC	; 252
    3da6:	82 2b       	or	r24, r18
    3da8:	8b 83       	std	Y+3, r24	; 0x03
    3daa:	89 2f       	mov	r24, r25
    3dac:	87 70       	andi	r24, 0x07	; 7
    3dae:	98 2f       	mov	r25, r24
    3db0:	99 0f       	add	r25, r25
    3db2:	99 0f       	add	r25, r25
    3db4:	8b 81       	ldd	r24, Y+3	; 0x03
    3db6:	83 7e       	andi	r24, 0xE3	; 227
    3db8:	89 2b       	or	r24, r25
    3dba:	8b 83       	std	Y+3, r24	; 0x03
		error_status = GPIO_pinRead(&btn_pin, &btn_pin_status);
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	03 96       	adiw	r24, 0x03	; 3
    3dc0:	9e 01       	movw	r18, r28
    3dc2:	2e 5f       	subi	r18, 0xFE	; 254
    3dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc6:	b9 01       	movw	r22, r18
    3dc8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_pinRead>
    3dcc:	89 83       	std	Y+1, r24	; 0x01
		switch(btn->button_active_t)
    3dce:	ec 81       	ldd	r30, Y+4	; 0x04
    3dd0:	fd 81       	ldd	r31, Y+5	; 0x05
    3dd2:	80 81       	ld	r24, Z
    3dd4:	82 95       	swap	r24
    3dd6:	86 95       	lsr	r24
    3dd8:	87 70       	andi	r24, 0x07	; 7
    3dda:	81 70       	andi	r24, 0x01	; 1
    3ddc:	28 2f       	mov	r18, r24
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	3a 87       	std	Y+10, r19	; 0x0a
    3de2:	29 87       	std	Y+9, r18	; 0x09
    3de4:	89 85       	ldd	r24, Y+9	; 0x09
    3de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de8:	00 97       	sbiw	r24, 0x00	; 0
    3dea:	31 f0       	breq	.+12     	; 0x3df8 <BUTTON_read+0x9e>
    3dec:	29 85       	ldd	r18, Y+9	; 0x09
    3dee:	3a 85       	ldd	r19, Y+10	; 0x0a
    3df0:	21 30       	cpi	r18, 0x01	; 1
    3df2:	31 05       	cpc	r19, r1
    3df4:	61 f0       	breq	.+24     	; 0x3e0e <BUTTON_read+0xb4>
    3df6:	17 c0       	rjmp	.+46     	; 0x3e26 <BUTTON_read+0xcc>
		{
		case BUTTON_ACTIVE_HIGH:

			(*btn_state) = btn_pin_status == GPIO_HIGH ? BUTTON_PRESSED : BUTTON_RELEASED;
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	18 86       	std	Y+8, r1	; 0x08
    3dfc:	81 30       	cpi	r24, 0x01	; 1
    3dfe:	11 f0       	breq	.+4      	; 0x3e04 <BUTTON_read+0xaa>
    3e00:	31 e0       	ldi	r19, 0x01	; 1
    3e02:	38 87       	std	Y+8, r19	; 0x08
    3e04:	ee 81       	ldd	r30, Y+6	; 0x06
    3e06:	ff 81       	ldd	r31, Y+7	; 0x07
    3e08:	88 85       	ldd	r24, Y+8	; 0x08
    3e0a:	80 83       	st	Z, r24
    3e0c:	0d c0       	rjmp	.+26     	; 0x3e28 <BUTTON_read+0xce>
			break;

		case BUTTON_ACTIVE_LOW:

			(*btn_state) = btn_pin_status == GPIO_LOW ? BUTTON_PRESSED : BUTTON_RELEASED;
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e10:	8b 87       	std	Y+11, r24	; 0x0b
    3e12:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e14:	99 23       	and	r25, r25
    3e16:	11 f0       	breq	.+4      	; 0x3e1c <BUTTON_read+0xc2>
    3e18:	21 e0       	ldi	r18, 0x01	; 1
    3e1a:	2b 87       	std	Y+11, r18	; 0x0b
    3e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e1e:	ee 81       	ldd	r30, Y+6	; 0x06
    3e20:	ff 81       	ldd	r31, Y+7	; 0x07
    3e22:	80 83       	st	Z, r24
    3e24:	01 c0       	rjmp	.+2      	; 0x3e28 <BUTTON_read+0xce>
			break;

		default:
			error_status = E_NOT_OK;
    3e26:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return error_status;
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e2a:	2b 96       	adiw	r28, 0x0b	; 11
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	de bf       	out	0x3e, r29	; 62
    3e32:	0f be       	out	0x3f, r0	; 63
    3e34:	cd bf       	out	0x3d, r28	; 61
    3e36:	cf 91       	pop	r28
    3e38:	df 91       	pop	r29
    3e3a:	08 95       	ret

00003e3c <my_isr>:
#include "ECUAL_layer/LCD_driver/lcd.h"

	volatile pin_obj_t pa0 = {.port_id = PORTA_ID, .pin_id = PIN_0};

void my_isr(void)
{
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
	GPIO_pinToggle(&pa0);
    3e44:	84 ea       	ldi	r24, 0xA4	; 164
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	0e 94 a3 0a 	call	0x1546	; 0x1546 <GPIO_pinToggle>
}
    3e4c:	cf 91       	pop	r28
    3e4e:	df 91       	pop	r29
    3e50:	08 95       	ret

00003e52 <main>:

int main()
{
    3e52:	df 93       	push	r29
    3e54:	cf 93       	push	r28
    3e56:	0f 92       	push	r0
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
	volatile button_t btn1 = {.port_id = PORTD_ID, .pin_id = PIN_2, .button_active_t = BUTTON_ACTIVE_LOW, .internal_pullup_t = ENABLED};
    3e5c:	19 82       	std	Y+1, r1	; 0x01
    3e5e:	89 81       	ldd	r24, Y+1	; 0x01
    3e60:	83 60       	ori	r24, 0x03	; 3
    3e62:	89 83       	std	Y+1, r24	; 0x01
    3e64:	89 81       	ldd	r24, Y+1	; 0x01
    3e66:	83 7e       	andi	r24, 0xE3	; 227
    3e68:	88 60       	ori	r24, 0x08	; 8
    3e6a:	89 83       	std	Y+1, r24	; 0x01
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	80 62       	ori	r24, 0x20	; 32
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	80 64       	ori	r24, 0x40	; 64
    3e76:	89 83       	std	Y+1, r24	; 0x01
	BUTTON_init(&btn1);
    3e78:	ce 01       	movw	r24, r28
    3e7a:	01 96       	adiw	r24, 0x01	; 1
    3e7c:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <BUTTON_init>
	INTERRUPT_globalInterruptEnable();
    3e80:	af e5       	ldi	r26, 0x5F	; 95
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	ef e5       	ldi	r30, 0x5F	; 95
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	80 81       	ld	r24, Z
    3e8a:	80 68       	ori	r24, 0x80	; 128
    3e8c:	8c 93       	st	X, r24
	INTERRUPT_EXTI0_setTrigger(FALLING_EDGE);
    3e8e:	82 e0       	ldi	r24, 0x02	; 2
    3e90:	0e 94 4f 06 	call	0xc9e	; 0xc9e <INTERRUPT_EXTI0_setTrigger>
	INTERRUPT_EXTI0_Enable();
    3e94:	ab e5       	ldi	r26, 0x5B	; 91
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	eb e5       	ldi	r30, 0x5B	; 91
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	80 81       	ld	r24, Z
    3e9e:	80 64       	ori	r24, 0x40	; 64
    3ea0:	8c 93       	st	X, r24
	INTERRUPT_EXTI0_setCallback(my_isr);
    3ea2:	8e e1       	ldi	r24, 0x1E	; 30
    3ea4:	9f e1       	ldi	r25, 0x1F	; 31
    3ea6:	0e 94 27 07 	call	0xe4e	; 0xe4e <INTERRUPT_EXTI0_setCallback>
	GPIO_pinDirectionInit(&pa0, GPIO_OUTPUT);
    3eaa:	84 ea       	ldi	r24, 0xA4	; 164
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	61 e0       	ldi	r22, 0x01	; 1
    3eb0:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_pinDirectionInit>
    3eb4:	ff cf       	rjmp	.-2      	; 0x3eb4 <main+0x62>

00003eb6 <__prologue_saves__>:
    3eb6:	2f 92       	push	r2
    3eb8:	3f 92       	push	r3
    3eba:	4f 92       	push	r4
    3ebc:	5f 92       	push	r5
    3ebe:	6f 92       	push	r6
    3ec0:	7f 92       	push	r7
    3ec2:	8f 92       	push	r8
    3ec4:	9f 92       	push	r9
    3ec6:	af 92       	push	r10
    3ec8:	bf 92       	push	r11
    3eca:	cf 92       	push	r12
    3ecc:	df 92       	push	r13
    3ece:	ef 92       	push	r14
    3ed0:	ff 92       	push	r15
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	ca 1b       	sub	r28, r26
    3ee0:	db 0b       	sbc	r29, r27
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	09 94       	ijmp

00003eee <__epilogue_restores__>:
    3eee:	2a 88       	ldd	r2, Y+18	; 0x12
    3ef0:	39 88       	ldd	r3, Y+17	; 0x11
    3ef2:	48 88       	ldd	r4, Y+16	; 0x10
    3ef4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ef6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ef8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3efa:	8c 84       	ldd	r8, Y+12	; 0x0c
    3efc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3efe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f00:	b9 84       	ldd	r11, Y+9	; 0x09
    3f02:	c8 84       	ldd	r12, Y+8	; 0x08
    3f04:	df 80       	ldd	r13, Y+7	; 0x07
    3f06:	ee 80       	ldd	r14, Y+6	; 0x06
    3f08:	fd 80       	ldd	r15, Y+5	; 0x05
    3f0a:	0c 81       	ldd	r16, Y+4	; 0x04
    3f0c:	1b 81       	ldd	r17, Y+3	; 0x03
    3f0e:	aa 81       	ldd	r26, Y+2	; 0x02
    3f10:	b9 81       	ldd	r27, Y+1	; 0x01
    3f12:	ce 0f       	add	r28, r30
    3f14:	d1 1d       	adc	r29, r1
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	ed 01       	movw	r28, r26
    3f22:	08 95       	ret

00003f24 <sprintf>:
    3f24:	ae e0       	ldi	r26, 0x0E	; 14
    3f26:	b0 e0       	ldi	r27, 0x00	; 0
    3f28:	e8 e9       	ldi	r30, 0x98	; 152
    3f2a:	ff e1       	ldi	r31, 0x1F	; 31
    3f2c:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__prologue_saves__+0x1c>
    3f30:	0d 89       	ldd	r16, Y+21	; 0x15
    3f32:	1e 89       	ldd	r17, Y+22	; 0x16
    3f34:	86 e0       	ldi	r24, 0x06	; 6
    3f36:	8c 83       	std	Y+4, r24	; 0x04
    3f38:	1a 83       	std	Y+2, r17	; 0x02
    3f3a:	09 83       	std	Y+1, r16	; 0x01
    3f3c:	8f ef       	ldi	r24, 0xFF	; 255
    3f3e:	9f e7       	ldi	r25, 0x7F	; 127
    3f40:	9e 83       	std	Y+6, r25	; 0x06
    3f42:	8d 83       	std	Y+5, r24	; 0x05
    3f44:	9e 01       	movw	r18, r28
    3f46:	27 5e       	subi	r18, 0xE7	; 231
    3f48:	3f 4f       	sbci	r19, 0xFF	; 255
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	01 96       	adiw	r24, 0x01	; 1
    3f4e:	6f 89       	ldd	r22, Y+23	; 0x17
    3f50:	78 8d       	ldd	r23, Y+24	; 0x18
    3f52:	a9 01       	movw	r20, r18
    3f54:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <vfprintf>
    3f58:	2f 81       	ldd	r18, Y+7	; 0x07
    3f5a:	38 85       	ldd	r19, Y+8	; 0x08
    3f5c:	02 0f       	add	r16, r18
    3f5e:	13 1f       	adc	r17, r19
    3f60:	f8 01       	movw	r30, r16
    3f62:	10 82       	st	Z, r1
    3f64:	2e 96       	adiw	r28, 0x0e	; 14
    3f66:	e4 e0       	ldi	r30, 0x04	; 4
    3f68:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <__epilogue_restores__+0x1c>

00003f6c <vfprintf>:
    3f6c:	ab e0       	ldi	r26, 0x0B	; 11
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	ec eb       	ldi	r30, 0xBC	; 188
    3f72:	ff e1       	ldi	r31, 0x1F	; 31
    3f74:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__>
    3f78:	3c 01       	movw	r6, r24
    3f7a:	2b 01       	movw	r4, r22
    3f7c:	5a 01       	movw	r10, r20
    3f7e:	fc 01       	movw	r30, r24
    3f80:	17 82       	std	Z+7, r1	; 0x07
    3f82:	16 82       	std	Z+6, r1	; 0x06
    3f84:	83 81       	ldd	r24, Z+3	; 0x03
    3f86:	81 fd       	sbrc	r24, 1
    3f88:	03 c0       	rjmp	.+6      	; 0x3f90 <vfprintf+0x24>
    3f8a:	6f ef       	ldi	r22, 0xFF	; 255
    3f8c:	7f ef       	ldi	r23, 0xFF	; 255
    3f8e:	c6 c1       	rjmp	.+908    	; 0x431c <vfprintf+0x3b0>
    3f90:	9a e0       	ldi	r25, 0x0A	; 10
    3f92:	89 2e       	mov	r8, r25
    3f94:	1e 01       	movw	r2, r28
    3f96:	08 94       	sec
    3f98:	21 1c       	adc	r2, r1
    3f9a:	31 1c       	adc	r3, r1
    3f9c:	f3 01       	movw	r30, r6
    3f9e:	23 81       	ldd	r18, Z+3	; 0x03
    3fa0:	f2 01       	movw	r30, r4
    3fa2:	23 fd       	sbrc	r18, 3
    3fa4:	85 91       	lpm	r24, Z+
    3fa6:	23 ff       	sbrs	r18, 3
    3fa8:	81 91       	ld	r24, Z+
    3faa:	2f 01       	movw	r4, r30
    3fac:	88 23       	and	r24, r24
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <vfprintf+0x46>
    3fb0:	b2 c1       	rjmp	.+868    	; 0x4316 <vfprintf+0x3aa>
    3fb2:	85 32       	cpi	r24, 0x25	; 37
    3fb4:	39 f4       	brne	.+14     	; 0x3fc4 <vfprintf+0x58>
    3fb6:	23 fd       	sbrc	r18, 3
    3fb8:	85 91       	lpm	r24, Z+
    3fba:	23 ff       	sbrs	r18, 3
    3fbc:	81 91       	ld	r24, Z+
    3fbe:	2f 01       	movw	r4, r30
    3fc0:	85 32       	cpi	r24, 0x25	; 37
    3fc2:	29 f4       	brne	.+10     	; 0x3fce <vfprintf+0x62>
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	b3 01       	movw	r22, r6
    3fc8:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    3fcc:	e7 cf       	rjmp	.-50     	; 0x3f9c <vfprintf+0x30>
    3fce:	98 2f       	mov	r25, r24
    3fd0:	ff 24       	eor	r15, r15
    3fd2:	ee 24       	eor	r14, r14
    3fd4:	99 24       	eor	r9, r9
    3fd6:	ff e1       	ldi	r31, 0x1F	; 31
    3fd8:	ff 15       	cp	r31, r15
    3fda:	d0 f0       	brcs	.+52     	; 0x4010 <vfprintf+0xa4>
    3fdc:	9b 32       	cpi	r25, 0x2B	; 43
    3fde:	69 f0       	breq	.+26     	; 0x3ffa <vfprintf+0x8e>
    3fe0:	9c 32       	cpi	r25, 0x2C	; 44
    3fe2:	28 f4       	brcc	.+10     	; 0x3fee <vfprintf+0x82>
    3fe4:	90 32       	cpi	r25, 0x20	; 32
    3fe6:	59 f0       	breq	.+22     	; 0x3ffe <vfprintf+0x92>
    3fe8:	93 32       	cpi	r25, 0x23	; 35
    3fea:	91 f4       	brne	.+36     	; 0x4010 <vfprintf+0xa4>
    3fec:	0e c0       	rjmp	.+28     	; 0x400a <vfprintf+0x9e>
    3fee:	9d 32       	cpi	r25, 0x2D	; 45
    3ff0:	49 f0       	breq	.+18     	; 0x4004 <vfprintf+0x98>
    3ff2:	90 33       	cpi	r25, 0x30	; 48
    3ff4:	69 f4       	brne	.+26     	; 0x4010 <vfprintf+0xa4>
    3ff6:	41 e0       	ldi	r20, 0x01	; 1
    3ff8:	24 c0       	rjmp	.+72     	; 0x4042 <vfprintf+0xd6>
    3ffa:	52 e0       	ldi	r21, 0x02	; 2
    3ffc:	f5 2a       	or	r15, r21
    3ffe:	84 e0       	ldi	r24, 0x04	; 4
    4000:	f8 2a       	or	r15, r24
    4002:	28 c0       	rjmp	.+80     	; 0x4054 <vfprintf+0xe8>
    4004:	98 e0       	ldi	r25, 0x08	; 8
    4006:	f9 2a       	or	r15, r25
    4008:	25 c0       	rjmp	.+74     	; 0x4054 <vfprintf+0xe8>
    400a:	e0 e1       	ldi	r30, 0x10	; 16
    400c:	fe 2a       	or	r15, r30
    400e:	22 c0       	rjmp	.+68     	; 0x4054 <vfprintf+0xe8>
    4010:	f7 fc       	sbrc	r15, 7
    4012:	29 c0       	rjmp	.+82     	; 0x4066 <vfprintf+0xfa>
    4014:	89 2f       	mov	r24, r25
    4016:	80 53       	subi	r24, 0x30	; 48
    4018:	8a 30       	cpi	r24, 0x0A	; 10
    401a:	70 f4       	brcc	.+28     	; 0x4038 <vfprintf+0xcc>
    401c:	f6 fe       	sbrs	r15, 6
    401e:	05 c0       	rjmp	.+10     	; 0x402a <vfprintf+0xbe>
    4020:	98 9c       	mul	r9, r8
    4022:	90 2c       	mov	r9, r0
    4024:	11 24       	eor	r1, r1
    4026:	98 0e       	add	r9, r24
    4028:	15 c0       	rjmp	.+42     	; 0x4054 <vfprintf+0xe8>
    402a:	e8 9c       	mul	r14, r8
    402c:	e0 2c       	mov	r14, r0
    402e:	11 24       	eor	r1, r1
    4030:	e8 0e       	add	r14, r24
    4032:	f0 e2       	ldi	r31, 0x20	; 32
    4034:	ff 2a       	or	r15, r31
    4036:	0e c0       	rjmp	.+28     	; 0x4054 <vfprintf+0xe8>
    4038:	9e 32       	cpi	r25, 0x2E	; 46
    403a:	29 f4       	brne	.+10     	; 0x4046 <vfprintf+0xda>
    403c:	f6 fc       	sbrc	r15, 6
    403e:	6b c1       	rjmp	.+726    	; 0x4316 <vfprintf+0x3aa>
    4040:	40 e4       	ldi	r20, 0x40	; 64
    4042:	f4 2a       	or	r15, r20
    4044:	07 c0       	rjmp	.+14     	; 0x4054 <vfprintf+0xe8>
    4046:	9c 36       	cpi	r25, 0x6C	; 108
    4048:	19 f4       	brne	.+6      	; 0x4050 <vfprintf+0xe4>
    404a:	50 e8       	ldi	r21, 0x80	; 128
    404c:	f5 2a       	or	r15, r21
    404e:	02 c0       	rjmp	.+4      	; 0x4054 <vfprintf+0xe8>
    4050:	98 36       	cpi	r25, 0x68	; 104
    4052:	49 f4       	brne	.+18     	; 0x4066 <vfprintf+0xfa>
    4054:	f2 01       	movw	r30, r4
    4056:	23 fd       	sbrc	r18, 3
    4058:	95 91       	lpm	r25, Z+
    405a:	23 ff       	sbrs	r18, 3
    405c:	91 91       	ld	r25, Z+
    405e:	2f 01       	movw	r4, r30
    4060:	99 23       	and	r25, r25
    4062:	09 f0       	breq	.+2      	; 0x4066 <vfprintf+0xfa>
    4064:	b8 cf       	rjmp	.-144    	; 0x3fd6 <vfprintf+0x6a>
    4066:	89 2f       	mov	r24, r25
    4068:	85 54       	subi	r24, 0x45	; 69
    406a:	83 30       	cpi	r24, 0x03	; 3
    406c:	18 f0       	brcs	.+6      	; 0x4074 <vfprintf+0x108>
    406e:	80 52       	subi	r24, 0x20	; 32
    4070:	83 30       	cpi	r24, 0x03	; 3
    4072:	38 f4       	brcc	.+14     	; 0x4082 <vfprintf+0x116>
    4074:	44 e0       	ldi	r20, 0x04	; 4
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	a4 0e       	add	r10, r20
    407a:	b5 1e       	adc	r11, r21
    407c:	5f e3       	ldi	r21, 0x3F	; 63
    407e:	59 83       	std	Y+1, r21	; 0x01
    4080:	0f c0       	rjmp	.+30     	; 0x40a0 <vfprintf+0x134>
    4082:	93 36       	cpi	r25, 0x63	; 99
    4084:	31 f0       	breq	.+12     	; 0x4092 <vfprintf+0x126>
    4086:	93 37       	cpi	r25, 0x73	; 115
    4088:	79 f0       	breq	.+30     	; 0x40a8 <vfprintf+0x13c>
    408a:	93 35       	cpi	r25, 0x53	; 83
    408c:	09 f0       	breq	.+2      	; 0x4090 <vfprintf+0x124>
    408e:	56 c0       	rjmp	.+172    	; 0x413c <vfprintf+0x1d0>
    4090:	20 c0       	rjmp	.+64     	; 0x40d2 <vfprintf+0x166>
    4092:	f5 01       	movw	r30, r10
    4094:	80 81       	ld	r24, Z
    4096:	89 83       	std	Y+1, r24	; 0x01
    4098:	42 e0       	ldi	r20, 0x02	; 2
    409a:	50 e0       	ldi	r21, 0x00	; 0
    409c:	a4 0e       	add	r10, r20
    409e:	b5 1e       	adc	r11, r21
    40a0:	61 01       	movw	r12, r2
    40a2:	01 e0       	ldi	r16, 0x01	; 1
    40a4:	10 e0       	ldi	r17, 0x00	; 0
    40a6:	12 c0       	rjmp	.+36     	; 0x40cc <vfprintf+0x160>
    40a8:	f5 01       	movw	r30, r10
    40aa:	c0 80       	ld	r12, Z
    40ac:	d1 80       	ldd	r13, Z+1	; 0x01
    40ae:	f6 fc       	sbrc	r15, 6
    40b0:	03 c0       	rjmp	.+6      	; 0x40b8 <vfprintf+0x14c>
    40b2:	6f ef       	ldi	r22, 0xFF	; 255
    40b4:	7f ef       	ldi	r23, 0xFF	; 255
    40b6:	02 c0       	rjmp	.+4      	; 0x40bc <vfprintf+0x150>
    40b8:	69 2d       	mov	r22, r9
    40ba:	70 e0       	ldi	r23, 0x00	; 0
    40bc:	42 e0       	ldi	r20, 0x02	; 2
    40be:	50 e0       	ldi	r21, 0x00	; 0
    40c0:	a4 0e       	add	r10, r20
    40c2:	b5 1e       	adc	r11, r21
    40c4:	c6 01       	movw	r24, r12
    40c6:	0e 94 9e 21 	call	0x433c	; 0x433c <strnlen>
    40ca:	8c 01       	movw	r16, r24
    40cc:	5f e7       	ldi	r21, 0x7F	; 127
    40ce:	f5 22       	and	r15, r21
    40d0:	14 c0       	rjmp	.+40     	; 0x40fa <vfprintf+0x18e>
    40d2:	f5 01       	movw	r30, r10
    40d4:	c0 80       	ld	r12, Z
    40d6:	d1 80       	ldd	r13, Z+1	; 0x01
    40d8:	f6 fc       	sbrc	r15, 6
    40da:	03 c0       	rjmp	.+6      	; 0x40e2 <vfprintf+0x176>
    40dc:	6f ef       	ldi	r22, 0xFF	; 255
    40de:	7f ef       	ldi	r23, 0xFF	; 255
    40e0:	02 c0       	rjmp	.+4      	; 0x40e6 <vfprintf+0x17a>
    40e2:	69 2d       	mov	r22, r9
    40e4:	70 e0       	ldi	r23, 0x00	; 0
    40e6:	42 e0       	ldi	r20, 0x02	; 2
    40e8:	50 e0       	ldi	r21, 0x00	; 0
    40ea:	a4 0e       	add	r10, r20
    40ec:	b5 1e       	adc	r11, r21
    40ee:	c6 01       	movw	r24, r12
    40f0:	0e 94 93 21 	call	0x4326	; 0x4326 <strnlen_P>
    40f4:	8c 01       	movw	r16, r24
    40f6:	50 e8       	ldi	r21, 0x80	; 128
    40f8:	f5 2a       	or	r15, r21
    40fa:	f3 fe       	sbrs	r15, 3
    40fc:	07 c0       	rjmp	.+14     	; 0x410c <vfprintf+0x1a0>
    40fe:	1a c0       	rjmp	.+52     	; 0x4134 <vfprintf+0x1c8>
    4100:	80 e2       	ldi	r24, 0x20	; 32
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	b3 01       	movw	r22, r6
    4106:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    410a:	ea 94       	dec	r14
    410c:	8e 2d       	mov	r24, r14
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	08 17       	cp	r16, r24
    4112:	19 07       	cpc	r17, r25
    4114:	a8 f3       	brcs	.-22     	; 0x4100 <vfprintf+0x194>
    4116:	0e c0       	rjmp	.+28     	; 0x4134 <vfprintf+0x1c8>
    4118:	f6 01       	movw	r30, r12
    411a:	f7 fc       	sbrc	r15, 7
    411c:	85 91       	lpm	r24, Z+
    411e:	f7 fe       	sbrs	r15, 7
    4120:	81 91       	ld	r24, Z+
    4122:	6f 01       	movw	r12, r30
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	b3 01       	movw	r22, r6
    4128:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    412c:	e1 10       	cpse	r14, r1
    412e:	ea 94       	dec	r14
    4130:	01 50       	subi	r16, 0x01	; 1
    4132:	10 40       	sbci	r17, 0x00	; 0
    4134:	01 15       	cp	r16, r1
    4136:	11 05       	cpc	r17, r1
    4138:	79 f7       	brne	.-34     	; 0x4118 <vfprintf+0x1ac>
    413a:	ea c0       	rjmp	.+468    	; 0x4310 <vfprintf+0x3a4>
    413c:	94 36       	cpi	r25, 0x64	; 100
    413e:	11 f0       	breq	.+4      	; 0x4144 <vfprintf+0x1d8>
    4140:	99 36       	cpi	r25, 0x69	; 105
    4142:	69 f5       	brne	.+90     	; 0x419e <vfprintf+0x232>
    4144:	f7 fe       	sbrs	r15, 7
    4146:	08 c0       	rjmp	.+16     	; 0x4158 <vfprintf+0x1ec>
    4148:	f5 01       	movw	r30, r10
    414a:	20 81       	ld	r18, Z
    414c:	31 81       	ldd	r19, Z+1	; 0x01
    414e:	42 81       	ldd	r20, Z+2	; 0x02
    4150:	53 81       	ldd	r21, Z+3	; 0x03
    4152:	84 e0       	ldi	r24, 0x04	; 4
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	0a c0       	rjmp	.+20     	; 0x416c <vfprintf+0x200>
    4158:	f5 01       	movw	r30, r10
    415a:	80 81       	ld	r24, Z
    415c:	91 81       	ldd	r25, Z+1	; 0x01
    415e:	9c 01       	movw	r18, r24
    4160:	44 27       	eor	r20, r20
    4162:	37 fd       	sbrc	r19, 7
    4164:	40 95       	com	r20
    4166:	54 2f       	mov	r21, r20
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	a8 0e       	add	r10, r24
    416e:	b9 1e       	adc	r11, r25
    4170:	9f e6       	ldi	r25, 0x6F	; 111
    4172:	f9 22       	and	r15, r25
    4174:	57 ff       	sbrs	r21, 7
    4176:	09 c0       	rjmp	.+18     	; 0x418a <vfprintf+0x21e>
    4178:	50 95       	com	r21
    417a:	40 95       	com	r20
    417c:	30 95       	com	r19
    417e:	21 95       	neg	r18
    4180:	3f 4f       	sbci	r19, 0xFF	; 255
    4182:	4f 4f       	sbci	r20, 0xFF	; 255
    4184:	5f 4f       	sbci	r21, 0xFF	; 255
    4186:	e0 e8       	ldi	r30, 0x80	; 128
    4188:	fe 2a       	or	r15, r30
    418a:	ca 01       	movw	r24, r20
    418c:	b9 01       	movw	r22, r18
    418e:	a1 01       	movw	r20, r2
    4190:	2a e0       	ldi	r18, 0x0A	; 10
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__ultoa_invert>
    4198:	d8 2e       	mov	r13, r24
    419a:	d2 18       	sub	r13, r2
    419c:	40 c0       	rjmp	.+128    	; 0x421e <vfprintf+0x2b2>
    419e:	95 37       	cpi	r25, 0x75	; 117
    41a0:	29 f4       	brne	.+10     	; 0x41ac <vfprintf+0x240>
    41a2:	1f 2d       	mov	r17, r15
    41a4:	1f 7e       	andi	r17, 0xEF	; 239
    41a6:	2a e0       	ldi	r18, 0x0A	; 10
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	1d c0       	rjmp	.+58     	; 0x41e6 <vfprintf+0x27a>
    41ac:	1f 2d       	mov	r17, r15
    41ae:	19 7f       	andi	r17, 0xF9	; 249
    41b0:	9f 36       	cpi	r25, 0x6F	; 111
    41b2:	61 f0       	breq	.+24     	; 0x41cc <vfprintf+0x260>
    41b4:	90 37       	cpi	r25, 0x70	; 112
    41b6:	20 f4       	brcc	.+8      	; 0x41c0 <vfprintf+0x254>
    41b8:	98 35       	cpi	r25, 0x58	; 88
    41ba:	09 f0       	breq	.+2      	; 0x41be <vfprintf+0x252>
    41bc:	ac c0       	rjmp	.+344    	; 0x4316 <vfprintf+0x3aa>
    41be:	0f c0       	rjmp	.+30     	; 0x41de <vfprintf+0x272>
    41c0:	90 37       	cpi	r25, 0x70	; 112
    41c2:	39 f0       	breq	.+14     	; 0x41d2 <vfprintf+0x266>
    41c4:	98 37       	cpi	r25, 0x78	; 120
    41c6:	09 f0       	breq	.+2      	; 0x41ca <vfprintf+0x25e>
    41c8:	a6 c0       	rjmp	.+332    	; 0x4316 <vfprintf+0x3aa>
    41ca:	04 c0       	rjmp	.+8      	; 0x41d4 <vfprintf+0x268>
    41cc:	28 e0       	ldi	r18, 0x08	; 8
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	0a c0       	rjmp	.+20     	; 0x41e6 <vfprintf+0x27a>
    41d2:	10 61       	ori	r17, 0x10	; 16
    41d4:	14 fd       	sbrc	r17, 4
    41d6:	14 60       	ori	r17, 0x04	; 4
    41d8:	20 e1       	ldi	r18, 0x10	; 16
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	04 c0       	rjmp	.+8      	; 0x41e6 <vfprintf+0x27a>
    41de:	14 fd       	sbrc	r17, 4
    41e0:	16 60       	ori	r17, 0x06	; 6
    41e2:	20 e1       	ldi	r18, 0x10	; 16
    41e4:	32 e0       	ldi	r19, 0x02	; 2
    41e6:	17 ff       	sbrs	r17, 7
    41e8:	08 c0       	rjmp	.+16     	; 0x41fa <vfprintf+0x28e>
    41ea:	f5 01       	movw	r30, r10
    41ec:	60 81       	ld	r22, Z
    41ee:	71 81       	ldd	r23, Z+1	; 0x01
    41f0:	82 81       	ldd	r24, Z+2	; 0x02
    41f2:	93 81       	ldd	r25, Z+3	; 0x03
    41f4:	44 e0       	ldi	r20, 0x04	; 4
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	08 c0       	rjmp	.+16     	; 0x420a <vfprintf+0x29e>
    41fa:	f5 01       	movw	r30, r10
    41fc:	80 81       	ld	r24, Z
    41fe:	91 81       	ldd	r25, Z+1	; 0x01
    4200:	bc 01       	movw	r22, r24
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	42 e0       	ldi	r20, 0x02	; 2
    4208:	50 e0       	ldi	r21, 0x00	; 0
    420a:	a4 0e       	add	r10, r20
    420c:	b5 1e       	adc	r11, r21
    420e:	a1 01       	movw	r20, r2
    4210:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__ultoa_invert>
    4214:	d8 2e       	mov	r13, r24
    4216:	d2 18       	sub	r13, r2
    4218:	8f e7       	ldi	r24, 0x7F	; 127
    421a:	f8 2e       	mov	r15, r24
    421c:	f1 22       	and	r15, r17
    421e:	f6 fe       	sbrs	r15, 6
    4220:	0b c0       	rjmp	.+22     	; 0x4238 <vfprintf+0x2cc>
    4222:	5e ef       	ldi	r21, 0xFE	; 254
    4224:	f5 22       	and	r15, r21
    4226:	d9 14       	cp	r13, r9
    4228:	38 f4       	brcc	.+14     	; 0x4238 <vfprintf+0x2cc>
    422a:	f4 fe       	sbrs	r15, 4
    422c:	07 c0       	rjmp	.+14     	; 0x423c <vfprintf+0x2d0>
    422e:	f2 fc       	sbrc	r15, 2
    4230:	05 c0       	rjmp	.+10     	; 0x423c <vfprintf+0x2d0>
    4232:	8f ee       	ldi	r24, 0xEF	; 239
    4234:	f8 22       	and	r15, r24
    4236:	02 c0       	rjmp	.+4      	; 0x423c <vfprintf+0x2d0>
    4238:	1d 2d       	mov	r17, r13
    423a:	01 c0       	rjmp	.+2      	; 0x423e <vfprintf+0x2d2>
    423c:	19 2d       	mov	r17, r9
    423e:	f4 fe       	sbrs	r15, 4
    4240:	0d c0       	rjmp	.+26     	; 0x425c <vfprintf+0x2f0>
    4242:	fe 01       	movw	r30, r28
    4244:	ed 0d       	add	r30, r13
    4246:	f1 1d       	adc	r31, r1
    4248:	80 81       	ld	r24, Z
    424a:	80 33       	cpi	r24, 0x30	; 48
    424c:	19 f4       	brne	.+6      	; 0x4254 <vfprintf+0x2e8>
    424e:	99 ee       	ldi	r25, 0xE9	; 233
    4250:	f9 22       	and	r15, r25
    4252:	08 c0       	rjmp	.+16     	; 0x4264 <vfprintf+0x2f8>
    4254:	1f 5f       	subi	r17, 0xFF	; 255
    4256:	f2 fe       	sbrs	r15, 2
    4258:	05 c0       	rjmp	.+10     	; 0x4264 <vfprintf+0x2f8>
    425a:	03 c0       	rjmp	.+6      	; 0x4262 <vfprintf+0x2f6>
    425c:	8f 2d       	mov	r24, r15
    425e:	86 78       	andi	r24, 0x86	; 134
    4260:	09 f0       	breq	.+2      	; 0x4264 <vfprintf+0x2f8>
    4262:	1f 5f       	subi	r17, 0xFF	; 255
    4264:	0f 2d       	mov	r16, r15
    4266:	f3 fc       	sbrc	r15, 3
    4268:	14 c0       	rjmp	.+40     	; 0x4292 <vfprintf+0x326>
    426a:	f0 fe       	sbrs	r15, 0
    426c:	0f c0       	rjmp	.+30     	; 0x428c <vfprintf+0x320>
    426e:	1e 15       	cp	r17, r14
    4270:	10 f0       	brcs	.+4      	; 0x4276 <vfprintf+0x30a>
    4272:	9d 2c       	mov	r9, r13
    4274:	0b c0       	rjmp	.+22     	; 0x428c <vfprintf+0x320>
    4276:	9d 2c       	mov	r9, r13
    4278:	9e 0c       	add	r9, r14
    427a:	91 1a       	sub	r9, r17
    427c:	1e 2d       	mov	r17, r14
    427e:	06 c0       	rjmp	.+12     	; 0x428c <vfprintf+0x320>
    4280:	80 e2       	ldi	r24, 0x20	; 32
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	b3 01       	movw	r22, r6
    4286:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    428a:	1f 5f       	subi	r17, 0xFF	; 255
    428c:	1e 15       	cp	r17, r14
    428e:	c0 f3       	brcs	.-16     	; 0x4280 <vfprintf+0x314>
    4290:	04 c0       	rjmp	.+8      	; 0x429a <vfprintf+0x32e>
    4292:	1e 15       	cp	r17, r14
    4294:	10 f4       	brcc	.+4      	; 0x429a <vfprintf+0x32e>
    4296:	e1 1a       	sub	r14, r17
    4298:	01 c0       	rjmp	.+2      	; 0x429c <vfprintf+0x330>
    429a:	ee 24       	eor	r14, r14
    429c:	04 ff       	sbrs	r16, 4
    429e:	0f c0       	rjmp	.+30     	; 0x42be <vfprintf+0x352>
    42a0:	80 e3       	ldi	r24, 0x30	; 48
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	b3 01       	movw	r22, r6
    42a6:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    42aa:	02 ff       	sbrs	r16, 2
    42ac:	1d c0       	rjmp	.+58     	; 0x42e8 <vfprintf+0x37c>
    42ae:	01 fd       	sbrc	r16, 1
    42b0:	03 c0       	rjmp	.+6      	; 0x42b8 <vfprintf+0x34c>
    42b2:	88 e7       	ldi	r24, 0x78	; 120
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	0e c0       	rjmp	.+28     	; 0x42d4 <vfprintf+0x368>
    42b8:	88 e5       	ldi	r24, 0x58	; 88
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0b c0       	rjmp	.+22     	; 0x42d4 <vfprintf+0x368>
    42be:	80 2f       	mov	r24, r16
    42c0:	86 78       	andi	r24, 0x86	; 134
    42c2:	91 f0       	breq	.+36     	; 0x42e8 <vfprintf+0x37c>
    42c4:	01 ff       	sbrs	r16, 1
    42c6:	02 c0       	rjmp	.+4      	; 0x42cc <vfprintf+0x360>
    42c8:	8b e2       	ldi	r24, 0x2B	; 43
    42ca:	01 c0       	rjmp	.+2      	; 0x42ce <vfprintf+0x362>
    42cc:	80 e2       	ldi	r24, 0x20	; 32
    42ce:	f7 fc       	sbrc	r15, 7
    42d0:	8d e2       	ldi	r24, 0x2D	; 45
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	b3 01       	movw	r22, r6
    42d6:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    42da:	06 c0       	rjmp	.+12     	; 0x42e8 <vfprintf+0x37c>
    42dc:	80 e3       	ldi	r24, 0x30	; 48
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	b3 01       	movw	r22, r6
    42e2:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    42e6:	9a 94       	dec	r9
    42e8:	d9 14       	cp	r13, r9
    42ea:	c0 f3       	brcs	.-16     	; 0x42dc <vfprintf+0x370>
    42ec:	da 94       	dec	r13
    42ee:	f1 01       	movw	r30, r2
    42f0:	ed 0d       	add	r30, r13
    42f2:	f1 1d       	adc	r31, r1
    42f4:	80 81       	ld	r24, Z
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	b3 01       	movw	r22, r6
    42fa:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    42fe:	dd 20       	and	r13, r13
    4300:	a9 f7       	brne	.-22     	; 0x42ec <vfprintf+0x380>
    4302:	06 c0       	rjmp	.+12     	; 0x4310 <vfprintf+0x3a4>
    4304:	80 e2       	ldi	r24, 0x20	; 32
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	b3 01       	movw	r22, r6
    430a:	0e 94 a9 21 	call	0x4352	; 0x4352 <fputc>
    430e:	ea 94       	dec	r14
    4310:	ee 20       	and	r14, r14
    4312:	c1 f7       	brne	.-16     	; 0x4304 <vfprintf+0x398>
    4314:	43 ce       	rjmp	.-890    	; 0x3f9c <vfprintf+0x30>
    4316:	f3 01       	movw	r30, r6
    4318:	66 81       	ldd	r22, Z+6	; 0x06
    431a:	77 81       	ldd	r23, Z+7	; 0x07
    431c:	cb 01       	movw	r24, r22
    431e:	2b 96       	adiw	r28, 0x0b	; 11
    4320:	e2 e1       	ldi	r30, 0x12	; 18
    4322:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__>

00004326 <strnlen_P>:
    4326:	fc 01       	movw	r30, r24
    4328:	05 90       	lpm	r0, Z+
    432a:	61 50       	subi	r22, 0x01	; 1
    432c:	70 40       	sbci	r23, 0x00	; 0
    432e:	01 10       	cpse	r0, r1
    4330:	d8 f7       	brcc	.-10     	; 0x4328 <strnlen_P+0x2>
    4332:	80 95       	com	r24
    4334:	90 95       	com	r25
    4336:	8e 0f       	add	r24, r30
    4338:	9f 1f       	adc	r25, r31
    433a:	08 95       	ret

0000433c <strnlen>:
    433c:	fc 01       	movw	r30, r24
    433e:	61 50       	subi	r22, 0x01	; 1
    4340:	70 40       	sbci	r23, 0x00	; 0
    4342:	01 90       	ld	r0, Z+
    4344:	01 10       	cpse	r0, r1
    4346:	d8 f7       	brcc	.-10     	; 0x433e <strnlen+0x2>
    4348:	80 95       	com	r24
    434a:	90 95       	com	r25
    434c:	8e 0f       	add	r24, r30
    434e:	9f 1f       	adc	r25, r31
    4350:	08 95       	ret

00004352 <fputc>:
    4352:	0f 93       	push	r16
    4354:	1f 93       	push	r17
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	8c 01       	movw	r16, r24
    435c:	eb 01       	movw	r28, r22
    435e:	8b 81       	ldd	r24, Y+3	; 0x03
    4360:	81 ff       	sbrs	r24, 1
    4362:	1b c0       	rjmp	.+54     	; 0x439a <fputc+0x48>
    4364:	82 ff       	sbrs	r24, 2
    4366:	0d c0       	rjmp	.+26     	; 0x4382 <fputc+0x30>
    4368:	2e 81       	ldd	r18, Y+6	; 0x06
    436a:	3f 81       	ldd	r19, Y+7	; 0x07
    436c:	8c 81       	ldd	r24, Y+4	; 0x04
    436e:	9d 81       	ldd	r25, Y+5	; 0x05
    4370:	28 17       	cp	r18, r24
    4372:	39 07       	cpc	r19, r25
    4374:	64 f4       	brge	.+24     	; 0x438e <fputc+0x3c>
    4376:	e8 81       	ld	r30, Y
    4378:	f9 81       	ldd	r31, Y+1	; 0x01
    437a:	01 93       	st	Z+, r16
    437c:	f9 83       	std	Y+1, r31	; 0x01
    437e:	e8 83       	st	Y, r30
    4380:	06 c0       	rjmp	.+12     	; 0x438e <fputc+0x3c>
    4382:	e8 85       	ldd	r30, Y+8	; 0x08
    4384:	f9 85       	ldd	r31, Y+9	; 0x09
    4386:	80 2f       	mov	r24, r16
    4388:	09 95       	icall
    438a:	89 2b       	or	r24, r25
    438c:	31 f4       	brne	.+12     	; 0x439a <fputc+0x48>
    438e:	8e 81       	ldd	r24, Y+6	; 0x06
    4390:	9f 81       	ldd	r25, Y+7	; 0x07
    4392:	01 96       	adiw	r24, 0x01	; 1
    4394:	9f 83       	std	Y+7, r25	; 0x07
    4396:	8e 83       	std	Y+6, r24	; 0x06
    4398:	02 c0       	rjmp	.+4      	; 0x439e <fputc+0x4c>
    439a:	0f ef       	ldi	r16, 0xFF	; 255
    439c:	1f ef       	ldi	r17, 0xFF	; 255
    439e:	c8 01       	movw	r24, r16
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	08 95       	ret

000043aa <__ultoa_invert>:
    43aa:	fa 01       	movw	r30, r20
    43ac:	aa 27       	eor	r26, r26
    43ae:	28 30       	cpi	r18, 0x08	; 8
    43b0:	51 f1       	breq	.+84     	; 0x4406 <__ultoa_invert+0x5c>
    43b2:	20 31       	cpi	r18, 0x10	; 16
    43b4:	81 f1       	breq	.+96     	; 0x4416 <__ultoa_invert+0x6c>
    43b6:	e8 94       	clt
    43b8:	6f 93       	push	r22
    43ba:	6e 7f       	andi	r22, 0xFE	; 254
    43bc:	6e 5f       	subi	r22, 0xFE	; 254
    43be:	7f 4f       	sbci	r23, 0xFF	; 255
    43c0:	8f 4f       	sbci	r24, 0xFF	; 255
    43c2:	9f 4f       	sbci	r25, 0xFF	; 255
    43c4:	af 4f       	sbci	r26, 0xFF	; 255
    43c6:	b1 e0       	ldi	r27, 0x01	; 1
    43c8:	3e d0       	rcall	.+124    	; 0x4446 <__ultoa_invert+0x9c>
    43ca:	b4 e0       	ldi	r27, 0x04	; 4
    43cc:	3c d0       	rcall	.+120    	; 0x4446 <__ultoa_invert+0x9c>
    43ce:	67 0f       	add	r22, r23
    43d0:	78 1f       	adc	r23, r24
    43d2:	89 1f       	adc	r24, r25
    43d4:	9a 1f       	adc	r25, r26
    43d6:	a1 1d       	adc	r26, r1
    43d8:	68 0f       	add	r22, r24
    43da:	79 1f       	adc	r23, r25
    43dc:	8a 1f       	adc	r24, r26
    43de:	91 1d       	adc	r25, r1
    43e0:	a1 1d       	adc	r26, r1
    43e2:	6a 0f       	add	r22, r26
    43e4:	71 1d       	adc	r23, r1
    43e6:	81 1d       	adc	r24, r1
    43e8:	91 1d       	adc	r25, r1
    43ea:	a1 1d       	adc	r26, r1
    43ec:	20 d0       	rcall	.+64     	; 0x442e <__ultoa_invert+0x84>
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <__ultoa_invert+0x48>
    43f0:	68 94       	set
    43f2:	3f 91       	pop	r19
    43f4:	2a e0       	ldi	r18, 0x0A	; 10
    43f6:	26 9f       	mul	r18, r22
    43f8:	11 24       	eor	r1, r1
    43fa:	30 19       	sub	r19, r0
    43fc:	30 5d       	subi	r19, 0xD0	; 208
    43fe:	31 93       	st	Z+, r19
    4400:	de f6       	brtc	.-74     	; 0x43b8 <__ultoa_invert+0xe>
    4402:	cf 01       	movw	r24, r30
    4404:	08 95       	ret
    4406:	46 2f       	mov	r20, r22
    4408:	47 70       	andi	r20, 0x07	; 7
    440a:	40 5d       	subi	r20, 0xD0	; 208
    440c:	41 93       	st	Z+, r20
    440e:	b3 e0       	ldi	r27, 0x03	; 3
    4410:	0f d0       	rcall	.+30     	; 0x4430 <__ultoa_invert+0x86>
    4412:	c9 f7       	brne	.-14     	; 0x4406 <__ultoa_invert+0x5c>
    4414:	f6 cf       	rjmp	.-20     	; 0x4402 <__ultoa_invert+0x58>
    4416:	46 2f       	mov	r20, r22
    4418:	4f 70       	andi	r20, 0x0F	; 15
    441a:	40 5d       	subi	r20, 0xD0	; 208
    441c:	4a 33       	cpi	r20, 0x3A	; 58
    441e:	18 f0       	brcs	.+6      	; 0x4426 <__ultoa_invert+0x7c>
    4420:	49 5d       	subi	r20, 0xD9	; 217
    4422:	31 fd       	sbrc	r19, 1
    4424:	40 52       	subi	r20, 0x20	; 32
    4426:	41 93       	st	Z+, r20
    4428:	02 d0       	rcall	.+4      	; 0x442e <__ultoa_invert+0x84>
    442a:	a9 f7       	brne	.-22     	; 0x4416 <__ultoa_invert+0x6c>
    442c:	ea cf       	rjmp	.-44     	; 0x4402 <__ultoa_invert+0x58>
    442e:	b4 e0       	ldi	r27, 0x04	; 4
    4430:	a6 95       	lsr	r26
    4432:	97 95       	ror	r25
    4434:	87 95       	ror	r24
    4436:	77 95       	ror	r23
    4438:	67 95       	ror	r22
    443a:	ba 95       	dec	r27
    443c:	c9 f7       	brne	.-14     	; 0x4430 <__ultoa_invert+0x86>
    443e:	00 97       	sbiw	r24, 0x00	; 0
    4440:	61 05       	cpc	r22, r1
    4442:	71 05       	cpc	r23, r1
    4444:	08 95       	ret
    4446:	9b 01       	movw	r18, r22
    4448:	ac 01       	movw	r20, r24
    444a:	0a 2e       	mov	r0, r26
    444c:	06 94       	lsr	r0
    444e:	57 95       	ror	r21
    4450:	47 95       	ror	r20
    4452:	37 95       	ror	r19
    4454:	27 95       	ror	r18
    4456:	ba 95       	dec	r27
    4458:	c9 f7       	brne	.-14     	; 0x444c <__ultoa_invert+0xa2>
    445a:	62 0f       	add	r22, r18
    445c:	73 1f       	adc	r23, r19
    445e:	84 1f       	adc	r24, r20
    4460:	95 1f       	adc	r25, r21
    4462:	a0 1d       	adc	r26, r0
    4464:	08 95       	ret

00004466 <_exit>:
    4466:	f8 94       	cli

00004468 <__stop_program>:
    4468:	ff cf       	rjmp	.-2      	; 0x4468 <__stop_program>
